<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="zh-CN">
  <id>https://www.patract.io/</id>
  <title/>
  <author>
    <name>patractlabs</name>
  </author>
  <updated>2021-04-01T08:53:56.812Z</updated>
  <generator>@mr-hope/vuepress-plugin-feed</generator>
  <link rel="self" href="https://www.patract.io/atom.xml"/>
  <link rel="alternate" href="https://www.patract.io/"/>
  <rights>Copyright by patractlabs</rights>
  <contributor>
    <name>patractlabs</name>
  </contributor>
  <entry>
    <title type="html">Summary</title>
    <id>https://www.patract.io/</id>
    <link href="https://www.patract.io/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="summary"> Summary</h1>
<ul>
<li><a href="./introduction.html">介绍</a>
<ul>
<li><a href="./contracts/overview.html">合约综述</a></li>
<li><a href="./contracts/model.html">合约模型</a></li>
<li><a href="./contracts/language.html">合约语言（框架）</a></li>
<li><a href="./contracts/wasm_first_step.html">Wasm初步</a></li>
</ul>
</li>
<li><a href="./pallet-contracts/introduction.html">pallet-contracts 合约模块</a></li>
<li><a href="./ink/introduction.html">ink!</a>
<ul>
<li><a href="./ink/tutorial.html">ink! tutorial</a></li>
<li><a href="./ink/framework.html">ink! 框架</a></li>
<li><a href="./ink/edsl-basic.html">ink! eDSL基础元素</a></li>
<li><a href="./ink/call-contracts.html">ink! 跨合约调用</a></li>
<li><a href="./ink/ink-solidity.html">ink! 与solidity的对比</a></li>
<li><a href="./ink/cargo-contract.html">cargo-contract</a></li>
<li><a href="./ink/trap.html">ink! 当前的坑</a></li>
</ul>
</li>
<li><a href="./ask/introduction.html">Ask!</a>
<ul>
<li><a href="./ask/tutorial.html">tutorial</a></li>
<li><a href="./ask/design.html">设计</a></li>
<li><a href="./ask/basics.html">基础</a></li>
<li><a href="./ask/example.html">example</a></li>
</ul>
</li>
<li><a href="./solang/introduction.html">Solang</a></li>
<li><a href="./redspot/introduction.html">Redspot</a>
<ul>
<li><a href="./redspot/tutorial.html">tutorial</a></li>
<li><a href="./redspot/overview.html">介绍</a></li>
<li><a href="./redspot/configuration.html">配置</a></li>
<li><a href="./redspot/runtime-environment.html">Runtime Environment</a></li>
<li><a href="./redspot/console.html">控制台console</a></li>
<li><a href="./redspot/q-and-a.html">Q &amp; A</a></li>
<li><a href="./redspot/plugin.html">plugin</a>
<ul>
<li><a href="./redspot/plugin/redspot-chai.html">@redspot/chai</a></li>
<li><a href="./redspot/plugin/redspot-gas-reporter.html">@redspot/gas-reporter</a></li>
<li><a href="./redspot/plugin/redspot-patract.html">@redspot/patract</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="./europa/introduction.html">Europa</a>
<ul>
<li><a href="./europa/tutorial.html">tutorial</a></li>
<li><a href="./europa/execution_info.html">合约执行日志信息解释</a></li>
<li><a href="./europa/sample.html">根据信息定位问题示例</a></li>
<li><a href="./europa/wasm_executor.html">Wasm executor</a></li>
<li><a href="./europa/wasm_backtrace.html">Wasm Backtrace</a></li>
</ul>
</li>
<li><a href="./zkmega/introduction.html">zkMega</a>
<ul>
<li><a href="./zkmega/tutorial.html">tutorial</a></li>
<li><a href="./zkmega/contract.html">零知识合约</a></li>
<li><a href="./zkmega/example.html">使用案例</a></li>
<li><a href="./zkmega/benchmark.html">benchmark</a></li>
</ul>
</li>
<li><a href="./himalia/introduction.html">Himalia</a>
<ul>
<li><a href="./himalia/tutorial.html">tutorial</a></li>
<li><a href="./himalia/go-patract.html">go-patract</a></li>
<li><a href="./himalia/py-patract.html">py-patract</a></li>
</ul>
</li>
<li><a href="./metis/introduction.html">Metis</a>
<ul>
<li><a href="./metis/tokens.html">Tokens</a></li>
<li><a href="./metis/access-control.html">Access Control</a></li>
</ul>
</li>
<li><a href="./carpo/introduction.html">Carpo</a></li>
<li><a href="./patract/introduction.html">Patract</a></li>
<li><a href="./elara/introduction.html">Elara</a>
<ul>
<li><a href="./elara/tutorial.html">tutorial</a></li>
<li><a href="./elara/design.html">设计</a></li>
<li><a href="./elara/API.html">API</a></li>
</ul>
</li>
<li><a href="./patra-store/introduction.html">PatraStore</a>
<ul>
<li><a href="./patra-store/overview.html">Overview</a></li>
<li><a href="./patra-store/getting-starter.html">Getting Starter</a></li>
<li><a href="./patra-store/publish-dapps.html">发布DApp</a></li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">基础</title>
    <id>https://www.patract.io/ask/basics/</id>
    <link href="https://www.patract.io/ask/basics/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基础"> 基础</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">设计</title>
    <id>https://www.patract.io/ask/design/</id>
    <link href="https://www.patract.io/ask/design/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="设计"> 设计</h1>
<h2 id="ask-设计总览"> Ask! 设计总览</h2>
<p>AssemblyScript 使用 asc 编译器将TypeScript（TS）文件编译为WebAssembly字节码。 但是，asc是通用编译工具，无法使用智能合约结构将TS文件直接编译为WASM字节码和元数据信息。因此为了使 asc 能够识别并解析 Ask! 提供的和合约相关的注解与特定语法，需要对 asc 进行修改。</p>
<h2 id="设计-2"> 设计</h2>
<p>ask! 将提供 <code>Contract Framework</code>（在以下描述中称为 <code>Framework</code>）和<code>Contract PreProcessor</code>（在以下描述中称为<code>PreProcessor</code>）两个组件。 此外，我们还将提供一个名为ask-cli的支持工具（类似于ink!的<code>cargo-contract</code>），用于帮助建立和管理用Ask！编写的Wasm智能合约。</p>
<p>Ask!的功能按照如下实现：</p>
<ul>
<li>
<p><code>Framework</code>的主要功能是为链上API提供高级包装，然后提供用于通过注解类型编写合约的规范。它需要完成以下任务：</p>
<ul>
<li>定义基于注解的合约撰写规范</li>
<li>在元数据中定义合约接口的描述规范</li>
<li>封装合约与链之间数据交互的详细信息，例如合约存储中密钥生成规则的定义以及存储的读写</li>
<li>封装链上的功能组件，例如Balance，AccountId，Block，Crypto等。</li>
<li>根据合约的语义将AS合约编译为Wasm代码，并包含与FRAME合约的交互接口的链接符号。</li>
</ul>
</li>
<li>
<p><code>PreProcessor</code>的主要功能是解析框架中定义的注解，并为这些注解生成相应的逻辑代码。根据框架中的合约接口规范，生成元数据文件。这个部分需要完成以下任务：</p>
<ul>
<li>解析合约中的注解并生成相应的逻辑代码</li>
<li>解析合约接口和参数，并生成元数据文件</li>
<li>解析自定义合约语法（语法糖），并生成相应的逻辑代码</li>
<li>自动存储和加载数据</li>
</ul>
</li>
<li>
<p><code>ask-cli</code>的主要功能是在cli中管理Ask!项目，其中包括以下功能：</p>
<ul>
<li>创建ask!合约模板。</li>
<li>简化ask!在项目编译过程中，隐藏预处理和编译过程的详细信息。</li>
<li>管理<code>Framework</code>，<code>PreProcessor</code>和Compiler的版本依赖性。</li>
<li>检查所生成的Wasm代码的合法性。</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">example</title>
    <id>https://www.patract.io/ask/example/</id>
    <link href="https://www.patract.io/ask/example/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="example"> example</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Ask!</title>
    <id>https://www.patract.io/ask/introduction/</id>
    <link href="https://www.patract.io/ask/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ask"> Ask!</h1>
<p><img src="https://camo.githubusercontent.com/207ae88065c356df521ad4c6cff4a68ef91ae963a9c65893dd0d9d991a4e00a8/68747470733a2f2f706174726163742e6e6574776f726b2f696d616765732f706174726163742d61736b2e706e67" alt=""></p>
<p>Ask! 是由 Patract 设计的，基于 AssemblyScript 上构建的，能运行于<code>pallet-contracts</code>模块上的Wasm合约语言框架。</p>
<p>尽管 AssemblyScript 只是 typescript 的一个子集，但是有很多使用 typescript 作为开发语言的开发人员，因此这些开发人员学习 AssemblyScript 的成本非常低。 因此，Patract 认为 Ask! 项目具有很好的应用开发前景。与基于Rust的ink!相比，Patract 认为基于 typescript 的Ask! 可以有效降低合同开发者的门槛并丰富合同开发生态系统。</p>
<p>Ask! 使用和 ink! 采取宏设计eDSL这样类似的方式，通过在 AssemblyScript （后文称作AS）中提供注解，在AS的语法基础上提供了能适用于<code>pallet-contracts</code>合约模型上的功能。通过注解的这种实现方式，尽量隐藏了与合约相关的细节。另一方面 Ask! 的实现将会与 ink! 接近，在<strong>最终实现上将会最大程度保证与 ink! 合约的兼容</strong>。</p>
<blockquote>
<p>例如：
ink! 描述合约的外部调用接口采用 <code>#[ink(constructor)]</code>, <code>#[ink(message)]</code> 对合约结构体的方法进行修饰。
在 Ask! 中，将会采用 <code>@constructor</code>，<code>@action</code> 等注解修饰合约的类方法，实现类似的功能。</p>
</blockquote>
<h2 id="ask-开发进度"> Ask! 开发进度</h2>
<p><strong>Ask! 当前还在开发当中，当前只完成了Kusama财政议案的v0.1版。当前的很多设计将来都有可能发生不兼容性改变。</strong></p>
<p>TODO： 添加议案链接及报告链接。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/ask/tutorial/</id>
    <link href="https://www.patract.io/ask/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<blockquote>
<p>当前 Ask! 只进行了Kusama国库议案的第一期的开发。因此还未发布到npm等公开仓库中。</p>
</blockquote>
<h2 id="简单运行"> 简单运行：</h2>
<ol>
<li>
<p>clone 项目</p>
<div><pre><code>$ <span>git</span> clone https://github.com/patractlabs/ask
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>案例合约</p>
<p>在Ask!项目中准备了一些案例合约例如<code>flipper</code>，<code>incrementer</code>等，在<code>/example</code>目录下。开发者可以直接参考这些项目，也可以通过新建一个typescript文件(*.ts)来执行下列过程。以下示例过程的最终代码位于<code>/example/solar</code> 目录下。</p>
<ol>
<li>
<p>新建文件 <code>solar.ts</code></p>
</li>
<li>
<p>定义合约存储</p>
<p>Ask! 采用注解 <code>@storage</code> 定义一个合约的存储。这个过程类似于ink!中的 <code>#[ink(storage)]</code>宏。例如在这个案例中，我们定义下面3个合约存储变量：</p>
<div><pre><code>@storage
<span>class</span> <span>Planets</span> <span>{</span>
    name<span>:</span> <span>string</span><span>;</span>
    radius<span>:</span> u32<span>;</span>
    isdwarf<span>:</span> <span>boolean</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>定义合约的范围及可调用方法：</p>
<p>Ask! 采用<code>@contract</code>注解来指定一个class为合约类。这个过程类似于ink!中的 <code>#[ink::contract]</code>宏。</p>
<div><pre><code>@contract
<span>class</span> <span>SolarSystem</span> <span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>Ask! 提供了<code>@constructor</code> 和 <code>@message</code> 注解修饰合约类中的方法，类似于ink!中的 <code>#[ink(constructor)]</code> 和 <code>#[ink(message)]</code>。</p>
<div><pre><code>@contract
<span>class</span> <span>SolarSystem</span> <span>{</span>
    @<span>constructor</span>
    <span>default</span><span>(</span>name<span>:</span> <span>string</span><span>)</span> <span>void</span> <span>{</span> <span>/*...*/</span> <span>}</span>

    @<span>message</span><span>(</span>mutates <span>=</span> <span>false</span><span>,</span> selector <span>=</span> <span>"0x0a0b0c0d"</span><span>)</span>
    <span>getRadius</span><span>(</span><span>)</span><span>:</span> u32 <span>{</span> <span>/*...*/</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>编译 Ask! 合约</p>
<ol>
<li>
<p>安装依赖环境：</p>
<p>进入Ask!项目的根目录，执行命令：</p>
<div><pre><code>$ <span>npm</span> <span>install</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>编译</p>
<p>在 Ask! 项目的<strong>根目录</strong>下编译合约。假设当前合约的路径位于<code>examples/solar/solar.ts</code>（开发者可以替换为自己合约文件的路径），则编译命令是：</p>
<div><pre><code>./assembly/codegen/bin/ask examples/solar/solar.ts
</code></pre>
<div><span>1</span><br></div></div><p>执行了这个命令后，会在合约文件的目录下生成一个扩展文件<code>extension.ts</code>，且合约的编译产物位于合约文件目录下的<code>target</code>目录。</p>
</li>
<li>
<p>测试</p>
<p>开发者可以采用 Patract 提供的合约执行环境沙盒 <a href="./../europa/introduction.html">Europa</a> 进行合约的部署调用和测试。</p>
<p>启动 Europa后，开发者可以通过 <a href="https://polkadot.js.org/apps" target="_blank" rel="noopener noreferrer">https://polkadot.js.org/apps</a> 将<code>target</code>目录下的合约进行部署和调用，这个过程和 ink! 合约的操作过程一致。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Carpo</title>
    <id>https://www.patract.io/carpo/introduction/</id>
    <link href="https://www.patract.io/carpo/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="carpo"> Carpo</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">合约语言（框架）</title>
    <id>https://www.patract.io/contracts/language/</id>
    <link href="https://www.patract.io/contracts/language/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="合约语言-框架"> 合约语言（框架）</h1>
<p>与“合约模型”的概念相对应的（运行平台），我们可以衍生出合约语言（框架）的概念（编写能运行于平台上的代码）。</p>
<p>而这里不简单的使用“合约语言”，而是用“合约语言（框架）”这样的词语，是因为由于上一章节中我们已经拆分出了“合约沙盒”与“合约模型”的结构层次，因此实际上一些新型的合约平台并不是像EVM那样“发明”了一套新的Solidity合约语言，而是选择了一些语言（如Rust，C++，AssemblyScript等），基于这门语言在“hack语法解析”，“宏”，等维度上给现有语言添加上合约相关的约束，功能逻辑等。因此许多情况下会以“框架”，“库”等形态存在（如Frame Contract Pallet的rust合约语言框架ink!）。而这种“框架/库”又不是平时程序开发中使用库的维度，有一些合约语言框架需要修改到编译器维度，因此我们更倾向称呼为“语言框架”。</p>
<h2 id="合约语言-框架-与合约模型的对应关系"> 合约语言（框架）与合约模型的对应关系</h2>
<p><img src="./imgs/language_1.jpg" alt="language 1"></p>
<p>如上图所示，上半部分是 EVM 与 Solidity 之间的关系。由于EVM/Solidity提出的时间比较早，因此其模型与通常的计算机虚拟机与语言的模型关系是一致的。而下半部分是在分离了合约模型后，语言框架部分的对应关系。</p>
<p>这里重点介绍下半部分，上半部分读者可以根据自己在以太坊合约开发的经验对比后文的介绍进行分析。</p>
<p>在编译形语言的体系中，先简单定义以下名词（非严谨说法，仅为了后文介绍而定义）：</p>
<ul>
<li>S语言：程序员编写代码的原语言(source)，例如将C++编译成汇编，那么C++就是原语言S</li>
<li>T语言：S语言通过编译器编译后生产的语言(target)，例如将C++编译成汇编，那么汇编就是目标语言T</li>
</ul>
<p>前文已经介绍了运行合约体系的环境可以在逻辑上拆分为“合约模型”与“合约虚拟机”，前者管合约的业务逻辑，后者管如何运行合约的代码，那么相对应的，合约语言部分同样可以拆解为“合约语言框架”和“编译到合约虚拟机的S语言”。</p>
<p>那么根据这种定义，显然，Solidity就是就是一种同时具备“合约语言框架”和“S语言”特性的产物：</p>
<ol>
<li>
<p>Solidity具备图灵完备的语言体系，因此Solidity是一门“语言”（相对于BTC脚本而言）</p>
</li>
<li>
<p>Solidity的语法中具备很多合约特性的关键字，对应于“合约语言框架”的概念，如：</p>
<ul>
<li><code>mapping</code>：合约存储的典型案例</li>
<li><code>msg.sender</code>, <code>msg.value</code>：等与合约调用相关的变量</li>
<li><code>view</code>,<code>pure</code>等修饰符</li>
<li><code>call</code>,<code>delegate_call</code>等与合约调用相关关键字</li>
</ul>
<p>这些概念并非是为了支持Solidity这门语言能执行逻辑而存在的，而是为了服务于Ethereum合约虚拟机的业务逻辑而存在的。</p>
</li>
</ol>
<p>而“合约语言框架”实现的目的就是为了与合约模型的业务逻辑所对应，什么样的合约模型就需要什么样的合约语言框架。例如EVM底层是k/v类型的存储，因此Solidity中设计的<code>mapping</code>不能遍历（除非附带多余存储）。例如EVM合约交互的合约模型设计为合约调用合约的模式，那么Solidity中就提供了<code>call</code>，<code>delegate_call</code>。<strong>对应到其他合约体系也同理</strong>。</p>
<p>而另一方面合约语言框架是架设到S语言上的附加功能，因此合约语言框架提供的功能最终也是编译到S语言对应的T语言上。而区块链所需要的一些特性例如确定性要求，不允许使用操作系统调用的接口等等，会在这个层面上<strong>做约束</strong>。因此合约语言框架除了本身对S语言本身提供了合约模型的功能以外，还会需要给语言本身产生一定的约束。这一步也是开发和理解合约语言框架中比较困难的地方。同时也正是由于这个点，造成了合约开发者使用合约模型框架的过程中很多别扭的情况。而Solidity或者Move等语言本身就是针对合约平台开发的新语言，纵使其语法会有很多模拟其他语言的痕迹，但是在做约束的这点上可以做到对合约开发者比较友好。而对现有语言加上合约语言框架功能的合约语言，在这一点上很难处理的很好，而这也是造成合约开发者较难使用框架功能的原因之一。</p>
<p>以ink!举例而言：</p>
<ol>
<li>
<p>在区块链中应该避免使用float，因为浮点数可能产生非确定性行为。因此在合约/runtime开发中，若需要使用浮点数，或者出现溢出数字乘除的时候就需要引入定点数来处理。因此在ink!的合约中可以引入Substrate runtime提供的定点数的库来处理。</p>
</li>
<li>
<p>由于<code>pallet-contracts</code>的合约模型与EVM基本相同，因此<code>pallet-contracts</code>的合约存储也是由K/V构成。那么合约模型框架就需要处理标准库里提供的各类集合类型。因此在<strong>ink!中将标准库中可能用到的集合类型重写了一遍</strong>，添加了能将集合元素类型处理成K/V数据的过程。因此在ink!的合约存储中，若设计了集合类型，只能使用ink!标准库中提供的类型。而另一方面由于ink!的返回值需要导出metadata令第三方处理，而当前的metadata的接口实现只给标准库中的集合实现，因此ink!方法的返回值的集合只能使用标准库的集合类型。因此就会出现以下代码：</p>
<div><pre><code>#[ink::contract]
mod test {
    // 引入 ink 实现的 Vec
    use ink_storage::collections::Vec as StorageVec;
    // 引入标准库的Vec
    use ink_prelude::vec::Vec;
    #[ink(storage)]
    pub struct Test {
        owners: StorageVec&lt;AccountId&gt;, // 只能使用 ink的Vec
    }
    impl Test {
        #[ink(message)]
        pub fn get_owners(&amp;self) -&gt; Vec&lt;AccountId&gt; {
            // 将 ink 实现的 Vec 转换为 标准库实现的 Vec
            self.owners.iter().map(Clone::clone).collect()
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
</ol>
<p>因此总结而言，在模型结构上，开发者需要理解到：</p>
<ul>
<li>合约语言框架与合约模型是对应关系，语言框架的特性会与模型一一匹配；</li>
<li>合约语言框架对S语言提供了针对合约模型的业务功能，同时也根据合约业务逻辑的需求对S语言本身有约束。</li>
</ul>
<p>不过由于Solidity本身定位就是服务于写合约而设计出来的语言，因此许多与合约相关的功能能够设计为<strong>关键字</strong>。而若是一门语言本身并不是针对合约设计的，则需要基于这门合约设计对应于合约模型的“合约语言框架”。由于是在这门语言上添加新的功能，因此一般情况下很难与语言本身结合的比较深入。因此最后做到的成果与这门语言提供的能<strong>拓展语法树</strong>的能力相关。语言本身提供了越灵活修改/添加语法树的接口（宏，插件等），那么合约语言框架就可以实现越多的功能。语言本身提供这类可扩展性的功能越少，那么合约语言框架就只能考虑修改编译器，扩展需要的语法以支持合约模型，这样最后的语言就变成了原语言的一种“方言”了。因此前者可以以库/框架的形态存在，而后者则变为了一门新的语言，<strong>这也是我们将这种模型称为“合约语言框架”的原因</strong>。</p>
<h2 id="pallet-contracts-与对应的合约语言框架"> <code>pallet-contracts</code> 与对应的合约语言框架</h2>
<p><img src="./imgs/language_2.jpg" alt="language 2"></p>
<p>在上文解释了合约语言框架的模型后，我们就可以把合约模型框架套在Substrate的Wasm合约系统上了。</p>
<p>那么显然，ink!这整套系统的实现，就是与<code>pallet-contracts</code>的合约模型相对应的。ink! 3.0通过过程宏（2.0通过神声明宏）的系统，将对应于<code>pallet-contracts</code>的功能逻辑引入到了rust当中。因此这套系统里的S语言就是rust，而T语言就是Wasm字节码。ink!在一个辅助工具<code>cargo-contract</code>的帮助下，将使用了ink!框架的rust代码编译成为了合约的Wasm字字节码。而Wasm字节码在链上运行的环境就是wasmi（将来也会引入Wasmtime等JIT形式的执行环境）。</p>
<p>而由于<code>pallet-contracts</code>的执行环境是Wasm字节码，因此能够编译成Wasm字节码的的语言配套上符合<code>pallet-contracts</code>合约模型的合约语言框架，都可以产生能运行于<code>pallet-contracts</code>这个合约平台上的合约。所以对于<code>pallet-contracts</code>而言，完全可以设计不同语言的合约体系给发开发提供多种选择使用不同的语言开发Wasm合约。</p>
<p>当前支持运行于<code>pallet-contracts</code>的合约语言框架除了对于rust的ink!之外，还有以下项目：</p>
<ul>
<li>Ask!, 由 Patract 主导开发，是在AssemblyScript语言上的合约语言框架。(当前正在开发中)</li>
<li>Solang, 由 hyperledger-labs 主导开发，支持将 Solidity 编译到 <code>pallet-contracts</code>的Wasm的工具。</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">合约模型</title>
    <id>https://www.patract.io/contracts/model/</id>
    <link href="https://www.patract.io/contracts/model/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="合约模型"> 合约模型</h1>
<p>在已经具备合约及合约沙盒的概念后，我们就可以开始讨论合约模型的概念了。</p>
<p>合约沙盒只是代表运行合约的环境，而合约是以什么方式运行的，合约和合约是怎么交互的，合约是怎么与链的数据互动的，这些问题就归属于合约模型问题。</p>
<p>换句话说，<strong>合约模型就是合约是以什么模型运行在合约沙盒/虚拟机中的</strong>。</p>
<p><img src="./imgs/model.jpg" alt=""></p>
<p>如图所示，合约模型与合约虚拟机本质上是可以解耦的，其中关系只存在合约虚拟机是否能支持上层所需要的合约模型，例如：</p>
<ul>
<li>Bitcoin 的虚拟机就是比特币脚本的栈执行器，由于执行器设计是非图灵完备的OP_CODE，因此对于上层的合约模型只能支持Bitcoin的脚本。</li>
<li>Ethereum 跟随Bitcoin的灵感，设计了具备图灵完备的OP_CODE，即EVM虚拟机（Ethereum Virtual Machine）。但是EVM的OP_CODE比较简陋，且只有栈的设计，没有堆的概念。但是EVM引入了读写状态的OP_CODE，因此从虚拟机机制上对合约模型可以支持状态模型。因此EVM也被看做一个执行状态转换的状态转换机（如Gavin Wood撰写的以太坊黄皮书中所描述的）。状态模型实际上是比较通用的抽象模型，绝大多数模型都可以用状态模型模拟（如在状态模型中构建UTXO模型），因此从理论上来说，只要继续完善EVM的OP_CODE，EVM的上层同样可以构建出其他合约模型。</li>
<li>libra 认为区块链的核心在于资产的处理，因此提出了Move的虚拟机模型（Move Virtual Machine (MVM)）来从虚拟机上限定合约的模型，可以理解为是一种特化逻辑过的OP_CODE集合。因此MVM的上层只能运行Move模型。</li>
</ul>
<p>通过以上讨论，我们可以认识到合约模型的概念，并且理解到虚拟机对上层合约模型的限制，因此接下来就可以讨论Wasm虚拟机可以运行的合约模型以及<code>pallet-contracts</code>的合约模型构成。</p>
<h2 id="wasm-虚拟机"> Wasm 虚拟机</h2>
<p>Wasm是一种在基于栈的虚拟机上运行的二进制的指令格式。（WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine, from <a href="https://webassembly.org/" target="_blank" rel="noopener noreferrer">https://webassembly.org/</a>）因此Wasm的模型和主流计算机程序的模型结构比较相似。另一方面Wasm被设计成为了一种比较通用的形式，且设计了WASI并支持了运行环境自由定义<code>host function</code>，因此虽然Wasm从浏览器发展而来，但是当前的使用场景已经不限于浏览器，开始在边缘计算，热更新，Serverless平台等发挥效果。</p>
<p>若以指令的完备性来衡量一个虚拟机的能力，则EVM处于半成品的程度，限制多且不够灵活；而JVM，Wasm虚拟机则是比较完备的，限制少，功能性强。另一方面指令设计的合理性一定程度也会影响虚拟机的执行效率，同时虚拟机采用的实现方案也会对执行效率产生比较大的影响。</p>
<p>例如EVM当前只能以解释器（interpreter）的形式运行，并且当前的实现过程体（go, c++等版本）中没有看到针对解释器的优化，执行效率比较底下，而 JVM, Wasm等虚拟机有采用JIT的模式的实现，执行效率相当高甚至逼近本地执行的性能。</p>
<blockquote>
<p>注：<code>pallet-contracts</code>当前只能使用<code>wasmi</code>（解释器）执行Wasm代码，因此合约的执行性能比不上使用<code>wasmtime</code>的Runtime的执行性能。</p>
</blockquote>
<p>而同时，Wasm虚拟机相比于JVM等虚拟机，十分轻便（Lightweight），快速，可定制性强，<strong>且<code>host function</code>的功能给予了Wasm虚拟机与宿主之间交互的通道</strong>，因此和其他虚拟机相比，将Wasm虚拟机作为区块链合约沙盒与链的功能结合在一起比较容易。</p>
<p>另一方面在笔者看来，Wasm是处于底层代码与上层代码之间比较好的一个抽象层，且其复杂性与完备性也远超于EVM，因此比较适合区块链合约领域的需求。</p>
<p>因此Wasm虚拟机提供的沙盒环境在满足合约沙盒的前提下还满足以下2点要求：</p>
<ul>
<li>指令完备，功能性丰富，执行效率高</li>
<li>有适合的接口能与宿主（这里指代运行Wasm的环境，即链）交互，方便宿主提供需要的功能。</li>
</ul>
<h2 id="evm-的合约模型"> EVM 的合约模型</h2>
<p>由于Ethereum是存储状态的区块链，因此EVM的合约模型理所应当的需要基本读写状态的功能。如果把每次合约运行的过程看做一次程序的启动到执行结束的过程，那么状态数据的变化就对应着这个程序需要持久化数据的变化。</p>
<p>因此对于读写状态，以太坊的EVM提供了<code>SLOAD</code>和<code>SSTORE</code>两个指令。</p>
<p>另一方面以太坊描述一个账户使用了“账户模型”，即将合约和调用合约的用户都看做了一个账户，在这个账户下存在<code>balance</code>等概念，因此EVM提供了<code>CALLER</code>，<code>ORIGIN</code>，<code>CALLVALUE</code>等等一系列指令来描述这种模型。</p>
<p>同时由于在EVM的抽象体系中，认为合约与用户是一致的，因此出现了“合约调用合约”的模型，即<code>CALL</code>，<code>DELEGATECALL</code>等指令，由此带来了合约的可组合性，造就了Ethereum繁荣的生态。而在EVM中，一个合约依托于一个EVM进行运行，因此合约调用合约是在一个EVM中启动了另一个EVM并加载指令进行执行。</p>
<p>当然EVM虚拟机设计的初衷就是为了解决比特币脚本的非图灵完备问题，为了解决这个问题并保证停机问题不发生，引入了指令的Gas计费模型</p>
<p>因此总结以上可以得到，EVM的合约模型具备以下特性：</p>
<ol>
<li>处理数据的模型是状态机模型，状态的变更靠外界调用触发（类比于调用了状态变更函数的过程）；</li>
<li>合约模型中需要链相关的特性；</li>
<li>将合约与用户看做一致，允许合约调用合约；</li>
<li>引入指令计费模型。</li>
</ol>
<h2 id="pallet-contracts的合约模型"> <code>pallet-contracts</code>的合约模型</h2>
<p>这里直接下结论：<strong><code>pallet-contracts</code>虽然使用了Wasm虚拟机来执行代码，但是其合约模型基本与EVM合约模型一致</strong>。</p>
<p>也就是说<code>pallet-contracts</code>的合约模型同样具备以下4点特性：</p>
<ol>
<li>处理数据的模型是状态机模型；</li>
<li>合约模型中需要链相关的特性；</li>
<li>将合约与用户看做一致，允许合约调用合约；</li>
<li>引入指令计费模型。</li>
</ol>
<p>并且，在以上4种特性的基础上，增加了“存储租赁模型”：</p>
<ul>
<li><code>Rent</code>存储租赁计费。</li>
</ul>
<p>在上文已经称述了合约执行的环境和合约模型是可以解耦的，EVM由于设计的比较早还没有解耦这个层次的概念，因此在指令中<code>SLOAD</code>，<code>SSTORE</code>及类似和链相关的指令是与EVM其他指令合并一起的。而Wasm本来并非为区块链设计，因此一定不存在这些和链环境相关的指令。</p>
<p>因此Wasm的<code>host function</code>即是用来完成这件事情的。链作为<code>host</code>宿主，只需要把<strong>他认为合约可能会用到的方法</strong>提供给Wasm虚拟机，让他导入这些函数对象，在合约的执行过程中即可以使用。因此通过<code>host function</code>，<code>pallet-contracts</code>合约模块就可以具备1，2，4功能，并将提供3需要的部分功能，同时第5点特性（租赁计费）也可以引入。</p>
<p>并且其中第3点功能的实现方式也与EVM一致，当出现合约调用合约的部分时，通过<code>host function</code>从Wasm回到了<code>pallet-contracts</code>模块，并启动了一个新的Wasm虚拟机去执行被调用的合约。（该部分在以后的文章中会描述）</p>
<p>因此总结而言，<code>pallet-contracts</code>的合约模型具备如下特性：</p>
<ol>
<li>合约模型与EVM的合约模型一致，并在此基础上增加了存储计费模型</li>
<li>与链交互的实现通过Wasm的<code>host function</code>特性实现</li>
</ol>
<h2 id="使用wasm虚拟机实现其他合约模型"> 使用Wasm虚拟机实现其他合约模型</h2>
<p>刚才简要描述了<code>pallet-contracts</code>是如何在Wasm虚拟机上实现合约模型的，由于前文已经解释了虚拟机与合约模型是可以解耦的，因此实际上在Wasm虚拟机上同样可以实现其他的合约模型。</p>
<p>例如我们可以考虑将Move虚拟机也移植到Wasm虚拟机中，其有两种可能的实现方式：</p>
<ol>
<li>
<p>类比于将EVM的实现体在Runtime的Wasm环境运行，可以将MVM的实现体也编译成Wasm的形式（例如命名为<code>pallet-mvm</code>），在Runtime Wasm中运行。</p>
<p>基于这种实现，Move依然可以按正常方式编译，并和Solidity的编译结果运行于<code>pallet-evm</code>一致，将Move的编译结果运行在例如<code>pallet-mvm</code>的平台上。</p>
</li>
<li>
<p>将MVM与所有权，链相关的特性抽象一层，做成和<code>pallet-contracts</code>的形式，并设计将Move语言编译的中间码IR编译到Wasm。</p>
<p>基于这种实现，可以将Move编译成为Wasm，并在Wasm虚拟机中运行。</p>
</li>
</ol>
<h2 id="其他合约模型"> 其他合约模型</h2>
<h3 id="eos的合约模型"> EOS的合约模型</h3>
<p>EOS的合约模型与EVM类似，同时强化了账户模型的概念。因此EOS使用Wasm的方式也是基于Wasm的执行，并通过<code>host function</code>引入与链相关的功能。</p>
<p>EOS和EVM模型的主要区别在于，EOS的合约调用合约的过程是以发交易的形态调用，并且EOS的资源模型是抵押模型。当前普遍认为正是EOS的抵押模型最后导致EOS没有走向成功。</p>
<h3 id="异步合约模型"> 异步合约模型</h3>
<p><code>pallet-actor</code>是 substrate 尝试实现异步合约模型的一个开端，当前没有什么进展。<code>pallet-actor</code>的模型打算使用Wasm虚拟机作为运行环境，并在此基础上添加异步的功能以提升性能。</p>
<p>当前也有其他少数对异步合约模型的研究，但是皆处于比较初步的阶段。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">合约综述</title>
    <id>https://www.patract.io/contracts/overview/</id>
    <link href="https://www.patract.io/contracts/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="合约综述"> 合约综述</h1>
<p>区块链运行合约的模型从本质上可以认为是 “区块链的环境（分布式共识系统）”+“能运行一段逻辑的平台”，例如</p>
<ul>
<li>比特币的模型可以拆成区块模型/PoW + 比特币脚本</li>
<li>以太坊的模型可以拆成区块，状态模型/PoW + EVM</li>
<li>Substrate的模型可以拆成区块，状态模型/Bft共识 + Runtime</li>
</ul>
<p>因此一般来说，我们可以将区块链的模型拆成</p>
<ul>
<li>运行区块链的底层系统：提供分布式可信环境</li>
<li>链的业务逻辑：运行在这个可信环境中</li>
</ul>
<p>而由于区块链系统的特性，要求对<strong>相同的代码，相同的状态，执行的结果一定需要一致</strong>，因此在提供“链的业务逻辑”这一层，为了保证执行结果的一致性，要求整个运行环境必须是“<strong>无副作用的</strong>”，因此不会因为运行节点的不一致（指不是同一个节点）而导致运行的结果不一致。</p>
<p>因此为了保证这种特性，绝大部分区块链都会采用<strong>沙盒/虚拟机的模型</strong>加上裁剪一些功能来做到。</p>
<p>“运行合约的平台”即是一种链的业务逻辑，且这种业务逻辑<strong>特殊在其上面可运行的代码是开放的，合约内容不受链本身控制</strong>。因此对于这种情况，更需要一种“沙盒”的环境来隔离各个合约之间的运行。</p>
<h2 id="什么是沙盒-虚拟机"> 什么是沙盒（虚拟机）</h2>
<p>“沙盒”在计算机领域中的概念很广泛，而在区块链中，一般而言沙盒都会由一个虚拟机去运行（因为使用虚拟机最容易模拟沙盒的环境）。</p>
<p>因此不同的链就会采用不同的虚拟机来运行合约的沙盒：</p>
<ul>
<li>
<p>Ethereum：</p>
<p>Gavin Wood 写的黄皮书提出了EVM的模型，创建了EVM虚拟机的概念并拟定了EVM的OP_CODE。之后设计了Solidity编译到OP_CODE，才有了Ethereum的整个生态。相当于Ethereum处理区块链的合约沙盒模型，从零到一构建所有设施。因此Solidity的语法以及EVM能做的事对比现在的区块链显得<strong>十分简陋</strong>（例如solidity的语法，EVM的栈深限制等等），但其作为<strong>先行者开创了区块链合约虚拟机模型先河</strong>。</p>
</li>
<li>
<p>Fabric:</p>
<p>作为联盟链，在使用场景上与公有链存在区别。因此Fabric提出链码的概念，并将链码运行在了docker中。docker就是比较重的一种虚拟机（相对于EVM而言），因此与EVM比较，Fabric的链码可以做到比Solidity更多的事，当然相对的，其运行的代价与EVM相比就高得多。</p>
</li>
<li>
<p>EOS：</p>
<p>EOS采用了Wasm作为合约的虚拟机，也是当时EOS的卖点。相比于运行Solidity的EVM，EOS的Wasm虚拟机的运行效率高了许多，以C++作为编译到Wasm的语言也天然拉近了许多传统的开发者。EOS作为Wasm虚拟机的先行者，在当时已经体现出Wasm相对于EVM的优势，但是由于其合约模型的设计（见下一章节）的缺陷以及当时环境的约束，再加上EOS并非真正的去中心化系统，导致EOS并没有很好的发挥出Wasm合约系统的能力。</p>
</li>
<li>
<p>Substrate 的<code>pallet-contracts</code>：</p>
<p><code>pallet-contracts</code>采用了Wasm虚拟机来运行合约，当前出于安全考量只采用了<code>Wasmi</code>解释器来执行Wasm。但其合约模型与EVM的合约模型近似（见下一章节）。Wasm虚拟机与EVM同样具有启动快，随用随丢的特性，具备高性能和高扩展性的同时又不像docker， JVM一样太过庞大。因此Wasm慢慢在除了浏览器环境以外的更多场景被采用，例如边缘计算，热更新等等。所以当前越来越多的新区块链在需要一个沙盒环境时会将Wasm虚拟机作为主要方案。另一方面Wasm也具备从不同语言编译到Wasm的特性，例如<code>rust</code>，<code>assemblyscript</code>，<code>c++</code>等等，可以吸引到各类开发者加入到合约开发过程中。</p>
</li>
<li>
<p>其他：</p>
<p>其他区块链为了完成这个“沙盒”的目标也会有各自的方案，有的联盟链采用了裁剪过的JVM，有的公链采用了<code>RISC-V</code>的虚拟机，有的链采用了从零设计一个虚拟机（如libra）。这些方案各自有各自的需求与特性，但从模型上而言，无论什么方案，最终目标都是为了提供一个虚拟机环境以运行合约沙盒。</p>
</li>
</ul>
<h2 id="运行合约的沙盒"> 运行合约的沙盒</h2>
<p>上文已描述链的业务逻辑大部分会运行于沙盒的系统中，且“运行合约”这种业务逻辑更是需要沙盒隔离。而另一方面Substrate的runtime就是一个沙盒环境（运行于Wasm中），因此在Substrate的合约模块（<code>pallet-emv</code>，<code>pallet-contracts</code>），就是需要在一个沙盒环境中运行另一个沙盒，如下图所示：</p>
<p><img src="./imgs/overview_module.jpg" alt="overview"></p>
<p>其中：</p>
<ul>
<li>左边是以太坊模型，表示每运行一个合约，需要在链的平台上启动一个EVM虚拟机去运行</li>
<li>右边是Substrate模型，我们当前已知Substrate的链的业务逻辑是运行在Wasm虚拟机当中的：
<ul>
<li><code>pallet-EVM</code>：将以太坊的EVM编译到了Runtime Wasm当中，因此每运行一个合约实际上与以太坊一致，创建了一个EVM虚拟机去运行。如果链是以Wasm形态运行，即是在Wasm虚拟机中生成了一个EVM虚拟机去运行。</li>
<li><code>pallet-contracts</code>：Wasm合约使用Wasm虚拟机运行合约，与<code>pallet-evm</code>不同的地方是，如果链是以Wasm形态运行，Wasm合约的虚拟机是跳出当前Runtime Wasm虚拟机重新创建了一个新的Wasm虚拟机运行。
<ul>
<li>当前（在substrate的提交之前 <a href="https://github.com/paritytech/substrate/commit/0b0d124d5f9be89f614f2be8e9da038fcb9f540e" target="_blank" rel="noopener noreferrer"><code>0b0d124d</code></a>）Runtime的Wasm虚拟机推荐采用的是<code>Wasmtime</code>而<code>pallet-contracts</code>合约<strong>只能</strong>采用<code>Wasmi</code>。</li>
<li><code>pallet-contracts</code>也可以使用<code>Wasmtime</code>执行，但是当前parity认为<code>Wasmtime</code>不可控性比较大，因此暂时还未采用<code>Wasmtime</code>。当前他们有相关计划，也有原型代码来使用<code>Wasmtime</code>运行<code>pallet-contracts</code>的合约。（注1）</li>
</ul>
</li>
</ul>
</li>
<li>总之运行合约的过程中，大部分链都采用了一种沙盒的模型去运行合约。而对于EVM，<code>pallet-contracts</code>模型而言，是<strong>每运行一个合约就会创建一个虚拟机</strong>。</li>
</ul>
<h2 id="注解"> 注解</h2>
<ol>
<li><code>Wasmtime</code>是实现了JIT的Wasm虚拟机，而<code>Wasmi</code>是纯解释器型的Wasm虚拟机。</li>
<li><code>Wasmtime</code>的执行效率比<code>Wasmi</code>高很多。</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Wasm简要介绍</title>
    <id>https://www.patract.io/contracts/wasm_first_step/</id>
    <link href="https://www.patract.io/contracts/wasm_first_step/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="wasm简要介绍"> Wasm简要介绍</h1>
<h2 id="wasm与合约模型的关联"> Wasm与合约模型的关联</h2>
<p><img src="./imgs/wasm.jpg" alt=""></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">API 接入</title>
    <id>https://www.patract.io/elara/API/</id>
    <link href="https://www.patract.io/elara/API/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="api-接入"> API 接入</h1>
<h2 id="endpoint-规则"> ENDPOINT 规则</h2>
<p><code>Https</code>接入</p>
<div><pre><code>https://api.elara.patract.io/&lt;Network&gt;/&lt;YOUR-PROJECT-ID&gt;
</code></pre>
<div><span>1</span><br></div></div><p><code>Websocket</code>接入</p>
<div><pre><code>wss://api.elara.patract.io/&lt;Network&gt;/&lt;YOUR-PROJECT-ID&gt;
</code></pre>
<div><span>1</span><br></div></div><h2 id="支持网络"> 支持网络</h2>
<table>
<thead>
<tr>
<th><strong>NETWORK</strong></th>
<th><strong>DESCRIPTION</strong></th>
<th>ENDPOINT</th>
</tr>
</thead>
<tbody>
<tr>
<td>Polkadot</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Polkadot/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Polkadot</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Polkadot/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Kusama</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Kusama/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Kusama</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Kusama/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Rococo</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Rococo/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Rococo</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Rococo/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Jupiter</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Jupiter/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Jupiter</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Jupiter/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Darwinia</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Darwinia/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Darwinia</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Darwinia/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Dock</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Dock/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Dock</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Dock/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Edgeware</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Edgeware/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Edgeware</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Edgeware/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Kulupu</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Kulupu/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Kulupu</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Kulupu/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Nodle</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Nodle/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Nodle</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Nodle/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Plasm</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Plasm/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Plasm</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Plasm/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Stafi</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Stafi/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Stafi</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Stafi/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Chainx</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Chainx/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Chainx</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Chainx/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Mandala</td>
<td>JSON-RPC over HTTPS</td>
<td>https://api.elara.patract.io/Mandala/YOUR-PROJECT-ID</td>
</tr>
<tr>
<td>Mandala</td>
<td>JSON-RPC over WebSocket</td>
<td>wss://api.elara.patract.io/Mandala/YOUR-PROJECT-ID</td>
</tr>
</tbody>
</table>
<h2 id="错误代码"> 错误代码</h2>
<p>如果Substrate RPC方法遇到错误，则响应对象中包含的错误成员务必是包含代码成员和描述性消息成员的对象。 以下列表包含所有可能的错误代码和关联的消息：</p>
<table>
<thead>
<tr>
<th><strong>CODE</strong></th>
<th><strong><strong>MEANING</strong></strong></th>
<th><strong>CATEGORY</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>-32700</td>
<td>Parse error</td>
<td>Invalid JSON</td>
</tr>
<tr>
<td>-32600</td>
<td>Invalid request</td>
<td>JSON is not a valid request object</td>
</tr>
<tr>
<td>-32601</td>
<td>Method not found</td>
<td>Method does not exist</td>
</tr>
<tr>
<td>-32602</td>
<td>Invalid params</td>
<td>Invalid method parameters</td>
</tr>
<tr>
<td>-32603</td>
<td>Internal error</td>
<td>Internal JSON-RPC error</td>
</tr>
<tr>
<td>-1</td>
<td>CheckAuthenticated Fail</td>
<td>non-standard</td>
</tr>
<tr>
<td>-2</td>
<td>Project Name Empty</td>
<td>non-standard</td>
</tr>
<tr>
<td>-3</td>
<td>Project Name Error!</td>
<td>non-standard</td>
</tr>
<tr>
<td>-4</td>
<td>Chain Error</td>
<td>non-standard</td>
</tr>
<tr>
<td>-5</td>
<td>Out Of Limit</td>
<td>non-standard</td>
</tr>
<tr>
<td>-6</td>
<td>NotActive</td>
<td>non-standard</td>
</tr>
<tr>
<td>-7</td>
<td>RPC Error</td>
<td>non-standard</td>
</tr>
<tr>
<td>-8</td>
<td>Project  Error</td>
<td>non-standard</td>
</tr>
<tr>
<td>-9</td>
<td>No Access Allowed</td>
<td>non-standard</td>
</tr>
<tr>
<td>-10</td>
<td>Black Uid</td>
<td>non-standard</td>
</tr>
<tr>
<td>-11</td>
<td>Duplicate Name</td>
<td>non-standard</td>
</tr>
</tbody>
</table>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">设计简述</title>
    <id>https://www.patract.io/elara/design/</id>
    <link href="https://www.patract.io/elara/design/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="设计简述"> 设计简述</h1>
<p>Elara有长期的开发迭代规划和运维目标，为的是能够支撑Polkadot生态开发者从万+级别到亿+级别的持续跃迁。Elara的核心是一套高性能、高可用和高扩展的分布式架构。与其他提供 Node API Service的项目有显著区别：</p>
<ol>
<li>
<p>Elara的后端架构不是简单但低效的NodePool+LoadBalancer。这种方案无法承担大规模应用和流量的冲击，无法及时扩展，因为Node会成为体系中的显著瓶颈。而在Elara的架构中，只需要很少数量的Node提供基础数据源。Elara通过分布式架构的设计、多服务的融合以及对请求访问路径的极致优化，来支撑海量用户的访问。NodePool方案的短期开发成本较低，但长期服务用户的单位成本却极高。反过来，Elara在初期的技术成本投入较高，但长期可以极大降低服务用户的单位成本，同时还可以保障高服务质量。</p>
</li>
<li>
<p>Elara专注于为生态开发者提供极简的全功能体验。我们提供的是极其“薄薄”的一层服务，希望开发者感受不到Elara的存在。Elara提供的API服务不仅包括节点的所有功能，也包括了历史状态数据功能，还包括项目的请求统计仪表盘等功能，给开发者提供的服务能力远大于自己部署节点所提供的能力。所以，在这个目标之下，&quot;一键节点部署&quot;之类的功能就显得非常多余，开发者只应该专注于自己的业务应用。</p>
</li>
<li>
<p>Elara是一个开放的平台，秉持社区共建的原则。在接下来的版本迭代中，我们会陆续接入更多主网，还会建立一套Polkadot生态主链和平行链自动化接入的流程规范。</p>
</li>
</ol>
<p>在整体设计上，Elara设计成微服务的架构体系，由多个可独立进行扩展的微服务组成。所有的微服务启动后都以独立进程运行，所以在将来可以对单独的微服务进行平行扩容、重构、替换实现等升级。其中用到<code>Redis</code>作为数据高速访问的存储容器,和使用<code>kafka</code>做架构解耦。将来可以很容易地在此设计的基础上，添加更多复杂的功能模块，让Elara发挥更强大的效果。</p>
<p>Elara的核心架构大概如下所示</p>
<p><img src="https://user-images.githubusercontent.com/21072025/111115173-35923280-859f-11eb-8172-737c07aab4e7.png" alt="elara"></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Elara</title>
    <id>https://www.patract.io/elara/introduction/</id>
    <link href="https://www.patract.io/elara/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="elara"> Elara</h1>
<p>在Polkadot、Kusama或Parachain中，RPC是Dapp与网络交互的界面。随着Polkadot网络的不断扩展，会有越来越多的平行链上线，也会有越来越多的平行链支持智能合约功能。面对越来越多的平行链，开发者们为了与之交互需要搭建并维护多条链的节点RPC，这对于他们而言将是巨大的开发成本。</p>
<p>无论是面对开发者的开发测试需要，还是用户线上对Dapp的使用需求，方便便捷、快速稳定的网络接入能力都是必备条件之一。因此，为开发者们和普通用户提供统一简化的网络接入服务能力是服务Dapp开发者的必要支撑，也是Polkadot生态的基础设施。</p>
<p>Elara的目标是构建一个类似Infura 的基础架构和网络公共接入服务,为开发者提供多链接入的统一接入层。 我们将创建一个普适的架构，可以很方便接入Polkadot、Kusama、各个平行链和各个substrate链，即专注于为Polkadot、Kusama服务，也保持扩展性，普惠整个Substrate生态。</p>
<p>另外，Elara将作为智能合约开发生态服务的一部分，在未来将与Patract Suite的其他组件进行整合，在合约开发环境支持、开发工具组件、合约部署和应用发布等方面进行全方位整合，简化应用基础架构，让开发者可以专注于构建上层应用。</p>
<p>当前，我们已经提供在线服务elara.patract.io ．欢迎社区使用Elara:</p>
<ul>
<li>所有人都可以使用Elara提供的Polkadot和多个生态主网的公共共享RPC服务( 如wss://polkadot.elara.patract.io 和 https://polkadot.elara.patract.io ).</li>
<li>开发者可以访问elara.patract.io获得免费接入多个网络的独占在线服务.</li>
</ul>
<p>更多信息:</p>
<p>Github:  <a href="https://github.com/patractlabs/elara" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/elara</a></p>
<p>Homepage:  <a href="https://elara.patract.io" target="_blank" rel="noopener noreferrer">https://elara.patract.io</a></p>
<p>Docs:<a href="https://docs.elara.patract.io/" target="_blank" rel="noopener noreferrer">https://docs.elara.patract.io/</a></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Tutorial</title>
    <id>https://www.patract.io/elara/tutorial/</id>
    <link href="https://www.patract.io/elara/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> Tutorial</h1>
<p>Elara的API需要有效的Project Endpoint包含在您的请求中。此标识符应附加到请求URL。</p>
<h2 id="获取your-project-endpoint"> 获取YOUR-PROJECT-ENDPOINT</h2>
<p>1.使用您的github帐户登录<a href="https://elara.patract.io/" target="_blank" rel="noopener noreferrer">Elara官方网站</a></p>
<p>2.进入<a href="https://elara.patract.io/#/dashboard/console" target="_blank" rel="noopener noreferrer">Elara Dashboard</a>，单击以选中左侧边栏中的主链。</p>
<p>3.单击右上角的“创建新项目”按钮，在弹出对话框中输入“ PROJECT-NAME”，然后单击“确定”。如果一切正常，您将看到一条消息，说明该项目已成功创建。</p>
<p>4.在项目列表中，单击项目以进入项目详细信息页面
-有一列信息显示“ PID”，一串长度为32的字符和数字，即项目的“ YOUR-PROJECT-ID”
-有一列显示“ ENDPOINTS”的信息，包括访问ENDPOINT的“ https”和“ wss”。那就是项目的“ YOUR-PROJECT-ENDPOINT”</p>
<h2 id="发出请求"> 发出请求</h2>
<p>使用这些ENDPOINT之一作为您的客户端程序的Provider。</p>
<p>*注意：请务必将YOUR-PROJECT-ENDPOINT替换为Elara仪表板中的Project Endpoint *</p>
<ul>
<li>方法1：curl发送HTTP请求：</li>
</ul>
<div><pre><code>#curl http
curl --location --request POST &#39;https://YOUR-PROJECT-ENDPOINT&#39; \
    --header &#39;Content-Type: application/json&#39; \
    --data-raw &#39;{
        &quot;id&quot;:1,
        &quot;jsonrpc&quot;:&quot;2.0&quot;,
        &quot;method&quot;:&quot;chain_getBlock&quot;,
        &quot;params&quot;:[]
    }&#39;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>方法2：使用wscat发送websocket请求：</li>
</ul>
<div><pre><code>parachain@ubuntu:~/elara$ wscat  -c wss://YOUR-PROJECT-ENDPOINT
Connected (press CTRL+C to quit)
&gt; {&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;chain_getBlock&quot;,&quot;params&quot;:[]}
&lt; {&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:{&quot;block&quot;:{&quot;extrinsics&quot;:[&quot;0x280402000b901ac96e7601&quot;],&quot;header&quot;:{&quot;digest&quot;:{&quot;logs&quot;:[&quot;0x066175726120dfcdf90f00000000&quot;,&quot;0x05617572610101acb2a4725f0f8945593cea6aa6ef70df2a8fd4a2c4eb1c0d1bf51828f26e371f897473113541f9c0d9f94e51471a3d685a86866a12133ea012d2777bb9709589&quot;]},&quot;extrinsicsRoot&quot;:&quot;0xcca5112546305b07d904c2aa26155dffe6c66de043708e1ac89e57609fbcc6d1&quot;,&quot;number&quot;:&quot;0x17922&quot;,&quot;parentHash&quot;:&quot;0xdb798a19707ef9085b97d0b00854c613ae4abdb560e2ea1164f2e7bbfbc288a1&quot;,&quot;stateRoot&quot;:&quot;0xdc575fe975067ded933020df9035db0e496143e6b9a062a4313fd1f6e9d02922&quot;}},&quot;justification&quot;:null},&quot;id&quot;:1}
&gt; 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>方法3：使用SDK</li>
</ul>
<p>您可以参考polkadot-js，使用以下类似代码通过Https或Websocket访问节点：</p>
<div><pre><code>const { ApiPromise, WsProvider } = require(&#39;@polkadot/api&#39;);
const { HttpProvider } = require(&#39;@polkadot/rpc-provider&#39;);

(async function () {
// Http
const httpProvider = new HttpProvider(&#39;https://YOUR-PROJECT-ENDPOINT&#39;)
const hash = await httpProvider.send(&#39;chain_getBlockHash&#39;, [])
console.log(&#39;latest block Hash&#39;, hash)

// Websocket
const wsProvider = new WsProvider(&#39;wss://YOUR-PROJECT-ENDPOINT&#39;)
const api = await ApiPromise.create({ provider: wsProvider })
//Do something

})()
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>请务必注意，JSON-RPC请求与传输无关，可以通过HTTPS，Websockets发出相同的请求。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Summary</title>
    <id>https://www.patract.io/en/</id>
    <link href="https://www.patract.io/en/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="summary"> Summary</h1>
<ul>
<li><a href="./introduction.html">Introduction</a>
<ul>
<li><a href="./contracts/overview.html">Contracts Overview</a></li>
<li><a href="./contracts/model.html">Contracts Model</a></li>
<li><a href="./contracts/language.html">Contracts Language (Framework)</a></li>
<li><a href="./contracts/wasm_first_step.html">Brief introduction of Wasm</a></li>
</ul>
</li>
<li><a href="./pallet-contracts/introduction.html">pallet-contracts module</a></li>
<li><a href="./ink/introduction.html">ink!</a>
<ul>
<li><a href="./ink/tutorial.html">ink! tutorial</a></li>
<li><a href="./ink/framework.html">ink! framework</a></li>
<li><a href="./ink/edsl-basic.html">ink! eDSL basic element</a></li>
<li><a href="./ink/call-contracts.html">ink! contract call</a></li>
<li><a href="./ink/ink-solidity.html">ink! compile with solidity</a></li>
<li><a href="./ink/cargo-contract.html">cargo-contract</a></li>
<li><a href="./ink/trap.html">ink! suck</a></li>
</ul>
</li>
<li><a href="./ask/introduction.html">Ask!</a>
<ul>
<li><a href="./ask/tutorial.html">tutorial</a></li>
<li><a href="./ask/design.html">design</a></li>
<li><a href="./ask/basics.html">basic</a></li>
<li><a href="./ask/example.html">example</a></li>
</ul>
</li>
<li><a href="./solang/introduction.html">Solang</a></li>
<li><a href="./redspot/introduction.html">Redspot</a>
<ul>
<li><a href="./redspot/tutorial.html">tutorial</a></li>
<li><a href="./redspot/overview.html">Overview</a></li>
<li><a href="./redspot/configuration.html">configuration</a></li>
<li><a href="./redspot/runtime-environment.html">Runtime Environment</a></li>
<li><a href="./redspot/console.html">console</a></li>
<li><a href="./redspot/q-and-a.html">Q &amp; A</a></li>
<li><a href="./redspot/plugin.html">plugin</a>
<ul>
<li><a href="./redspot/plugin/redspot-chai.html">@redspot/chai</a></li>
<li><a href="./redspot/plugin/redspot-gas-reporter.html">@redspot/gas-reporter</a></li>
<li><a href="./redspot/plugin/redspot-patract.html">@redspot/patract</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="./europa/introduction.html">Europa</a>
<ul>
<li><a href="./europa/tutorial.html">tutorial</a></li>
<li><a href="./europa/execution_info.html">explain for execution log</a></li>
<li><a href="./europa/sample.html">example for debug</a></li>
<li><a href="./europa/wasm_executor.html">Wasm executor</a></li>
<li><a href="./europa/wasm_backtrace.html">Wasm Backtrace</a></li>
</ul>
</li>
<li><a href="./zkmega/introduction.html">zkMega</a>
<ul>
<li><a href="./zkmega/tutorial.html">tutorial</a></li>
<li><a href="./zkmega/contract.html">ZKP contract</a></li>
<li><a href="./zkmega/example.html">example</a></li>
<li><a href="./zkmega/benchmark.html">benchmark</a></li>
</ul>
</li>
<li><a href="./himalia/introduction.html">Himalia</a>
<ul>
<li><a href="./himalia/tutorial.html">tutorial</a></li>
<li><a href="./himalia/go-patract.html">go-patract</a></li>
<li><a href="./himalia/py-patract.html">py-patract</a></li>
</ul>
</li>
<li><a href="./metis/introduction.html">Metis</a>
<ul>
<li><a href="./metis/tokens.html">Tokens</a></li>
<li><a href="./metis/access-control.html">Access Control</a></li>
</ul>
</li>
<li><a href="./carpo/introduction.html">Carpo</a></li>
<li><a href="./patract/introduction.html">Patract</a></li>
<li><a href="./elara/introduction.html">Elara</a>
<ul>
<li><a href="./elara/tutorial.html">tutorial</a></li>
<li><a href="./elara/design.html">design</a></li>
<li><a href="./elara/API.html">API</a></li>
</ul>
</li>
<li><a href="./patra-store/introduction.html">PatraStore</a>
<ul>
<li><a href="./patra-store/overview.html">Overview</a></li>
<li><a href="./patra-store/getting-starter.html">Getting Starter</a></li>
<li><a href="./patra-store/publish-dapps.html">Publish DApp</a></li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">基础</title>
    <id>https://www.patract.io/en/ask/basics/</id>
    <link href="https://www.patract.io/en/ask/basics/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="基础"> 基础</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Design</title>
    <id>https://www.patract.io/en/ask/design/</id>
    <link href="https://www.patract.io/en/ask/design/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="design"> Design</h1>
<h2 id="ask-design-overview"> Ask! Design Overview</h2>
<p>AssemblyScript uses the asc compiler to compile TypeScript (TS) files into WebAssembly bytecode. However, asc is a general-purpose compilation tool, and the smart contract structure cannot be used to directly compile TS files into WASM bytecode and metadata information. Therefore, in order for asc to recognize and parse the contract-related annotations and specific grammar provided by Ask!, asc needs to be modified.</p>
<h2 id="design-2"> Design</h2>
<p>ask! will provide two components, <code>Contract Framework</code> (referred to as <code>Framework</code> in the following description) and <code>Contract PreProcessor</code> (referred to as <code>PreProcessor</code> in the following description). In addition, we will also provide a support tool called ask-cli (similar to ink!'s <code>cargo-contract</code>) to help build and manage Ask! Wasm smart contract written.</p>
<p>The functions of Ask! are implemented as follows:</p>
<ul>
<li>
<p>The main function of <code>Framework</code> is to provide advanced packaging for on-chain APIs, and then provide specifications for writing contracts through annotation types. It needs to complete the following tasks:</p>
<ul>
<li>Define the annotation-based contract writing specification</li>
<li>Define the description specification of the contract interface in the metadata</li>
<li>Encapsulate the detailed information of the data interaction between the contract and the chain, such as the definition of the key generation rules in the contract storage and the storage read and write</li>
<li>Encapsulate functional components on the chain, such as Balance, AccountId, Block, Crypto, etc.</li>
<li>Compile the AS contract into Wasm code according to the semantics of the contract, and include the link symbol of the interactive interface with the FRAME contract.</li>
</ul>
</li>
<li>
<p>The main function of <code>PreProcessor</code> is to parse the annotations defined in the framework and generate corresponding logic codes for these annotations. According to the contract interface specification in the framework, a metadata file is generated. This part needs to complete the following tasks:</p>
<ul>
<li>Parse the annotations in the contract and generate the corresponding logic code</li>
<li>Analyze contract interfaces and parameters, and generate metadata files</li>
<li>Parse the custom contract grammar (syntactic sugar) and generate the corresponding logic code</li>
<li>Automatically store and load data</li>
</ul>
</li>
<li>
<p>The main function of <code>ask-cli</code> is to manage the Ask! project in cli, which includes the following functions:</p>
<ul>
<li>Create ask! contract template.</li>
<li>Simplify ask! During the project compilation process, the detailed information of the preprocessing and compilation process is hidden.</li>
<li>Manage the version dependency of <code>Framework</code>, <code>PreProcessor</code> and Compiler.</li>
<li>Check the legality of the generated Wasm code.</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">example</title>
    <id>https://www.patract.io/en/ask/example/</id>
    <link href="https://www.patract.io/en/ask/example/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="example"> example</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Ask!</title>
    <id>https://www.patract.io/en/ask/introduction/</id>
    <link href="https://www.patract.io/en/ask/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ask"> Ask!</h1>
<p><img src="https://camo.githubusercontent.com/207ae88065c356df521ad4c6cff4a68ef91ae963a9c65893dd0d9d991a4e00a8/68747470733a2f2f706174726163742e6e6574776f726b2f696d616765732f706174726163742d61736b2e706e67" alt=""></p>
<p>Ask! is a Wasm contract language framework designed by Patract, built on AssemblyScript and able to run on the <code>pallet-contracts</code> module.</p>
<p>Although AssemblyScript is only a subset of typescript, there are many developers who use typescript as a development language, so the cost of learning AssemblyScript for these developers is very low. Therefore, Patract believes that the Ask! project has good application development prospects. Compared with the Rust-based ink!, Patract believes that the typescript-based Ask! can effectively lower the threshold for contract developers and enrich the contract development ecosystem.</p>
<p>Ask! uses and ink! takes a similar approach to macro design eDSL. By providing annotations in AssemblyScript (hereinafter referred to as AS), it provides functions that can be applied to the <code>pallet-contracts</code> contract model based on the syntax of AS. Through the implementation of annotations, the details related to the contract are hidden as much as possible. On the other hand, the realization of Ask! will be close to ink!, and <strong>the final realization will ensure compatibility with the ink! contract to the greatest extent</strong>.</p>
<blockquote>
<p>for example：
ink! describes the external call interface of the contract using <code>#[ink(constructor)]</code>, <code>#[ink(message)]</code> to modify the method of the contract structure.</p>
<p>In Ask!, annotations such as <code>@constructor</code> and <code>@action</code> will be used to modify contract class methods to achieve similar functions.</p>
</blockquote>
<h2 id="ask-development-progress"> Ask! Development progress</h2>
<p>**Ask! is currently under development, and currently only the v0.1 version of the Kusama financial proposal has been completed. Many current designs may undergo incompatibility changes in the future. **</p>
<p>TODO： 添加议案链接及报告链接。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/en/ask/tutorial/</id>
    <link href="https://www.patract.io/en/ask/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<blockquote>
<p>At present, Ask! has only carried out the development of the first phase of the Kusama Treasury bill. Therefore, it has not been released to public repositories such as npm.</p>
</blockquote>
<h2 id="simple-start"> Simple start：</h2>
<ol>
<li>
<p>clone project</p>
<div><pre><code>$ <span>git</span> clone https://github.com/patractlabs/ask
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>example contract</p>
<p>Some case contracts, such as <code>flipper</code>, <code>incrementer</code>, etc., are prepared in the Ask! project, under the <code>/example</code> directory. Developers can directly refer to these projects, or they can perform the following process by creating a new typescript file (*.ts). The final code of the following example process is located in the <code>/example/solar</code> directory.</p>
<ol>
<li>
<p>create file <code>solar.ts</code></p>
</li>
<li>
<p>define contract storage</p>
<p>Ask! uses the annotation <code>@storage</code> to define the storage of a contract. This process is similar to the <code>#[ink(storage)]</code> macro in ink!. For example, in this case, we define the following three contract storage variables:</p>
<div><pre><code>@storage
<span>class</span> <span>Planets</span> <span>{</span>
    name<span>:</span> <span>string</span><span>;</span>
    radius<span>:</span> u32<span>;</span>
    isdwarf<span>:</span> <span>boolean</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>Define the scope of the contract and callable methods:</p>
<p>Ask! uses the <code>@contract</code> annotation to specify a class as the contract class. This process is similar to the <code>#[ink::contract]</code> macro in ink!.</p>
<div><pre><code>@contract
<span>class</span> <span>SolarSystem</span> <span>{</span>
    <span>// ...</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>Ask! provides <code>@constructor</code> and <code>@message</code> annotations to modify the methods in the contract class, similar to <code>#[ink(constructor)]</code> and <code>#[ink(message)]</code> in ink!.</p>
<div><pre><code>@contract
<span>class</span> <span>SolarSystem</span> <span>{</span>
    @<span>constructor</span>
    <span>default</span><span>(</span>name<span>:</span> <span>string</span><span>)</span> <span>void</span> <span>{</span> <span>/*...*/</span> <span>}</span>

    @<span>message</span><span>(</span>mutates <span>=</span> <span>false</span><span>,</span> selector <span>=</span> <span>"0x0a0b0c0d"</span><span>)</span>
    <span>getRadius</span><span>(</span><span>)</span><span>:</span> u32 <span>{</span> <span>/*...*/</span> <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div></li>
<li>
<p>Compile the Ask! contract</p>
<ol>
<li>
<p>Installation dependent environment:</p>
<p>Enter the root directory of the Ask! project and execute the command:</p>
<div><pre><code>$ <span>npm</span> <span>install</span>
</code></pre>
<div><span>1</span><br></div></div></li>
<li>
<p>Compile</p>
<p>Compile the contract in the <strong>root directory</strong> of the Ask! project. Assuming that the path of the current contract is located in <code>examples/solar/solar.ts</code> (developers can replace with the path of their own contract files), then the compilation command is:</p>
<div><pre><code>./assembly/codegen/bin/ask examples/solar/solar.ts
</code></pre>
<div><span>1</span><br></div></div><p>After executing this command, an extension file <code>extension.ts</code> will be generated in the contract file directory, and the compiled product of the contract is located in the <code>target</code> directory under the contract file directory.</p>
</li>
<li>
<p>Test</p>
<p>Developers can use the contract execution environment sandbox <a href="./../europa/introduction.html">Europa</a> provided by Patract to deploy and test contracts.</p>
<p>After starting Europa, developers can deploy and call contracts in the <code>target</code> directory through <a href="https://polkadot.js.org/apps" target="_blank" rel="noopener noreferrer">https://polkadot.js.org/apps</a>. This process is similar to Ink! The operation process of the contract is the same.</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Carpo</title>
    <id>https://www.patract.io/en/carpo/introduction/</id>
    <link href="https://www.patract.io/en/carpo/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="carpo"> Carpo</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Contract language (framework)</title>
    <id>https://www.patract.io/en/contracts/language/</id>
    <link href="https://www.patract.io/en/contracts/language/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="contract-language-framework"> Contract language (framework)</h1>
<p>Corresponding to the concept of &quot;contract model&quot; (operating platform), we can derive the concept of contract language (framework) (writing code that can run on the platform).</p>
<p>Instead of simply using &quot;contract language&quot;, we use words like &quot;contract language (framework)&quot; because we have separated the &quot;contract sandbox&quot; and &quot;contract model&quot; in the previous chapter. Structure level, so in fact, some new contract platforms did not &quot;invent&quot; a new Solidity contract language like EVM, but chose some languages ​​(such as Rust, C++, AssemblyScript, etc.) based on this language. &quot;hack syntax analysis&quot;, &quot;macro&quot;, and other dimensions add contract-related constraints and functional logic to existing languages. Therefore, in many cases, it will exist in the form of &quot;frame&quot;, &quot;library&quot;, etc. (such as Frame Contract Pallet's rust contract language framework ink!). And this &quot;framework/library&quot; is not the dimension of libraries used in usual program development. Some contract language frameworks need to be modified to the compiler dimension, so we prefer to call them &quot;language frameworks&quot;.</p>
<h2 id="correspondence-between-contract-language-framework-and-contract-model"> Correspondence between contract language (framework) and contract model</h2>
<p><img src="./imgs/language_1.jpg" alt="language 1"></p>
<p>As shown in the figure above, the upper part is the relationship between EVM and Solidity. Since EVM/Solidity was proposed earlier, its model is consistent with the usual model relationship between computer virtual machines and languages. The lower part is the correspondence between the language framework part after separating the contract model.</p>
<p>Here we will focus on the second half. The readers of the first half can analyze according to their own experience in Ethereum contract development compared with the introduction in the following text.</p>
<p>In the system of compiled language, first simply define the following nouns (not rigorously speaking, defined only for the following introduction):</p>
<ul>
<li>S language: the original language (source) for programmers to write code, for example, to compile C++ into assembly, then C++ is the original language S</li>
<li>T language: The language (target) produced after S language is compiled by a compiler, for example, if C++ is compiled into assembly, then assembly is the target language T</li>
</ul>
<p>The previous article has introduced that the environment for running the contract system can be logically split into a &quot;contract model&quot; and a &quot;contract virtual machine&quot;. The former manages the business logic of the contract, and the latter manages how to run the code of the contract, so the corresponding contract language The part can also be disassembled into &quot;contract language framework&quot; and &quot;S language compiled into contract virtual machine&quot;.</p>
<p>According to this definition, it is clear that Solidity is a product that has the characteristics of both &quot;contract language framework&quot; and &quot;S language&quot;:</p>
<ol>
<li>
<p>Solidity has a Turing complete language system, so Solidity is a &quot;language&quot; (relative to the BTC script)</p>
</li>
<li>
<p>The grammar of Solidity has many keywords with contract characteristics, corresponding to the concept of &quot;contract language framework&quot;, such as:</p>
<ul>
<li><code>mapping</code>: A typical case of contract storage</li>
<li><code>msg.sender</code>, <code>msg.value</code>: variables related to contract calls</li>
<li><code>view</code>, <code>pure</code> and other modifiers</li>
<li><code>call</code>, <code>delegate_call</code> and other keywords related to contract calls</li>
</ul>
<p>These concepts do not exist to support the logic of the Solidity language, but to serve the business logic of the Ethereum contract virtual machine.</p>
</li>
</ol>
<p>The purpose of the &quot;contract language framework&quot; is to correspond to the business logic of the contract model. What kind of contract model requires what kind of contract language framework. For example, the bottom layer of EVM is k/v type storage, so the <code>mapping</code> designed in Solidity cannot be traversed (unless extra storage is attached). For example, the contract model of EVM contract interaction is designed as a contract calling contract mode, so Solidity provides <code>call</code> and <code>delegate_call</code>. <strong>The same applies to other contract systems</strong>.</p>
<p>On the other hand, the contract language framework is an additional function built on the S language, so the functions provided by the contract language framework are ultimately compiled to the T language corresponding to the S language. Some of the features required by the blockchain, such as deterministic requirements, not allowed to use the interface called by the operating system, etc., will be <strong>constrained</strong> at this level. Therefore, the contract language framework not only provides the function of the contract model for the S language itself, but also needs to impose certain constraints on the language itself. This step is also a difficult place to develop and understand the contract language framework. At the same time, it is precisely because of this point that causes many awkward situations in the process of contract developers using the contract model framework. Languages ​​such as Solidity or Move are new languages ​​developed for contract platforms. Even though their grammar will have many traces of simulating other languages, they can be more friendly to contract developers in terms of constraints. However, it is difficult to deal with the contract language that adds the contract language framework function to the existing language, and this is one of the reasons why it is difficult for contract developers to use the framework function.</p>
<p>Take ink! for example:</p>
<ol>
<li>
<p>Float should be avoided in the blockchain, because floating-point numbers may produce non-deterministic behavior. Therefore, in contract/runtime development, if you need to use floating-point numbers, or multiply and divide overflow numbers, you need to introduce fixed-point numbers for processing. Therefore, the fixed-point library provided by Substrate runtime can be introduced into the ink! contract for processing.</p>
</li>
<li>
<p>Since the contract model of <code>pallet-contracts</code> is basically the same as EVM, the contract storage of <code>pallet-contracts</code> is also composed of K/V. Then the contract model framework needs to deal with the various collection types provided in the standard library. Therefore, the collection types that may be used in the standard library are rewritten in <strong>ink!</strong>, and the process of processing the collection element types into K/V data is added. Therefore, in the ink! contract storage, if a collection type is designed, only the types provided in the ink! standard library can be used. On the other hand, since the return value of ink! needs to export metadata for third-party processing, and the current metadata interface implementation is only implemented for the collection in the standard library, so the collection of the return value of the ink! method can only use the collection of the standard library. Types of. So the following code will appear:</p>
<div><pre><code>#[ink::contract]
mod test {
    // Introduce Vec realized by ink
    use ink_storage::collections::Vec as StorageVec;
    // Introduce the Vec of the standard library
    use ink_prelude::vec::Vec;
    #[ink(storage)]
    pub struct Test {
        owners: StorageVec&lt;AccountId&gt;, // Only ink&#39;s Vec can be used
    }
    impl Test {
        #[ink(message)]
        pub fn get_owners(&amp;self) -&gt; Vec&lt;AccountId&gt; {
            // Convert Vec implemented by ink to Vec implemented by standard library
            self.owners.iter().map(Clone::clone).collect()
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div></li>
</ol>
<p>So in summary, in the model structure, developers need to understand:</p>
<ul>
<li>The contract language framework corresponds to the contract model, and the characteristics of the language framework will match the model one by one;</li>
<li>The contract language framework provides the S language with business functions for the contract model, and it also restricts the S language itself according to the requirements of the contract business logic.</li>
</ul>
<p>However, because Solidity itself is positioned as a language designed for writing contracts, many contract-related functions can be designed as keywords. And if a language itself is not designed for contracts, it is necessary to design a &quot;contract language framework&quot; corresponding to the contract model based on this contract. Since new functions are added to this language, it is generally difficult to integrate with the language itself in depth. Therefore, the final result is related to the ability of this language to <strong>expand the syntax tree</strong>. The language itself provides more flexible interfaces (macros, plug-ins, etc.) for modifying/adding the syntax tree, the more functions the contract language framework can achieve. The less the language itself provides such extensibility functions, the contract language framework can only consider modifying the compiler and extending the required grammar to support the contract model, so that the final language becomes a &quot;dialect&quot; of the original language. Up. Therefore, the former can exist in the form of a library/framework, while the latter becomes a new language. <strong>This is why we call this model the &quot;contract language framework&quot;</strong>.</p>
<h2 id="pallet-contracts-and-the-corresponding-contract-language-framework"> <code>pallet-contracts</code> and the corresponding contract language framework</h2>
<p><img src="./imgs/language_2.jpg" alt="language 2"></p>
<p>After explaining the contract language framework model above, we can apply the contract model framework to Substrate's Wasm contract system.</p>
<p>Obviously, the realization of the ink! system corresponds to the contract model of pallet-contracts. ink! 3.0 introduces the functional logic corresponding to <code>pallet-contracts</code> into rust through the system of process macros (2.0 through god declaration macros). Therefore, the S language in this system is rust, and the T language is Wasm bytecode. With the help of an auxiliary tool <code>cargo-contract</code>, the rust code using the ink! framework is compiled into the Wasm bytecode of the contract. The environment in which Wasm bytecode runs on the chain is wasmi (Wasmtime and other JIT execution environments will also be introduced in the future).</p>
<p>And because the execution environment of <code>pallet-contracts</code> is Wasm bytecode, the language that can be compiled into Wasm bytecode is matched with a contract language framework that conforms to the <code>pallet-contracts</code> contract model, and it can be generated that can run on <code>pallet. -contracts</code> The contracts on this contract platform. So for <code>pallet-contracts</code>, it is completely possible to design contract systems in different languages ​​to provide multiple options for development and use different languages ​​to develop Wasm contracts.</p>
<p>In addition to rust's ink!, the contract language framework that currently supports running on <code>pallet-contracts</code> also has the following items:</p>
<ul>
<li>Ask!, developed by Patract, is a contract language framework based on the AssemblyScript language. (Currently under development)</li>
<li>Solang, developed by hyperledger-labs, supports to compile Solidity to Wasm tool of <code>pallet-contracts</code>.</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Contract model</title>
    <id>https://www.patract.io/en/contracts/model/</id>
    <link href="https://www.patract.io/en/contracts/model/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="contract-model"> Contract model</h1>
<p>After we have the concept of contracts and contract sandboxes, we can begin to discuss the concept of contract models.</p>
<p>The contract sandbox only represents the environment in which the contract is run, and how the contract is run, how the contract interacts with the contract, and how the contract interacts with the data of the chain. These problems belong to the contract model problem.</p>
<p>In other words, the <strong>contract model is the model in which the contract runs in the contract sandbox/virtual machine</strong>.</p>
<p><img src="./imgs/model.jpg" alt=""></p>
<p>As shown in the figure, the contract model and the contract virtual machine can be decoupled in nature. The only relationship is whether the contract virtual machine can support the contract model required by the upper layer, for example:</p>
<ul>
<li>Bitcoin's virtual machine is the stack executor of Bitcoin scripts. Since the executor design is a non-Turing complete OP_CODE, the upper-level contract model can only support Bitcoin scripts.</li>
<li>Ethereum follows the inspiration of Bitcoin and designed OP_CODE with Turing completeness, namely EVM Virtual Machine (Ethereum Virtual Machine). But the OP_CODE of EVM is relatively simple, and only has a stack design, without the concept of a heap. But EVM introduces the OP_CODE of read and write state, so the contract model can support the state model from the virtual machine mechanism. Therefore, the EVM is also regarded as a state transition machine that performs state transitions (as described in the Ethereum Yellow Paper written by Gavin Wood). The state model is actually a relatively general abstract model. Most models can be simulated with the state model (such as building a UTXO model in the state model). Therefore, theoretically, as long as you continue to improve the OP_CODE of the EVM, the upper layer of the EVM can also be used. Construct other contract models.</li>
<li>libra believes that the core of the blockchain lies in the processing of assets, so it proposes the Move Virtual Machine (MVM) model to limit the contract model from the virtual machine, which can be understood as a specialized logic OP_CODE collection. Therefore, the upper layer of MVM can only run the Move model.</li>
</ul>
<p>Through the above discussion, we can recognize the concept of the contract model and understand the limitations of the virtual machine on the upper-level contract model. Therefore, we can discuss the contract model that the Wasm virtual machine can run and the contract model composition of <code>pallet-contracts</code>.</p>
<h2 id="wasm-virtual-machine"> Wasm Virtual Machine</h2>
<p>Wasm is a binary instruction format that runs on a stack-based virtual machine. (WebAssembly (abbreviated Wasm) is a binary instruction format for a stack-based virtual machine, from <a href="https://webassembly.org/" target="_blank" rel="noopener noreferrer">https://webassembly.org/</a>) So Wasm’s model and mainstream computer program The model structure is relatively similar. On the other hand, Wasm is designed to be a more general form, and WASI is designed and supports the free definition of <code>host function</code> in the operating environment. Therefore, although Wasm is developed from the browser, the current usage scenarios are not limited to browsing. It is beginning to take effect on edge computing, hot updates, and serverless platforms.</p>
<p>If the ability of a virtual machine is measured by the completeness of instructions, the EVM is at the level of a semi-finished product, which has many restrictions and is not flexible enough; while the JVM and Wasm virtual machines are relatively complete with few restrictions and strong functionality. On the other hand, the rationality of the instruction design will also affect the execution efficiency of the virtual machine to a certain extent, and the implementation scheme adopted by the virtual machine will also have a relatively large impact on the execution efficiency.</p>
<p>For example, EVM currently can only run in the form of an interpreter, and there is no optimization for the interpreter in the current implementation process body (go, c++, etc.), and the execution efficiency is relatively low, while virtual machines such as JVM and Wasm There are implementations using JIT mode, and the execution efficiency is quite high and even close to the performance of local execution.</p>
<blockquote>
<p>Note: <code>pallet-contracts</code> currently can only use <code>wasmi</code> (interpreter) to execute Wasm code, so the execution performance of the contract is not as good as that of Runtime using <code>wasmtime</code>.</p>
</blockquote>
<p>At the same time, compared to virtual machines such as JVM, the Wasm virtual machine is very lightweight (lightweight), fast, and highly customizable. ** And the function of <code>host function</code> gives the Wasm virtual machine a channel for interaction with the host** Therefore, compared with other virtual machines, it is easier to combine the Wasm virtual machine as a blockchain contract sandbox with the functions of the chain.</p>
<p>On the other hand, in the author's opinion, Wasm is a better abstraction layer between the bottom code and the upper code, and its complexity and completeness are far beyond EVM, so it is more suitable for the needs of the blockchain contract field.</p>
<p>Therefore, the sandbox environment provided by the Wasm virtual machine meets the following two requirements on the premise that the contract sandbox is satisfied:</p>
<ul>
<li>Complete instructions, rich functionality, and high execution efficiency</li>
<li>There is a suitable interface that can interact with the host (here refers to the environment in which Wasm is running, that is, the chain), so that the host can provide the required functions.</li>
</ul>
<h2 id="evm-contract-model"> EVM contract model</h2>
<p>Since Ethereum is a blockchain that stores state, the contract model of EVM needs basic read and write state functions as it should. If the process of each contract operation is regarded as a process from the start of the program to the end of its execution, then the changes in the state data correspond to the changes in the data that the program needs to persist.</p>
<p>Therefore, for the read and write status, Ethereum's EVM provides two instructions, <code>SLOAD</code> and <code>SSTORE</code>.</p>
<p>On the other hand, Ethereum describes an account using the &quot;account model&quot;, that is, the contract and the user calling the contract are regarded as an account. Under this account, there are concepts such as <code>balance</code>, so EVM provides <code>CALLER</code>, <code>ORIGIN</code>, <code>CALLVALUE</code> and a series of instructions to describe this model.</p>
<p>At the same time, because in the abstract system of EVM, the contract and the user are considered to be consistent, the model of &quot;contract call contract&quot; appears, namely <code>CALL</code>, <code>DELEGATECALL</code> and other instructions, which brings the composability of the contract. Created a prosperous Ethereum ecosystem. In EVM, a contract relies on one EVM to run, so the contract calling contract starts another EVM in one EVM and loads instructions for execution.</p>
<p>Of course, the original intention of the EVM virtual machine design is to solve the problem of non-Turing completeness of the Bitcoin script. In order to solve this problem and ensure that the downtime problem does not occur, the instruction Gas billing model is introduced.</p>
<p>Therefore, in summary, the EVM contract model has the following characteristics:</p>
<ol>
<li>The data processing model is a state machine model, and state changes are triggered by external calls (analogous to the process of calling a state change function);</li>
<li>The contract model requires chain-related features;</li>
<li>Treat the contract as consistent with the user and allow the contract to call the contract;</li>
<li>Introduce an instruction billing model.</li>
</ol>
<h2 id="the-contract-model-of-pallet-contracts"> The contract model of <code>pallet-contracts</code></h2>
<p>Here is a direct conclusion: <strong><code>pallet-contracts</code> uses the Wasm virtual machine to execute code, but its contract model is basically the same as the EVM contract model</strong>.</p>
<p>In other words, the contract model of <code>pallet-contracts</code> also has the following 4 characteristics:</p>
<ol>
<li>The data processing model is the state machine model;</li>
<li>The contract model requires chain-related features;</li>
<li>Treat the contract as consistent with the user and allow the contract to call the contract;</li>
<li>Introduce an instruction billing model.</li>
</ol>
<p>And, on the basis of the above 4 characteristics, a &quot;storage leasing model&quot; has been added:</p>
<ul>
<li><code>Rent</code> storage lease billing.</li>
</ul>
<p>As mentioned above, the contract execution environment and contract model can be decoupled. Since the EVM was designed relatively early, there is no concept of decoupling this level, so the instructions in the instructions are <code>SLOAD</code>, <code>SSTORE</code> and similar. The instructions are combined with other instructions of the EVM. And Wasm was not originally designed for the blockchain, so there must be no instructions related to the chain environment.</p>
<p>So Wasm's <code>host function</code> is used to accomplish this. As the host of the host, the chain only needs to provide the methods that he thinks the contract may use to the Wasm virtual machine, and let him import these function objects, which can be used during the execution of the contract. Therefore, through the <code>host function</code>, the <code>pallet-contracts</code> contract module can have 1, 2, and 4 functions, and will provide some of the functions required by 3, and the fifth feature (rental billing) can also be introduced.</p>
<p>And the implementation of the third function is also consistent with EVM. When there is a part of the contract calling the contract, it returns to the <code>pallet-contracts</code> module from Wasm through the <code>host function</code>, and starts a new Wasm virtual machine to execute The contract being called. (This part will be described in a future article)</p>
<p>So in summary, the contract model of <code>pallet-contracts</code> has the following characteristics:</p>
<ol>
<li>The contract model is consistent with the EVM contract model, and a storage billing model is added on this basis</li>
<li>The interaction with the chain is realized through the <code>host function</code> feature of Wasm</li>
</ol>
<h2 id="use-wasm-virtual-machine-to-implement-other-contract-models"> Use Wasm virtual machine to implement other contract models</h2>
<p>I just briefly described how <code>pallet-contracts</code> implements the contract model on the Wasm virtual machine. Since the previous article has explained that the virtual machine and the contract model can be decoupled, in fact, other things can also be implemented on the Wasm virtual machine. Contract model.</p>
<p>For example, we can consider porting the Move virtual machine to the Wasm virtual machine. There are two possible implementations:</p>
<ol>
<li>
<p>Analogous to running the EVM implementation in the Runtime Wasm environment, the MVM implementation can also be compiled into the form of Wasm (for example, named <code>pallet-mvm</code>) and run in the Runtime Wasm.</p>
<p>Based on this implementation, Move can still be compiled in the normal way, and it is consistent with the compilation result of Solidity running on <code>pallet-evm</code>, and the result of Move compilation is run on a platform such as <code>pallet-mvm</code>.</p>
</li>
<li>
<p>Abstract the MVM, ownership, and chain-related features into a form of <code>pallet-contracts</code>, and design to compile the intermediate code IR compiled by the Move language to Wasm.</p>
<p>Based on this realization, Move can be compiled into Wasm and run in the Wasm virtual machine.</p>
</li>
</ol>
<h2 id="other-contract-models"> Other contract models</h2>
<h3 id="eos-contract-model"> EOS contract model</h3>
<p>EOS's contract model is similar to EVM, while strengthening the concept of account model. Therefore, the way EOS uses Wasm is also based on the execution of Wasm, and introduces chain-related functions through <code>host function</code>.</p>
<p>The main difference between the EOS and EVM models is that the EOS contract calls the contract in the form of a transaction, and the EOS resource model is a mortgage model. At present, it is generally believed that it is the EOS mortgage model that ultimately led to EOS not succeeding.</p>
<h3 id="asynchronous-contract-model"> Asynchronous contract model</h3>
<p>The <code>pallet-actor</code> is the beginning of Substrate's attempt to implement the asynchronous contract model, and there is currently no progress. The model of <code>pallet-actor</code> intends to use the Wasm virtual machine as the operating environment, and on this basis add asynchronous functions to improve performance.</p>
<p>There are also a few other studies on asynchronous contract models, but they are all in a relatively preliminary stage.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Contract System Overview</title>
    <id>https://www.patract.io/en/contracts/overview/</id>
    <link href="https://www.patract.io/en/contracts/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="contract-system-overview"> Contract System Overview</h1>
<p>Model of the blockchain running contract is considered to be the combination of the blockchain environment (distributed consensus system) and a platform that can run a piece of logic. You can see the following examples:</p>
<ul>
<li>Bitcoin model can be divided into block model, PoW, and Bitcoin script.</li>
<li>Ethereum model can be divided into blocks, state model, PoW, and EVM.</li>
<li>Substrate model can be divided into blocks, state model, Bft consensus, and Runtime.</li>
</ul>
<p>In conclusion, we can divide the blockchain model into two parts:</p>
<ul>
<li>Underlying system that runs the blockchain, which provides a distributed and trusted environment.</li>
<li>Business logic of the chain, which runs in this trusted environment.</li>
</ul>
<p>However, <strong>the execution results must be consistent for the same code and state</strong>, because of features of the blockchain system. Therefore, the running environment must make sure that different running nodes will not cause <strong>inconsistent</strong> results. To achieve this goal, most blockchains use the <strong>sandbox</strong>.</p>
<p>The platform for running the contract is the business logic of a chain. <strong>The code that can run on this business logic is open, and the content of the contract is not controlled by the chain itself</strong>. In this case, a sandbox environment is needed to isolate the running of various contracts.</p>
<h2 id="what-is-sandbox"> What is sandbox?</h2>
<p>Sandbox is well known in the computer field. In the blockchain, sandbox is generally run by a virtual machine because the virtual machine can simulate the sandbox environment most easily.</p>
<p>Different chains use different virtual machines to run the contract sandbox:</p>
<ul>
<li>
<p>Ethereum</p>
<p>The yellow paper written by Gavin Wood proposed the model of EVM, created the concept of EVM virtual machine, and drafted the OP_CODE of EVM. After that, Solidity was designed to be compiled to OP_CODE, and then the entire ecology of Ethereum was created. It is equivalent to Ethereum's contract sandbox model for processing blockchain, building all facilities from zero to one. Therefore, the syntax of Solidity and the things that EVM can do are very simple compared to the current blockchain, such as syntax of solidity and stack depth limit of EVM. However, as a pioneer, it created a blockchain contract virtual machine model.</p>
</li>
<li>
<p>Fabric</p>
<p>As a consortium chain, Fabric is different from the public chain in usage scenarios. Fabric puts forward the concept of chain code and runs the chain code in docker. Docker is a heavier type of virtual machine compared to EVM. Fabric's chain code can do more than Solidity, but its running cost is higher than EVM.</p>
</li>
<li>
<p>EOS</p>
<p>EOS adopts Wasm as the virtual machine of the contract, which is also the selling point of EOS at that time. Compared to running Solidity's EVM, EOS's Wasm virtual machine has a much higher operating efficiency. Using C++ as a language compiled to Wasm has naturally attracted many traditional developers. EOS, as the forerunner of Wasm virtual machine, has already demonstrated the advantages of Wasm over EVM at that time. However, in addition to constraints of the environment, EOS has defects in the contract model design (see the next chapter for details) and is not really a centralized system. Therefore, EOS does not give full play to the capabilities of the Wasm contract system.</p>
</li>
<li>
<p>Substrate's <code>pallet-contracts</code></p>
<p><code>pallet-contracts</code> uses the Wasm virtual machine to run the contract. Currently, for security reasons, only the Wasmi interpreter is used to execute Wasm. But its contract model is similar to the EVM contract model (see the next chapter for details). Like EVM, Wasm virtual machine has features of fast start-up and hand-to-mouth discard. In addition, Wasm has high performance and high scalability while not being too large like docker and JVM. Therefore, Wasm is slowly being adopted in more scenarios besides the browser environment, such as edge computing, hot updates, and so on. Therefore, more and more new blockchains will use the Wasm virtual machine as the main solution when they need a sandbox environment. On the other hand, Wasm also has the feature of compiling from different languages to Wasm, such as rust, assemblyscript, and c++. This feature can attract all kinds of developers to join the contract development process.</p>
</li>
<li>
<p>Other blockchains</p>
<p>Other blockchains will have their own solutions to accomplish this sandbox goal. Some alliance chains use tailored JVMs, some public chains use RISC-V virtual machines, and some chains use slaves. Zero design a virtual machine (such as libra). These solutions have their own requirements and characteristics, but from the perspective of the model, no matter what the solution, the ultimate goal is to provide a virtual machine environment to run the contract sandbox.</p>
</li>
</ul>
<h2 id="sandbox-for-running-contracts"> Sandbox for running contracts</h2>
<p>Most of the business logic of the chain described above will run in the sandbox system, and the business logic of running contract needs sandbox isolation. On the other hand, Substrate's runtime is a sandbox environment (running in Wasm), so in Substrate's contract modules (<code>pallet-emv</code>, <code>pallet-contracts</code>), it is necessary to run another sandbox in a sandbox environment, as illustrated in the following figure:</p>
<p><img src="./imgs/overview_module.jpg" alt="overview"></p>
<p>Where,</p>
<ul>
<li>On the left is the Ethereum model, which means that every time a contract is run, an EVM virtual machine needs to be started on the chain platform to run</li>
<li>On the right is the Substrate model. We currently know that the business logic of the Substrate chain is running in the Wasm virtual machine:
<ul>
<li><code>pallet-EVM</code>: The EVM of Ethereum is compiled into Runtime Wasm, so every contract that runs is actually consistent with Ethereum, and an EVM virtual machine is created to run. If the chain is running in Wasm form, an EVM virtual machine is generated in the Wasm virtual machine to run.</li>
<li><code>pallet-contracts</code>: Wasm contracts use Wasm virtual machine to run contracts. The difference from pallet-evm is that if the chain is running in Wasm form, the virtual machine of Wasm contract jumps out of the current Runtime Wasm virtual machine to create a new Wasm. The virtual machine is running.
<ul>
<li>Currently (<a href="https://github.com/paritytech/substrate/commit/0b0d124d5f9be89f614f2be8e9da038fcb9f540e" target="_blank" rel="noopener noreferrer">0b0d124d</a> before the submission of substrate) <code>Wasmtime</code> is recommended for Runtime's Wasm virtual machine, while <code>pallet-contracts</code> contracts can only use <code>wasmi</code>.</li>
<li><code>pallet-contracts</code> can also be executed using <code>Wasmtime</code>, but currently parity believes that <code>Wasmtime</code> is relatively uncontrollable, so <code>Wasmtime</code> has not been adopted yet. Currently they have related plans and prototype code to use Wasmtime to run <code>pallet-contracts</code> contracts.</li>
</ul>
</li>
</ul>
</li>
<li>In short, in the process of running the contract, most chains adopt a sandbox model to run the contract. For the EVM, pallet-contracts model, a virtual machine is created every time a contract is run.</li>
</ul>
<h2 id="notes"> Notes:</h2>
<ol>
<li><code>Wasmtime</code> is a Wasm virtual machine that implements JIT, and <code>wasmi</code> is a pure interpreter-type Wasm virtual machine.</li>
<li>The execution efficiency of Wasmtime is much higher than <code>wasmi</code>.</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Brief introduction of Wasm</title>
    <id>https://www.patract.io/en/contracts/wasm_first_step/</id>
    <link href="https://www.patract.io/en/contracts/wasm_first_step/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="brief-introduction-of-wasm"> Brief introduction of Wasm</h1>
<h2 id="the-association-between-wasm-and-contract-model"> The association between Wasm and contract model</h2>
<p><img src="./imgs/wasm.jpg" alt=""></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">API access</title>
    <id>https://www.patract.io/en/elara/API/</id>
    <link href="https://www.patract.io/en/elara/API/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="api-access"> API access</h1>
<h2 id="endpoint-rules"> ENDPOINT Rules</h2>
<p><code>Https</code> access</p>
<div><pre><code>https://api.elara.patract.io/&lt;Network&gt;/&lt;YOUR-PROJECT-ID&gt;
</code></pre>
<div><span>1</span><br></div></div><p><code>Websocket</code> access</p>
<div><pre><code>wss://api.elara.patract.io/&lt;Network&gt;/&lt;YOUR-PROJECT-ID&gt;
</code></pre>
<div><span>1</span><br></div></div><h2 id="support-network"> Support network</h2>
<p>| <strong>NETWORK</strong> | <strong>DESCRIPTION</strong> | ENDPOINT |
| ----------- | ----------------------- | ------------- ---------------------------------------- |
| Polkadot | JSON-RPC over HTTPS | https://api.elara.patract.io/Polkadot/YOUR-PROJECT-ID |
| Polkadot | JSON-RPC over WebSocket | wss://api.elara.patract.io/Polkadot/YOUR-PROJECT-ID |
| Kusama | JSON-RPC over HTTPS | https://api.elara.patract.io/Kusama/YOUR-PROJECT-ID |
| Kusama | JSON-RPC over WebSocket | wss://api.elara.patract.io/Kusama/YOUR-PROJECT-ID |
| Rococo | JSON-RPC over HTTPS | https://api.elara.patract.io/Rococo/YOUR-PROJECT-ID |
| Rococo | JSON-RPC over WebSocket | wss://api.elara.patract.io/Rococo/YOUR-PROJECT-ID |
| Jupiter | JSON-RPC over HTTPS | https://api.elara.patract.io/Jupiter/YOUR-PROJECT-ID |
| Jupiter | JSON-RPC over WebSocket | wss://api.elara.patract.io/Jupiter/YOUR-PROJECT-ID |
| Darwinia | JSON-RPC over HTTPS | https://api.elara.patract.io/Darwinia/YOUR-PROJECT-ID |
| Darwinia | JSON-RPC over WebSocket | wss://api.elara.patract.io/Darwinia/YOUR-PROJECT-ID |
| Dock | JSON-RPC over HTTPS | https://api.elara.patract.io/Dock/YOUR-PROJECT-ID |
| Dock | JSON-RPC over WebSocket | wss://api.elara.patract.io/Dock/YOUR-PROJECT-ID |
| Edgeware | JSON-RPC over HTTPS | https://api.elara.patract.io/Edgeware/YOUR-PROJECT-ID |
| Edgeware | JSON-RPC over WebSocket | wss://api.elara.patract.io/Edgeware/YOUR-PROJECT-ID |
| Kulupu | JSON-RPC over HTTPS | https://api.elara.patract.io/Kulupu/YOUR-PROJECT-ID |
| Kulupu | JSON-RPC over WebSocket | wss://api.elara.patract.io/Kulupu/YOUR-PROJECT-ID |
| Nodle | JSON-RPC over HTTPS | https://api.elara.patract.io/Nodle/YOUR-PROJECT-ID |
| Nodle | JSON-RPC over WebSocket | wss://api.elara.patract.io/Nodle/YOUR-PROJECT-ID |
| Plasm | JSON-RPC over HTTPS | https://api.elara.patract.io/Plasm/YOUR-PROJECT-ID |
| Plasm | JSON-RPC over WebSocket | wss://api.elara.patract.io/Plasm/YOUR-PROJECT-ID |
| Stafi | JSON-RPC over HTTPS | https://api.elara.patract.io/Stafi/YOUR-PROJECT-ID |
| Stafi | JSON-RPC over WebSocket | wss://api.elara.patract.io/Stafi/YOUR-PROJECT-ID |
| Chainx | ​​JSON-RPC over HTTPS | https://api.elara.patract.io/Chainx/YOUR-PROJECT-ID |
| Chainx | ​​JSON-RPC over WebSocket | wss://api.elara.patract.io/Chainx/YOUR-PROJECT-ID |
| Mandala | JSON-RPC over HTTPS | https://api.elara.patract.io/Mandala/YOUR-PROJECT-ID |
| Mandala | JSON-RPC over WebSocket | wss://api.elara.patract.io/Mandala/YOUR-PROJECT-ID |</p>
<h2 id="error-code"> error code</h2>
<p>If the Substrate RPC method encounters an error, the error member contained in the response object must be an object containing code members and descriptive message members. The following list contains all possible error codes and associated messages:</p>
<p>| <strong>CODE</strong> | <strong><strong>MEANING</strong></strong> | <strong>CATEGORY</strong> |
| -------- | ----------------------- | ---------------- ------------------ |
| -32700 | Parse error | Invalid JSON |
| -32600 | Invalid request | JSON is not a valid request object |
| -32601 | Method not found | Method does not exist |
| -32602 | Invalid params | Invalid method parameters |
| -32603 | Internal error | Internal JSON-RPC error |
| -1 | CheckAuthenticated Fail | non-standard |
| -2 | Project Name Empty | non-standard |
| -3 | Project Name Error! | non-standard |
| -4 | Chain Error | non-standard |
| -5 | Out Of Limit | non-standard |
| -6 | NotActive | non-standard |
| -7 | RPC Error | non-standard |
| -8 | Project Error | non-standard |
| -9 | No Access Allowed | non-standard |
| -10 | Black Uid | non-standard |
| -11 | Duplicate Name | non-standard |</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Design Brief</title>
    <id>https://www.patract.io/en/elara/design/</id>
    <link href="https://www.patract.io/en/elara/design/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="design-brief"> Design Brief</h1>
<p>Elara has long-term development iteration planning and operation and maintenance goals, in order to be able to support the continuous transition of Polkadot ecological developers from the 10,000+ level to the 100 million+ level. The core of Elara is a set of high-performance, high-availability and high-scalability distributed architecture. It is significantly different from other projects that provide Node API Service:</p>
<ol>
<li>
<p>Elara's back-end architecture is not a simple but inefficient NodePool+LoadBalancer. This solution cannot bear the impact of large-scale applications and traffic, and cannot be expanded in time, because Node will become a significant bottleneck in the system. In Elara's architecture, only a small number of Nodes are required to provide basic data sources. Elara supports the access of a large number of users through the design of distributed architecture, the integration of multiple services, and the ultimate optimization of request access paths. The short-term development cost of the NodePool solution is low, but the unit cost of long-term service to users is extremely high. Conversely, Elara’s initial investment in technology costs is relatively high, but in the long term it can greatly reduce the unit cost of serving users, while also ensuring high service quality.</p>
</li>
<li>
<p>Elara focuses on providing a minimalist full-featured experience for ecological developers. What we provide is an extremely &quot;thin&quot; layer of service, and we hope that developers will not feel the existence of Elara. The API service provided by Elara not only includes all the functions of the node, but also includes the historical status data function, but also includes the project's request statistics dashboard and other functions. The service capabilities provided to developers are far greater than the capabilities provided by the deployment of nodes by themselves. Therefore, under this goal, functions such as &quot;one-click node deployment&quot; are very redundant, and developers should only focus on their own business applications.</p>
</li>
<li>
<p>Elara is an open platform, upholding the principle of community building. In the next iteration of the version, we will continue to access more mainnets and establish a set of process specifications for the automatic access of the Polkadot ecological main chain and parachain.</p>
</li>
</ol>
<p>In terms of overall design, Elara is designed as a microservice architecture system consisting of multiple microservices that can be independently extended. All microservices run as independent processes after they are started, so in the future, individual microservices can be upgraded in parallel, such as expansion, reconstruction, replacement implementation, and so on. Among them, <code>Redis</code> is used as a storage container for high-speed data access, and is decoupled from the use of <code>kafka</code> for architecture. In the future, it will be easy to add more complex functional modules based on this design to let Elara play a more powerful effect.</p>
<p>The core architecture of Elara is roughly as follows</p>
<p><img src="https://user-images.githubusercontent.com/21072025/111115173-35923280-859f-11eb-8172-737c07aab4e7.png" alt="elara"></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Elara</title>
    <id>https://www.patract.io/en/elara/introduction/</id>
    <link href="https://www.patract.io/en/elara/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="elara"> Elara</h1>
<p>In Polkadot, Kusama or Parachain, RPC is the interface between Dapp and the network. As the Polkadot network continues to expand, more and more parachains will be online, and more and more parachains will support smart contract functions. Faced with more and more parallel chains, developers need to build and maintain multiple chain node RPCs in order to interact with them, which will be a huge development cost for them.</p>
<p>Whether it is facing the development and testing needs of developers, or users' online Dapp usage needs, convenient, convenient, fast and stable network access is one of the necessary conditions. Therefore, providing developers and ordinary users with a unified and simplified network access service capability is a necessary support for serving Dapp developers, and it is also the infrastructure of the Polkadot ecosystem.</p>
<p>Elara's goal is to build an infrastructure and network public access service similar to Infura, to provide developers with a unified access layer with multiple connections. We will create a universal architecture that can easily access Polkadot, Kusama, various parachains and various substrate chains, that is, focus on serving Polkadot and Kusama, while maintaining scalability, and benefiting the entire Substrate ecosystem.</p>
<p>In addition, as part of the smart contract development ecosystem service, Elara will be integrated with other components of the Patract Suite in the future, and will be fully integrated in terms of contract development environment support, development tool components, contract deployment and application release, and simplify the application foundation. Architecture allows developers to focus on building upper-level applications.</p>
<p>Currently, we have provided online service elara.patract.io. The community is welcome to use Elara:
-Everyone can use Polkadot provided by Elara and the public shared RPC services of multiple ecological mainnets (such as wss://polkadot.elara.patract.io and https://polkadot.elara.patract.io).
-Developers can visit elara.patract.io to obtain exclusive online services with free access to multiple networks.</p>
<p>More information:</p>
<p>Github: <a href="https://github.com/patractlabs/elara" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/elara</a></p>
<p>Homepage: <a href="https://elara.patract.io" target="_blank" rel="noopener noreferrer">https://elara.patract.io</a></p>
<p>Docs:<a href="https://docs.elara.patract.io/" target="_blank" rel="noopener noreferrer">https://docs.elara.patract.io/</a></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Tutorial</title>
    <id>https://www.patract.io/en/elara/tutorial/</id>
    <link href="https://www.patract.io/en/elara/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> Tutorial</h1>
<p>Elara's API requires a valid Project Endpoint to be included in your request. This identifier should be appended to the request URL.</p>
<h2 id="get-your-project-endpoint"> Get YOUR-PROJECT-ENDPOINT</h2>
<ol>
<li>
<p>Use your github account to log in <a href="https://elara.patract.io/" target="_blank" rel="noopener noreferrer">Elara official website</a></p>
</li>
<li>
<p>Enter <a href="https://elara.patract.io/#/dashboard/console" target="_blank" rel="noopener noreferrer">Elara Dashboard</a>, click to select the main chain in the left sidebar.</p>
</li>
<li>
<p>Click the &quot;Create New Project&quot; button in the upper right corner, enter &quot;PROJECT-NAME&quot; in the pop-up dialog box, and then click &quot;OK&quot;. If everything is ok, you will see a message stating that the project has been successfully created.</p>
</li>
<li>
<p>In the project list, click the project to enter the project details page
-There is a list of information showing &quot;PID&quot;, a string of characters and numbers with a length of 32, which is the &quot;YOUR-PROJECT-ID&quot; of the project
-There is a column that displays &quot;ENDPOINTS&quot; information, including &quot;https&quot; and &quot;wss&quot; for accessing ENDPOINT. That is the &quot;YOUR-PROJECT-ENDPOINT&quot; of the project</p>
</li>
</ol>
<h2 id="make-a-request"> Make a request</h2>
<p>Use one of these ENDPOINT as the provider of your client program.</p>
<p><em>Note: Please be sure to replace YOUR-PROJECT-ENDPOINT with Project Endpoint in the Elara dashboard</em></p>
<ul>
<li>Method 1: curl sends an HTTP request:</li>
</ul>
<div><pre><code><span>#curl http</span>
<span>curl</span> --location --request POST<span>'https://YOUR-PROJECT-ENDPOINT'</span> <span>\</span>
    --header<span>'Content-Type: application/json'</span> <span>\</span>
    --data-raw<span>'{
        "id":1,
        "jsonrpc":"2.0",
        "method":"chain_getBlock",
        "params":[]
    }'</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><ul>
<li>Method 2: Use wscat to send websocket request:</li>
</ul>
<div><pre><code>parachain@ubuntu:~/elara$ wscat -c wss://YOUR-PROJECT-ENDPOINT
Connected (press CTRL+C to quit)
&gt; {&quot;id&quot;:1,&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;method&quot;:&quot;chain_getBlock&quot;,&quot;params&quot;:[]}
&lt;{&quot;jsonrpc&quot;:&quot;2.0&quot;,&quot;result&quot;:{&quot;block&quot;:{&quot;extrinsics&quot;:[&quot;0x280402000b901ac96e7601&quot;],&quot;header&quot;:{&quot;digest&quot;:{&quot;logs&quot;:[&quot;0x066175726120dfcdf90f00000000&quot;,&quot; 0x05617572610101acb2a4725f0f8945593cea6aa6ef70df2a8fd4a2c4eb1c0d1bf51828f26e371f897473113541f9c0d9f94e51471a3d685a86866a12133ea012d2777bb9709589 &quot;]},&quot; extrinsicsRoot &quot;:&quot; 0xcca5112546305b07d904c2aa26155dffe6c66de043708e1ac89e57609fbcc6d1 &quot;,&quot; number &quot;:&quot; 0x17922 &quot;,&quot; parentHash &quot;:&quot; 0xdb798a19707ef9085b97d0b00854c613ae4abdb560e2ea1164f2e7bbfbc288a1 &quot;,&quot; stateRoot &quot;:&quot; 0xdc575fe975067ded933020df9035db0e496143e6b9a062a4313fd1f6e9d02922 &quot;}},&quot; justification &quot;: null},&quot; id &quot;: 1}
&gt;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><ul>
<li>Method 3: Use SDK</li>
</ul>
<p>You can refer to polkadot-js and use the following similar code to access the node through Https or Websocket:</p>
<div><pre><code><span>const</span> <span>{</span>ApiPromise<span>,</span> WsProvider<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'@polkadot/api'</span><span>)</span><span>;</span>
<span>const</span> <span>{</span>HttpProvider<span>}</span> <span>=</span> <span>require</span><span>(</span><span>'@polkadot/rpc-provider'</span><span>)</span><span>;</span>

<span>(</span><span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span>
<span>// Http</span>
<span>const</span> httpProvider <span>=</span> <span>new</span> <span>HttpProvider</span><span>(</span><span>'https://YOUR-PROJECT-ENDPOINT'</span><span>)</span>
<span>const</span> hash <span>=</span> <span>await</span> httpProvider<span>.</span><span>send</span><span>(</span><span>'chain_getBlockHash'</span><span>,</span> <span>[</span><span>]</span><span>)</span>
console<span>.</span><span>log</span><span>(</span><span>'latest block Hash'</span><span>,</span> hash<span>)</span>

<span>// Websocket</span>
<span>const</span> wsProvider <span>=</span> <span>new</span> <span>WsProvider</span><span>(</span><span>'wss://YOUR-PROJECT-ENDPOINT'</span><span>)</span>
<span>const</span> api <span>=</span> <span>await</span> ApiPromise<span>.</span><span>create</span><span>(</span><span>{</span> provider<span>:</span> wsProvider <span>}</span><span>)</span>
<span>//Do something</span>

<span>}</span><span>)</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>It is important to note that JSON-RPC requests have nothing to do with transmission, and the same request can be made via HTTPS and Websockets.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa contract execution log information interpretation</title>
    <id>https://www.patract.io/en/europa/execution_info/</id>
    <link href="https://www.patract.io/en/europa/execution_info/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-contract-execution-log-information-interpretation"> Europa contract execution log information interpretation</h1>
<p>The structure for recording contract execution information in the current Europa <code>pallet-contract</code> is as follows. The notes briefly explain the information that each attribute represents:</p>
<div><pre><code><span>/// Record the contract execution context.</span>
<span>pub</span> <span>struct</span> <span>NestedRuntime</span> <span>{</span>
	<span>/// Current depth</span>
    depth<span>:</span> <span>usize</span><span>,</span>
	<span>/// The current contract execute result</span>
	ext_result<span>:</span> <span>ExecResultTrace</span><span>,</span>
	<span>/// The value in sandbox successful result</span>
	sandbox_result_ok<span>:</span> <span>Option</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span>
	<span>/// Who call the current contract</span>
    caller<span>:</span> <span>AccountId32</span><span>,</span>
	<span>/// The account of the current contract</span>
    self_account<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId32</span><span>></span><span>,</span>
	<span>/// The input selector</span>
    selector<span>:</span> <span>Option</span><span>&lt;</span><span>HexVec</span><span>></span><span>,</span>
	<span>/// The input arguments</span>
    args<span>:</span> <span>Option</span><span>&lt;</span><span>HexVec</span><span>></span><span>,</span>
	<span>/// The value in call or the endowment in instantiate</span>
    value<span>:</span> <span>u128</span><span>,</span>
	<span>/// The gas limit when this contract is called</span>
    gas_limit<span>:</span> <span>Gas</span><span>,</span>
	<span>/// The gas left when this contract return</span>
    gas_left<span>:</span> <span>Gas</span><span>,</span>
	<span>/// The host function call stack</span>
    env_trace<span>:</span> <span>EnvTraceList</span><span>,</span>
	<span>/// The error in wasm</span>
    wasm_error<span>:</span> <span>Option</span><span>&lt;</span><span>WasmErrorWrapper</span><span>></span><span>,</span>
	<span>/// The trap in host function execution</span>
    trap_reason<span>:</span> <span>Option</span><span>&lt;</span><span>TrapReason</span><span>></span><span>,</span>
	<span>/// Nested contract execution context</span>
    nest<span>:</span> <span>Vec</span><span>&lt;</span><span>NestedRuntime</span><span>></span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h2 id="log-example-corresponding-to-this-structure"> Log example corresponding to this structure:</h2>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>success<span>]</span> ExecReturnValue <span>{</span> flags: <span>0</span>, data:  <span>}</span>,
    caller: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d <span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: 0144d6fc570d7bddda6f8e36141f179cd172324599b556ef514193f3105865f6 <span>(</span>5C6NMXaS<span>..</span>.<span>)</span>,
    selector: 0x9bae9d5e,
    args: 0x40420f00000000000000000000000000,
    value: <span>10000000000000000</span>,
    gas_limit: <span>200000000000</span>,
    gas_left: <span>190018947968</span>,
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0x9bae9d5e40420f00000000000000000000000000<span>))</span>,
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d<span>))</span>,
        <span>..</span>.
       seal_set_storage<span><span>((</span>Some<span>(</span><span>0x0300000001000000000000000000000000000000000000000000000000000000</span><span>)</span><span>,</span> Some<span>(</span><span>0x000000000000000000000000</span><span>))</span></span><span>)</span>,
    <span>]</span>,
    sandbox_result_ok: Value<span>(</span>
        I32<span>(</span>
            <span>0</span>,
        <span>)</span>,
    <span>)</span>,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="log-field-description"> Log field description:</h2>
<ul>
<li>
<p><code>1: NestedRuntime</code>: The contract execution log with a call depth of 1.</p>
</li>
<li>
<p><code>ext_result</code>: The execution result of the contract at the <code>pallet-contract</code> level, there are two cases: <code>[success]</code> and <code>[failed]</code>.</p>
<ul>
<li><code>[success]</code> can only indicate that the execution was successful at the <code>pallet-contract</code> level, but the business logic of the contract itself may throw an Error. The data value in <code>ExecResultValue {flag:0, data: 0x...}</code> may be the return value of the contract, or the enumeration value of Error defined in the contract.</li>
<li><code>[failed]</code> will be followed by an <code>ExecError {.. }</code>, the error message is defined in <code>pallet-contracts</code>.</li>
</ul>
</li>
<li>
<p><code>caller</code>: The caller of the contract, which may be a user or another contract account. When the value is <code>0x000...</code>, it is called by rpc.</p>
</li>
<li>
<p><code>self_account</code>: The current contract account.</p>
</li>
<li>
<p><code>selector</code>: The function identifier passed to the contract, and the corresponding relationship can be queried in the contract's metadata.json.</p>
</li>
<li>
<p><code>args</code>: The parameters passed to the contract calling function.</p>
</li>
<li>
<p><code>value</code>: transfer amount to the current contract.</p>
</li>
<li>
<p><code>gas_limit</code>: The maximum amount of gas that can be used by the current contract.</p>
</li>
<li>
<p><code>gas_left</code>: The amount of gas remaining when exiting the current contract.</p>
</li>
<li>
<p><code>env_trace</code>: During the execution of the current contract, the call stack of host_function gives the parameters of each function in detail. Take <code>seal_call</code> as an example. If input is Some(xxx) and output is None, then there may be an error in the process of calling each other between the contracts.</p>
</li>
<li>
<p><code>trap_reason</code>: The reason for trap encountered during host_function execution.</p>
<ul>
<li>Return &amp; Termination &amp; Restoration: It is the normal exit strategy executed by the contract, not Error.</li>
<li>SupervisorError: DispatchError defined in <code>pallet_contracts</code>.</li>
</ul>
</li>
<li>
<p><code>wasm_error</code>: If a wasm execution error occurs in the contract, the wasm call stack will be printed in this field. If and only if <code>ext_result</code> is <code>[failed]</code>.</p>
</li>
<li>
<p><code>sandbox_result_ok</code>: If there is no <code>trap</code> and no <code>wasm_error</code> during the execution of host_function, then the contract is considered to be executed successfully and this field is printed. This field carries a <code>ReturnValue</code> information. In <code>ink!</code>, if the value returned is not 0, then an Error defined in <code>ink!</code> may have occurred, and the corresponding [<code>DispatchError</code>] needs to be queried. (https://github.com/paritytech/ink/blob/abd5cf14c0883cb2d5acf81f2277aeec330aa843/crates/lang/src/error.rs#L66-L80).</p>
</li>
<li>
<p><code>nest</code>: The contract log of nested calls. If the current contract calls other contracts, the execution log of the called contract will be nested in this field.</p>
<p>For a detailed explanation of this part, please refer to the subsequent chapter &quot;Contract Nested Call&quot;.</p>
</li>
</ul>
<h2 id="contract-nested-call"> Contract nested call</h2>
<p>The logs of the mutual calls between the contracts are as follows:</p>
<ul>
<li>In contract A, call contract C after calling contract B</li>
</ul>
<p><img src="./imgs/call_other_1.png" alt="call_other_1"></p>
<p>The log is as follows:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	self_account: A,
	nest:<span>[</span>
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: B,
			nest:<span>[</span><span>]</span>,
		<span>}</span>,
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: C,
			nest:<span>[</span><span>]</span>,
		<span>}</span>
	<span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>In contract A, call contract B, in contract B, call contract C</li>
</ul>
<p><img src="./imgs/call_other_2.png" alt="call_other_2"></p>
<p>The log is as follows:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	self_account: A,
	nest:<span>[</span>
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: B,
			nest:<span>[</span>
				<span>3</span>: NestedRuntime <span>{</span>
				self_account: C,
				nest:<span>[</span><span>]</span>,
			<span>}</span>
			<span>]</span>,
		<span>}</span>  
	<span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa</title>
    <id>https://www.patract.io/en/europa/introduction/</id>
    <link href="https://www.patract.io/en/europa/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa"> Europa</h1>
<p>Europa is a sandbox environment for running <code>FRAME Contracts pallet</code> and **simulating nodes. It is also a framework for running Substrate runtime.</p>
<ol>
<li>When Europa is used as a sandbox for contract debugging, Europa modified the <code>FRAME Contracts pallet</code> module to track the contract execution process, which can provide contract developers with richest contract execution information to allow contract execution The process is no longer a black box**, helping contract developers to debug Wasm contracts;</li>
<li>When using Europa as the framework of Substrate, you can do Substrate Runtime development (mostly used for experimental functions) without being disturbed by Wasm compilation problems.</li>
</ol>
<h2 id="as-the-framework-of-substrate-runtime"> As the framework of Substrate runtime</h2>
<ol>
<li>
<p>Europa removed some unnecessary functional modules, such as WASM executor, p2p, etc., and only retained the native execution environment.</p>
</li>
<li>
<p>The block generation method of <code>manual_seal</code> is used (the block generation is triggered when a new transaction is received), so that developers do not have to be affected by consensus block generation, and can focus more on contract development, debugging and log analysis.</p>
</li>
<li>
<p>The <code>state-kv</code> database is provided, which records the state changes of each block.</p>
<div><pre><code><span># print the modified state kvs for block 1</span>
$ ./target/debug/europa state-kv <span>1</span> -d europa_database
Nov <span>12</span> <span>15</span>:53:27.699 INFO modified state <span>for</span> block:0x6c119a8f7de42e330aca8b9d3587937aacbbc203cc21650b60644c2f2d33e7fb
Nov <span>12</span> <span>15</span>:53:27.699 INFO key:26aa394eea5630e07c48ae0c9558cef702a5c1b19ab7a04f536c519aca4983ac<span>|</span>value:<span>[</span>DELETED<span>]</span>
Nov <span>12</span> <span>15</span>:53:27.699 INFO key:26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850<span>|</span>value:05000000
<span># ...</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>In addition to providing the basic rpc in the Substrate framework, Europa also has some special rpc:</p>
<ul>
<li><code>europa_forwardToHeight (params: [height: NumberOf&lt;B&gt;])</code>: Fast forward the block to the specified height, which is very helpful for testing functions related to the block height.</li>
<li><code>europa_backwardToHeight (params: [height: NumberOf&lt;B&gt;])</code>: Return the block to the specified height, mainly used to restore the state.</li>
<li><code>europa_modifiedStateKvs (params: [number_or_hash: NumberOrHash&lt;B&gt;])</code>: Provide block height or block hash, query the state change in the corresponding block.</li>
</ul>
</li>
<li>
<p>In addition to using the optional command of <code>-d/--base-path</code> to divide different working directories, Europa can also use <code>-w/--workspace</code> to declare different workspaces under the working directory.</p>
</li>
</ol>
<h2 id="as-a-sandbox-environment-for-frame-contracts-pallet"> As a sandbox environment for <code>FRAME Contracts pallet</code></h2>
<p>When developing contracts, Europa provides developers with <strong>more detailed log information</strong> to assist contract developers in locating problems, including contracts execution logs and wasm execution stacks. At the same time, this sandbox environment also has the functions of the aforementioned Europa framework. For example, you can use rpc such as <code>europa_forwardToHeight</code> to control the execution of the contract.</p>
<p>Contract errors may appear in three places: the <code>ink!</code> layer, the internal business logic of the contract, and the <code>pallet_contracts</code> layer. With these detailed logs, developers can quickly locate problems during debugging, especially in the case of mutual calls between contracts, Europa can greatly improve the development experience.</p>
<p>Currently, there are two custom ChainExtensions available on Europa, namely Contract logger and ZKP feature.</p>
<h2 id="focus-of-this-chapter"> Focus of this chapter</h2>
<p>Since the main focus of this book is Substrate's Wasm contract, the Europa-related introductions in the following chapters are all related to the use of Europa contract debugging.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa tutorial</title>
    <id>https://www.patract.io/en/europa/tutorial/</id>
    <link href="https://www.patract.io/en/europa/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-tutorial"> Europa tutorial</h1>
<p>Europa is a simulated node sandbox environment with contract functions, and its interface (mainly rpc) is compatible with most third-party tools, so Europa can be regarded as an independent node for operation.</p>
<h2 id="set-up-development-environment"> Set up development environment</h2>
<p>The environment of Europa is the same as the environment of normal use of node debugging contracts. The only difference is that if you need to print the backtrace of Wasm, you need to use a fork version of <code>cargo-contract</code> provided by Patract until parity (official)<code>cargo- contract</code> before merging the features submitted by Patract. If you don't need to print the Wasm backtract when the contract execution crashes, just use the official <code>cargo-contract</code>.</p>
<ul>
<li>
<p>Compile and run Europa node</p>
<div><pre><code>$ <span>git</span> clone --recurse-submodules https://github.com/patractlabs/europa.git
<span>## or do following commands</span>
$ <span>git</span> clone https://github.com/patractlabs/europa.git
$ <span>cd</span> europa/vendor
$ <span>git</span> submodule update --init --recursive
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>You can also install Europa directly using <code>cargo install</code>. (Note to add <code>--locked</code> to use the Substrate version that Europa currently depends on)</p>
<div><pre><code>$ cargo <span>install</span> europa --git<span>=</span>https://github.com/patractlabs/europa.git --force --locked
</code></pre>
<div><span>1</span><br></div></div><p>Run Europa:</p>
<div><pre><code>$ ./target/release/europa --log<span>=</span>runtime<span>=</span>debug -d ./europa_database
<span># If there is no need to retain data, you can also use `--tmp` to run Europa</span>
$ ./target/release/europa --log<span>=</span>runtime<span>=</span>debug --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>Install <a href="https://github.com/patractlabs/cargo-contract" target="_blank" rel="noopener noreferrer">PatractLabs's <code>cargo-contract</code></a> (optional, only needed if the Wasm contract executes backtrace when it crashes)</p>
<div><pre><code>$ cargo install cargo-contract --git https://github.com/patractlabs/cargo-contract --branch=v0.10.0 --force
</code></pre>
<div><span>1</span><br></div></div><p>If the developer has installed the official <code>cargo-contract</code> and does not want to overwrite the installation, you can use manual compilation:</p>
<div><pre><code>$ <span>git</span> clone https://github.com/patractlabs/cargo-contract --branch<span>=</span>v0.10.0
$ <span>cd</span> cargo-contract
$ cargo build --release
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>Compile contract</p>
<p>The <code>--debug</code> option is provided by Patract's <code>cargo-contract</code>. If you use the <code>cargo-contract</code> provided by parity, you do not need the <code>--debug</code> option in the following commands.</p>
<div><pre><code>$ cargo-contract build --debug
<span># or</span>
$ cargo +nightly contract build --debug
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>-d/--debug</code> can <strong>replace</strong> the original <code>*.wasm</code> and <code>*.contract</code> files in the <code>target/ink</code> directory. The replaced Wasm and Contract files close the compilation process Code optimization conditions, and include the &quot;name section&quot; part to help analyze the information of the wasm call stack.</p>
<blockquote>
<p>If the contract is compiled without using the <code>cargo-contract</code> in the Patract warehouse and carrying the <code>-d/--debug</code> parameter when compiling the contract, the following log may appear when a wasm panic occurs during the execution of the contract:</p>
<div><pre><code>wasm_error: Error::WasmiExecution(Trap(Trap {kind: Unreachable }))
wasm backtrace:
| &lt;unknown&gt;[...]
| &lt;unknown&gt;[...]
╰─&gt;&lt;unknown&gt;[...]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>
<blockquote>
<p>The compiled product produced after adding <code>-d/--debug</code> is generally several hundred times larger than the original product (for example, the original product 2.5k, the new product 700k), because the new product is not optimized and retains a lot of debugging information. Therefore, the developer can roughly determine whether it is the product after adding the <code>-d/--debug</code> option by the product size.</p>
</blockquote>
</li>
</ul>
<h2 id="deploy-contract"> Deploy contract</h2>
<p>Developers can use <a href="https://redspot.patract.io/zh-CN/tutorial/" target="_blank" rel="noopener noreferrer">Redspot</a> or <a href="https://polkadot.js.org/apps/#/explorer" target="_blank" rel="noopener noreferrer">Substrate Protal</a> to deploy contracts .</p>
<p>Note that Europa's <code>extending types</code> are as follows:</p>
<div><pre><code><span>{</span>
  <span>"LookupSource"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
  <span>"Address"</span><span>:</span> <span>"MultiAddress"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>For example, use Redspot to deploy, use apps to execute transactions and view status.</p>
<p>Redspot deploys a contract:</p>
<div><pre><code>$ npx redspot run scripts/deploy.js
</code></pre>
<div><span>1</span><br></div></div><p>Get the successfully deployed contract address, and add an existing contract to apps:</p>
<p><img src="./imgs/add_exist.png" alt="add_exist"></p>
<h2 id="analysis-log"> Analysis log</h2>
<p>In the process of deploying and executing the contract using Europa, the following detailed information will be printed. This information is the information in the execution of the contract, which can conveniently help developers locate problems in the contract. With this information, the execution process of the contract is no longer a black box.</p>
<p>Examples of log printing effects:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>success<span>]</span> ExecReturnValue <span>{</span> flags: <span>0</span>, data:  <span>}</span>,
    caller: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d <span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: 0144d6fc570d7bddda6f8e36141f179cd172324599b556ef514193f3105865f6 <span>(</span>5C6NMXaS<span>..</span>.<span>)</span>,
    selector: 0x9bae9d5e,
    args: 0x40420f00000000000000000000000000,
    value: <span>10000000000000000</span>,
    gas_limit: <span>200000000000</span>,
    gas_left: <span>190018947968</span>,
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0x9bae9d5e40420f00000000000000000000000000<span>))</span>,
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d<span>))</span>,
        <span>..</span>.
       seal_set_storage<span><span>((</span>Some<span>(</span><span>0x0300000001000000000000000000000000000000000000000000000000000000</span><span>)</span><span>,</span> Some<span>(</span><span>0x000000000000000000000000</span><span>))</span></span><span>)</span>,
    <span>]</span>,
    sandbox_result_ok: Value<span>(</span>
        I32<span>(</span>
            <span>0</span>,
        <span>)</span>,
    <span>)</span>,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="contract-execution-log"> Contract execution log</h3>
<p>For the log cases listed above, we can simply analyze the following information:</p>
<ul>
<li><code>ext_result</code>: It can surface the execution result of this contract call execution (call through transaction and rpc call belong to contract call);</li>
<li><code>caller</code>: The public key of the caller is displayed, and the contract calling contract is the public key of the parent contract (consistent with the EVM model);</li>
<li><code>self_account</code>: The address of this contract on the surface;</li>
<li><code>selector</code>: The selector of the method being called. Through this attribute, it can be judged which method of the contract is called this time;</li>
<li><code>args</code>, <code>value</code>, <code>gas_limit</code>, <code>gas_limit</code>, etc. indicate the relevant parameters and gas consumption of this execution;</li>
<li><code>env_trace</code> and <code>sandbox_result_ok</code>: surface the interaction information between contract Wasm execution and <code>pallet-contracts</code>, and the final result of Wasm executor (Wasm executor result and contract execution result are different concepts)</li>
<li><code>nest</code>: Describes the relationship between the contract calling the contract. Since this is empty, it appears that this call only involves the execution of one contract. See the following text for details;</li>
</ul>
<p>It can be seen that the contract log provided by Europa can clearly surface many detailed information in a contract call. If the developer of the contract has a better understanding of the contract module <code>pallet-contracts</code>, a lot of important debugging information can be obtained to assist in locating contract problems. If the contract developer knows less about the contract module, information such as <code>selector</code>, <code>caller</code>, <code>nest</code>, etc. can also bring great help to the contract development process and reduce the time for debugging the contract.</p>
<p>**Note that when viewing messages in contracts on apps, apps will automatically call the read-only messages of the contract to obtain some values ​​of the current contract, causing Europa to display some logs of read calls, which interferes with normal judgment. Therefore, developers need to distinguish clearly which log is what they need. ** If you use a third-party client that sends requests that can be controlled by yourself, there is no concern in this regard.</p>
<blockquote>
<p>When the developer uses apps to send a request, he identifies the small tip that needs to be logged in Europa:</p>
<p><code>1: NestedRuntime {}</code> There is a <code>selector</code> field under the block, which indicates the selector used for this contract execution. Developers can find out what the selector corresponding to the currently called method name is in the <code>messages</code> section of metadata.json, for example:</p>
<div><pre><code><span>"messages"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"name"</span><span>:</span> <span>[</span>
        <span>"flip"</span>
      <span>]</span><span>,</span>
      <span>"selector"</span><span>:</span> <span>"0x633aa551"</span>
    <span>}</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>Therefore, you can compare the <code>selector</code> field with the <code>selector</code> in the log to determine the part of the log corresponding to the current contract call issued through apps.</p>
</blockquote>
<h3 id="wasmi-panic-backtrace"> wasmi panic backtrace</h3>
<p>Suppose the method of writing a contract in <code>ink!</code> is as follows:</p>
<div><pre><code><span>#[ink(message)]</span>
<span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
    <span>let</span> from <span>=</span> <span>self</span><span>.</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>;</span>
    <span>self</span><span>.</span><span>transfer_from_to</span><span>(</span>from<span>,</span> to<span>,</span> value<span>)</span><span>?</span><span>;</span>
    <span>panic!</span><span>(</span><span>"123"</span><span>)</span><span>;</span>
    <span>Ok</span><span>(</span><span>(</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>When this method is called, EuropThe following log will be printed in a (please note that the current contract needs to use Patract's <code>cargo-contract</code> to print Wasm's Backtrace):</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span>index:5, error:17, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span>, orign: ErrorOrigin::Caller <span>}</span><span>}</span>
    caller: d43593c715fdd31c61141abd04a99fd6822<span>..</span>.<span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: b6484f58b7b939e93fff7dc10a654af7e<span>..</span><span>..</span> <span>(</span>5GBi41bY<span>..</span>.<span>)</span>,
    selector: 0xfae3a09d,
    args: 0x1cbd2d43530a44705ad088af313e18f80b5<span>..</span><span>..</span>,
    value: <span>0</span>,
    gas_limit: <span>409568000000</span>,
    gas_left: <span>369902872067</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x00000000000000000000000000000000<span>))</span>,
        seal_input<span>(</span>Some<span>(</span>0xfae3a09d1cbd<span>..</span><span>..</span>.<span>))</span>,
        seal_get_storage<span><span>((</span>Some<span>(</span><span>0x0100000000000</span>....<span>)</span><span>,</span> Some<span>(</span><span>0x010000000100000001000000</span><span>))</span></span><span>)</span>,
        <span># ...</span>
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd<span>..</span>.<span>))</span>,
        seal_hash_blake256<span><span>((</span>Some<span>(</span><span>0x696e6b20686173</span>....<span>)</span><span>,</span> Some<span>(</span><span>0x0873b31b7a3cf</span>....<span>))</span></span><span>)</span>,
      	<span># ...  </span>
        seal_deposit_event<span><span>((</span>Some<span>(</span>[<span>0x45726332303a</span>...<span>.00000000000</span>]<span>)</span><span>,</span> Some<span>(</span><span>0x000</span>..<span>))</span></span><span>)</span>,
    <span>]</span>,
	trap_reason: TrapReason::SupervisorError<span>(</span>DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span><span>)</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
        wasm backtrace: 
        <span>|</span>  core::panicking::panic<span>[</span><span>28</span><span>]</span>
        <span>|</span>  erc20::erc20::_::<span>&lt;</span>impl erc20::erc20::Erc2<span><span>0</span>></span>::transfer<span>[</span><span>1697</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::__ink_Msg<span>&lt;</span><span>[</span><span>(</span><span>)</span><span>;</span> <span>2644567034</span><span>]</span><span>></span> as ink_lang::traits::MessageMut<span>></span>::CALLABLE::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>611</span><span>]</span>
        <span>|</span>  core::ops::function::FnOnce::call_once<span>[</span><span>610</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute<span>></span>::execute::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>1675</span><span>]</span>
        <span>|</span>  ink_lang::dispatcher::execute_message_mut<span>[</span><span>1674</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute<span>></span>::execute<span>[</span><span>1692</span><span>]</span>
        <span>|</span>  erc20::erc20::_::<span>&lt;</span>impl ink_lang::contract::DispatchUsingMode <span>for</span> erc20::erc20::Erc2<span><span>0</span>></span>::dispatch_using_mode<span>[</span><span>1690</span><span>]</span>
        <span>|</span>  call<span>[</span><span>1691</span><span>]</span>
        ╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2387</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>From Europa's log, we can analyze the following calling process:</p>
<div><pre><code>call -<span>></span> dispatch_using_mode -<span>></span> <span>..</span>. -<span>></span> transfer -<span>></span> panic
</code></pre>
<div><span>1</span><br></div></div><p>Therefore, the contract developer can locate the cause of the panic because of the occurrence of the panic in the transfer function.</p>
<p>The above is a simple log analysis description, more special cases will be introduced in the following &quot;Examples&quot; chapter.</p>
<h2 id="custom-chainextensions"> Custom ChainExtensions</h2>
<h3 id="ink-logger"> ink logger</h3>
<p>Check <a href="https://github.com/patractlabs/ink-log" target="_blank" rel="noopener noreferrer">ink-log</a>.</p>
<h3 id="zkp-feature"> ZKP feature</h3>
<p>Check <a href="https://github.com/patractlabs/zkMega" target="_blank" rel="noopener noreferrer">zkMega</a>, related contract example <a href="https://github.com/patractlabs/metis/tree/master/groth16" target="_blank" rel="noopener noreferrer">metis/groth16</a>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa debugging example</title>
    <id>https://www.patract.io/en/europa/sample/</id>
    <link href="https://www.patract.io/en/europa/sample/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-debugging-example"> Europa debugging example</h1>
<h2 id="duplicate-topics"> Duplicate topics</h2>
<ol>
<li>
<p>checkout <code>ink!</code> to commit <code>8e8fe09565ca6d2fad7701d68ff13f12deda7eed</code></p>
<div><pre><code>$ <span>cd</span> ink
$ <span>git</span> checkout 8e8fe09565ca6d2fad7701d68ff13f12deda7eed -b tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>In <code>ink/examples/erc20/lib.rs:L90</code>, in the <code>Transfer</code> event, change the value to <code>0_u128</code></p>
<div><pre><code><span>#[ink(constructor)]</span>
<span>pub</span> <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
     <span>//...</span>
     <span>Self</span><span>::</span><span>env</span><span>(</span><span>)</span><span>.</span><span>emit_event</span><span>(</span><span>Transfer</span> <span>{</span>
        from<span>:</span> <span>None</span><span>,</span>
        to<span>:</span> <span>Some</span><span>(</span>caller<span>)</span><span>,</span>
        <span>// change this from `initial_supply` to `0_u128`</span>
        value<span>:</span> 0_u128<span>.</span><span>into</span><span>(</span><span>)</span> <span>// initial_supply,</span>
     <span>}</span><span>)</span><span>;</span>
     instance
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>Execute <code>cargo +nightly contract build --debug</code> to compile the contract</p>
</li>
<li>
<p>Use <a href="https://redspot.patract.io/en/tutorial/" target="_blank" rel="noopener noreferrer">RedSpot</a> or <a href="https://polkadot.js.org/apps" target="_blank" rel="noopener noreferrer"><code>Polkadot/Substrate Portal</code></a> to deploy the contract (note that this must be Use erc20.wasm instead of erc20-opt.wasm, otherwise the wasm backtrace cannot be printed normally)</p>
</li>
</ol>
<p>During the deployment process, you will encounter <code>DuplicateTopics</code>, the Europa log is as follows:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    <span>#...</span>
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0xd183512b0<span>))</span>,
		<span>#...    </span>
		seal_deposit_event<span><span>((</span>Some<span>(</span>[<span>0x45726332303a3a5472616e736</span>....]<span>)</span><span>,</span> None<span>))</span></span>,
    <span>]</span>,
    trap_reason: TrapReason::SupervisorError<span>(</span>DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>23</span>, message: Some<span>(</span><span>"DuplicateTopics"</span><span>)</span> <span>}</span><span>)</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Host<span>(</span>DummyHostError<span>)</span> <span>}</span><span>))</span>
    	wasm backtrace: 
    	<span>|</span>  ink_env::engine::on_chain::ext::deposit_event<span>[</span><span>1623</span><span>]</span>
    	<span>|</span>  ink_env::engine::on_chain::impls::<span>&lt;</span>impl ink_env::backend::TypedEnvBackend <span>for</span> ink_env::engine::on_chain::EnvInstance<span>></span>::emit_event<span>[</span><span>1564</span><span>]</span>
    	<span>|</span>  ink_env::api::emit_event::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>1563</span><span>]</span>
    	<span>|</span>  <span>&lt;</span>ink_env::engine::on_chain::EnvInstance as ink_env::engine::OnInstance<span>></span>::on_instance<span>[</span><span>1562</span><span>]</span>
    	<span>|</span>  ink_env::api::emit_event<span>[</span><span>1561</span><span>]</span>
    	<span>|</span>  erc20::erc20::_::<span>&lt;</span>impl ink_lang::events::EmitEvent<span>&lt;</span>erc20::erc20::Erc2<span><span>0</span>></span> <span>for</span> ink_lang::env_access::EnvAccess<span>&lt;&lt;</span>erc20::erc20::Erc20 as ink_lang::env_access::ContractEnv<span>></span>::Env<span>>></span>::emit_event<span>[</span><span>1685</span><span>]</span>
        <span># ...</span>
        <span># ...</span>
    	<span>|</span>  deploy<span>[</span><span>1691</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2385</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>In the log, you can find:</p>
<ol>
<li>The last record in <code>env_trace</code> is <code>seal_deposit_event</code> instead of <code>seal_return</code>. If the contract is executed normally, the last record should be <code>seal_return</code>.</li>
<li>The second parameter of <code>seal_deposit_event</code> is <code>None</code>, which means this host_function is not executed normally. <a href="https://github.com/patractlabs/substrate/blob/3624deb47cabe6f6cd44ec2c49c6ae5a29fd2198/frame/contracts/src/wasm/runtime.rs#L1399" target="_blank" rel="noopener noreferrer">Related Implementation</a>.</li>
<li>Combined with wasm backtrace, you can see that the top of the stack is <code>deposit_event</code>.</li>
</ol>
<p>In summary, it can be concluded that the error occurred in the host_function of <code>seal_deposit_event</code>.</p>
<h2 id="balance-types-are-inconsistent"> Balance types are inconsistent</h2>
<p>Assuming that the balance on the chain is defined as u64 and the Balance in <code>ink!</code> is defined as u128, an ordinary erc20 contract is deployed.</p>
<p>When reading <code>total_supply</code>, the log in Europa is as follows:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span>, origin: ErrorOrigin::Caller <span>}</span>,
    caller: 0000000000000000000000000000000000000000000000000000000000000000 <span>(</span>5C4hrfjw<span>..</span>.<span>)</span>,
    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 <span>(</span>5D9Wkfa3<span>..</span>.<span>)</span>,
    selector: 0xdb6375a8,
    args: None,
    value: <span>0</span>,
    gas_limit: <span>4999999999999</span>,
    gas_left: <span>4999865113466</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x0000000000000000<span>))</span>,
    <span>]</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
    	wasm backtrace:
    	<span>|</span>  core::panicking::panic_fmt.48<span>[</span><span>1956</span><span>]</span>
    	<span>|</span>  core::result::unwrap_failed<span>[</span><span>1057</span><span>]</span>
    	<span>|</span>  core::result::Result<span>&lt;</span>T,E<span>></span>::expect<span>[</span><span>1060</span><span>]</span>
    	<span>|</span>  ink_lang::dispatcher::deny_payment<span>[</span><span>1878</span><span>]</span>
    	<span>|</span>  call<span>[</span><span>1906</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2614</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>When calling <code>tranfer</code>, the log in Europa is as follows:</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span>, origin: ErrorOrigin::Caller <span>}</span>,
    caller: 0000000000000000000000000000000000000000000000000000000000000000 <span>(</span>5C4hrfjw<span>..</span>.<span>)</span>,
    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 <span>(</span>5D9Wkfa3<span>..</span>.<span>)</span>,
    selector: 0xdb6375a8,
    args: None,
    value: <span>0</span>,
    gas_limit: <span>4999999999999</span>,
    gas_left: <span>4999865113466</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x0000000000000000<span>))</span>,
    <span>]</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
    	wasm backtrace:
    	<span>|</span>  core::panicking::panic_fmt.48<span>[</span><span>1956</span><span>]</span>
    	<span>|</span>  core::result::unwrap_failed<span>[</span><span>1057</span><span>]</span>
    	<span>|</span>  core::result::Result<span>&lt;</span>T,E<span>></span>::expect<span>[</span><span>1060</span><span>]</span>
    	<span>|</span>  ink_lang::dispatcher::deny_payment<span>[</span><span>1878</span><span>]</span>
    	<span>|</span>  call<span>[</span><span>1906</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2614</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>It can be found that whether it is a read or write operation, there will be a call process such as <code>call -&gt; deny_payment -&gt; expect</code>. The reason is that in <code>ink!</code>, there is the following code:</p>
<div><pre><code><span>#[no_mangle]</span>
<span>fn</span> <span>call</span><span>(</span><span>)</span> <span>-></span> <span>u32</span> <span>{</span>
    <span>if</span> <span>true</span> <span>{</span>
     <span>::</span><span>ink_lang<span>::</span></span><span>deny_payment</span><span>::</span><span>&lt;&lt;</span><span>Erc20</span> <span>as</span> <span>::</span><span>ink_lang<span>::</span></span><span>ContractEnv</span><span>></span><span>::</span><span>Env</span><span>></span><span>(</span><span>)</span>
    		<span>.</span><span>expect</span><span>(</span><span>"caller transferred value even though all ink! message deny payments"</span><span>)</span>
    <span>}</span>
    <span>::</span><span>ink_lang<span>::</span></span><span>DispatchRetCode</span><span>::</span><span>from</span><span>(</span>
        <span>&lt;</span><span>Erc20</span> <span>as</span> <span>::</span><span>ink_lang<span>::</span></span><span>DispatchUsingMode</span><span>></span><span>::</span><span>dispatch_using_mode</span><span>(</span>
            <span>::</span><span>ink_lang<span>::</span></span><span>DispatchMode</span><span>::</span><span>Call</span><span>,</span>
        <span>)</span><span>,</span>
    <span>)</span>
    <span>.</span><span>to_u32</span><span>(</span><span>)</span>
<span>}</span>

<span>pub</span> <span>fn</span> <span>deny_payment</span><span>&lt;</span><span>E</span><span>></span><span>(</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span>
<span>where</span>
    <span>E</span><span>:</span> <span>Environment</span><span>,</span>
<span>{</span>
    <span>let</span> transferred <span>=</span> <span>ink_env<span>::</span></span><span>transferred_balance</span><span>::</span><span>&lt;</span><span>E</span><span>></span><span>(</span><span>)</span>
        <span>.</span><span>expect</span><span>(</span><span>"encountered error while querying transferred balance"</span><span>)</span><span>;</span>
    <span>if</span> transferred <span>!=</span> <span>&lt;</span><span>E</span> <span>as</span> <span>Environment</span><span>></span><span>::</span><span>Balance</span><span>::</span><span>from</span><span>(</span><span>0u32</span><span>)</span> <span>{</span>
        <span>return</span> <span>Err</span><span>(</span><span>DispatchError</span><span>::</span><span>PaidUnpayableMessage</span><span>)</span>
    <span>}</span>
    <span>Ok</span><span>(</span><span>(</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>In <code>ink!</code>, the timing of <code>expect</code> is different for <code>off_chain</code> and <code>on_chain</code>. In <code>off_chain</code>, it is because <code>ink_env::transferred_balance::&lt;E&gt;()</code> cannot be decoded correctly. In <code>on_chain</code>, <code>deny_payment</code> returns Error due to <code>transferred!=0</code>, and <code>expect</code> appears in <code>call</code>.</p>
<p>It can be seen that the current <code>ink!</code> in <code>off_chain</code> and <code>on_chain</code> is not exactly the same for some situations, causing debugging troubles.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa Wasm executor</title>
    <id>https://www.patract.io/en/europa/wasm_executor/</id>
    <link href="https://www.patract.io/en/europa/wasm_executor/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-wasm-executor"> Europa Wasm executor</h1>
<p>TODO: Not completed</p>
<p>Europa offers different Wasm actuators to execute contracts. Currently <code>wasmi</code> and <code>wasmtime</code> are provided.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">go-patract</title>
    <id>https://www.patract.io/en/himalia/go-patract/</id>
    <link href="https://www.patract.io/en/himalia/go-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="go-patract"> go-patract</h1>
<h2 id="intruduction"> Intruduction</h2>
<p>Most contract behaviors are highly related to context. In addition to interacting with the chain, user-oriented contract applications also need to provide users with current relevant context status information:</p>
<div><pre><code>+--DAPP-Front-End--------------+        +---Chain-------------------------+
|                              |        |                                 |
| +----+  +------------------+ |        | +-------+     +-------+         |
| |    |  |                  | | Commit | |       |     |       |         |
| |    |  |   Polkadot-JS    +------------&gt; Node  +----&gt;+ Node  |         |
| |    +-&gt;+                  | |   Tx   | |       |     |       |         |
| |    |  |                  | |        | +-------+     +----+-++         |
| |    |  +------------------+ |        |                    ^ |          |
| | UI |                       |        +---------------------------------+
| |    |  +------------------+ |                             | |
| |    |  |                  | |        +--DAPP-Server--------------------+
| |    |  |                  | |  Push  | +--------+     +-----v-------+  |
| |    +&lt;-+   Model          +&lt;-----------+        +-----+             |  |
| |    |  |                  | |        | | Server |     |  PatractGo  |  |
| |    |  |                  +------------&gt;        +-----+             |  |
| +----+  +------------------+ | Query  | +----+---+     +-----+-------+  |
+------------------------------+        |      |               |          |
                                        |      |         +-----v-------+  |
                                        |      |         |             |  |
                                        |      +--------&gt;+   DataBase  |  |
                                        |                |             |  |
                                        |                +-------------+  |
                                        |                                 |
                                        +---------------------------------+
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>PatractGo is mainly responsible for implementing micro-services in a DApp. Unlike querying the state of the chain API, PatractGo can monitor the calls and events generated by the specified contract. Developers can obtain the state storage based on this information to maintain consistent state with the chain. Through data services based on a typical API-DB architecture, the front-end DApp can efficiently and concisely obtain the state on the chain as context information.</p>
<p>Based on the API of chain nodes, PatractGo obtains block information and summarizes and filters it, and sends contract-related messages and events based on metadata analysis to the handler protocol specified by the developer. For example, for a typical ERC20 contract, the developer can use the channel to subscribe to all transfer events that occur, and then synchronize them into the database, so that other microservices can provide services corresponding to the token data of the account, such as querying the current token holding distribution and other logics.</p>
<p>Therefor, PatractGo will achieve the following support:</p>
<ul>
<li>Complete the secondary packaging of the contract module interface, complete operations such as <code>put_code</code>, <code>call</code>, <code>instantiate</code>, etc.</li>
<li>Parse the metadata.json information of the contract, and support the automatic generation of http service interface for the metadata corresponding contract</li>
<li>Scanning and monitoring support of the contract status on the chain for statistics and analysis</li>
<li>Basic command line tool support for native interaction with the contract, mainly used to test the security of the contract</li>
<li>SDK development examples for ERC20 contract support</li>
</ul>
<h2 id="design"> Design</h2>
<p>PatractGo consists of the following packages:</p>
<ul>
<li><code>patractgo/metadata</code> contract metadata processing, and metadata-based contract processing</li>
<li><code>patractgo/rpc/native</code> re-encapsulation of the contract module interface to provide the contract-related interaction based on chain RPC</li>
<li><code>patractgo/rpc</code> implement the interaction with the contract based on metadata</li>
<li><code>patractgo/rest</code> implements an http service based on metadata to interact with the contract</li>
<li><code>patractgo/observer</code> Monitoring and Scanning support for contract status on the chain</li>
<li><code>patractgo/contracts/erc20</code> supports ERC20 contracts and examples</li>
<li><code>patractgo/tools</code> some tools for contracts develop</li>
</ul>
<p>Currently, we haven't designed the module which could <strong>auto-gen code</strong> for a contract based on a metadata, thus we provide
<code>patractgo/contracts/erc20</code> as an example to show how to warp a contract as a go source file.</p>
<p>This <strong>auto contract code generator</strong> feature would be developed with <code>java-patract</code> repo later (in next version), <strong>for their have same logic to generate the code for contracts</strong>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Himalia</title>
    <id>https://www.patract.io/en/himalia/introduction/</id>
    <link href="https://www.patract.io/en/himalia/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="himalia"> Himalia</h1>
<p>Himalia is the general name of the SDK library of the pallet-contracts contract module built by Patract for a series of access chains in different languages. For Substrate, there are already some SDKs for access chains in different languages. However, due to the particularity of the <code>pallet-contracts</code> module, it is necessary to continue to build an SDK based on the access contract module on the SDK of the access chain. Its particularity is mainly manifested in:</p>
<ul>
<li>The deployment and invocation of the contract (including rpc invocation and transaction invocation) need to be based on the order and coding of the information provided by the contract's metadata.json (similar to Solidity's abi file), and the chain's metadata can only inform the chain's SDK There are methods such as <code>instantiate</code> and <code>call</code> of the contract module on this chain, and it is impossible to inform the call parameter information of a certain contract. Therefore, for contracts, it is necessary to build a function that can parse and support contract metadata.</li>
<li>The event of the contract also needs to be parsed according to the metadata.json of the contract. Therefore, if you use the chain's SDK, you can only monitor the event of the contract module, but you cannot parse the content of the event. Therefore, it is necessary to provide the sdk of the contract to support event monitoring.</li>
<li>The state (storage) of the contract is located in the subtree, and its key encoding and distribution method are inconsistent with the runtime. The code distribution method of the key stored in the contract is related to the contract language framework used by the contract (for example, the implementation of Ask! may be different from ink!), so it is necessary to implement corresponding storage analysis methods for different contract language frameworks. At the same time, this parsing process is also very dependent on the metadata provided by the contract itself.</li>
<li>The developers of the contract are the majority of the project parties, and most of the chain developers are the project parties of the development chain. Therefore, there will be a big difference in the scenario of managing the private key. In many cases, the private key management related to chain high authority is the node itself, which is relatively small and has a high threshold, or in many cases it relies on multi-signature or voting control. However, there are a wide range of contract developers, and the quality of back-end security management is uneven. On the other hand, many contracts only have a private key to control. Therefore, in the invocation of contract modules, a solution with high security and low threshold is needed in terms of private key management. Therefore, the contract SDK can do special processing in these scenarios to reduce the threshold for the security management of contract developers.</li>
</ul>
<p>Therefore, Himalia has a very important reason for existence. Himalia's positioning is similar to Web3J, Web3py, etc. in the Ethereum ecosystem.</p>
<h2 id="project-warehouse-address"> Project warehouse address</h2>
<p>The contract SDKs in different languages ​​currently provided by Himalia have the following versions:</p>
<ul>
<li>go: https://github.com/patractlabs/go-patract</li>
<li>python: https://github.com/patractlabs/py-patract</li>
<li>java: Not yet implemented</li>
<li>c#(.net): Not yet implemented</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">py-patract</title>
    <id>https://www.patract.io/en/himalia/py-patract/</id>
    <link href="https://www.patract.io/en/himalia/py-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="py-patract"> py-patract</h1>
<p>PatractPy is a contract SDK to support the development of Python scripts that interact with contracts, including automated scripts to support testing. Unlike PatractGo, PatractPy is mainly for script development, so PatractPy mainly completes contract-related RPC interfaces, and completes contract deployment and instantiation-related operations.</p>
<p>PatractPy will provide support for <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a> env, which is a good environment for contract exec sandbox,
With PatractPy, we can write contract unittest by python, which is more friendly to developer and can easy use other test tools.</p>
<p>PatractPy will be based on <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a>, which is a Python sdk for Substrate.</p>
<p>Element Group for disscusion: https://app.element.io/#/room/#PatractLabsDev:matrix.org</p>
<p>PatractPy will achieve the following support:</p>
<ul>
<li>Some support that missing in <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a>, which is needed for contracts</li>
<li>Provide Scanning and monitoring support for contract to do statistics and analysis</li>
<li>Provide a SDK development example for ERC20 contract</li>
<li>Support For unittest to canvas or <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a> env.</li>
</ul>
<h2 id="basic-apis-for-contracts"> Basic Apis For Contracts</h2>
<p>As <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a> has provide some support to contract api, so we not need to important the api for contract calls, but there is some api to add:</p>
<ul>
<li><code>SubstrateSubscriber</code> is a subscriber support to subscribe data changes in chain, for example, the events in chain.</li>
<li><code>get_contract_event_type</code> add event decode support for contracts.</li>
</ul>
<p>The basic api split into 2 parts:</p>
<ul>
<li>Contract, include:
<ul>
<li>contractExecutor: This api could construct an extrinsic to call a contract, would be packed into a block and change state.</li>
<li>contractReader: This api could construct a rpc request to call a contract, do not pack into a block and do not change any state.</li>
<li>contractCreator: This api is used for <code>instantiate</code> a contract and holding the WASM code and metadata, receive following parameters:
<ul>
<li><code>gas_limit</code></li>
<li><code>endowment</code></li>
<li><code>deployment_salt</code> (<code>salt</code> parameter in <code>instantiate</code>)</li>
</ul>
</li>
<li>ContractAPI: This api is used for <code>call</code> a contract, is a wrapper for <code>contractExecutor</code> and <code>contractReader</code>, developers could use this api to react with contracts. This api could create a instance depends on the metadata, auto generate the contract access functions based on the contract. And the auto-gen functions receive the parameters which defined in contracts, besides receive following common parameters:
<ul>
<li><code>gas_limit</code></li>
<li><code>value</code> (notice, if current call's <code>payable</code> is false, this <code>value</code> must be <code>0</code>)</li>
</ul>
</li>
<li>ContractFactory: This api is used for constructing a contract instance in python, and developer could use this instance to access contract. This is a wrapper for <code>contractCreator</code> and <code>ContractAPI</code></li>
</ul>
</li>
<li>Observer, include:
<ul>
<li>ContractObserver: This api is used for listen the events in contracts.</li>
</ul>
</li>
</ul>
<p>All methods which belong to the instance of <code>ContractAPI</code> and <code>ContractFactory</code> <strong>receive a keypair as the first parameter</strong>, as the sender for this operation. And from the second parameter, receive the parameters defined in contracts.</p>
<h3 id="contractfactory-and-contractapi-is-used-to-react-with-contracts"> <code>ContractFactory</code> and <code>ContractAPI</code> is used to react with contracts</h3>
<p>we add a factory to put code and deploy contracts to chain:</p>
<div><pre><code>factory <span>=</span> ContractFactory<span>.</span>create_from_file<span>(</span>
    substrate<span>=</span>substrate<span>,</span> 
    code_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

res <span>=</span> factory<span>.</span>put_code<span>(</span>alice<span>)</span> <span># alice is the keypair for `//Alice`</span>
<span>print</span><span>(</span>res<span>.</span>is_succes<span>)</span>

<span># this api is `ContractAPI`</span>
api <span>=</span> factory<span>.</span>new<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>,</span> endowment<span>=</span><span>10</span><span>**</span><span>15</span><span>,</span> gas_limit<span>=</span><span>1000000000000</span><span>)</span>
<span>print</span><span>(</span>api<span>.</span>contract_address<span>)</span> <span># contract_address is the deployed contract</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>The factory will generate constructors from metadata file.</p>
<p>We add api by metadata for Contract, api will auto generate caller for contract from metadata:</p>
<div><pre><code><span># create a ContractAPI from an existed contract address</span>
api <span>=</span> ContractAPI<span>(</span>contract_address<span>,</span> contract_metadata<span>,</span> substrate<span>)</span>

<span># api will auto generate caller for contract from metadata</span>
alice_balance_old <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> alice<span>.</span>ss58_address<span>)</span> <span># bob is the keypair for `//Bob`</span>

res <span>=</span> api<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>100000</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer res </span><span><span>{</span>res<span>.</span>error_message<span>}</span></span><span>'</span></span><span>)</span>
<span>print</span><span>(</span>res<span>.</span>is_succes<span>)</span>

alice_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> alice<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer alice_balance </span><span><span>{</span>alice_balance<span>}</span></span><span>'</span></span><span>)</span>

bob_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> bob<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer bob_balance </span><span><span>{</span>bob_balance<span>}</span></span><span>'</span></span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>The api will generate exec and read api from metadata file, for example:</p>
<div><pre><code>      <span>{</span>
        <span>"args"</span><span>:</span> <span>[</span>
          <span>{</span>
            <span>"name"</span><span>:</span> <span>"owner"</span><span>,</span>
            <span>"type"</span><span>:</span> <span>{</span>
              <span>"displayName"</span><span>:</span> <span>[</span>
                <span>"AccountId"</span>
              <span>]</span><span>,</span>
              <span>"type"</span><span>:</span> <span>5</span>
            <span>}</span>
          <span>}</span>
        <span>]</span><span>,</span>
        <span>"docs"</span><span>:</span> <span>[</span>
          <span>" Returns the account balance for the specified `owner`."</span><span>,</span>
          <span>""</span><span>,</span>
          <span>" Returns `0` if the account is non-existent."</span>
        <span>]</span><span>,</span>
        <span>"mutates"</span><span>:</span> <span>false</span><span>,</span>
        <span>"name"</span><span>:</span> <span>[</span>
          <span>"balance_of"</span>
        <span>]</span><span>,</span>
        <span>"payable"</span><span>:</span> <span>false</span><span>,</span>
        <span>"returnType"</span><span>:</span> <span>{</span>
          <span>"displayName"</span><span>:</span> <span>[</span>
            <span>"Balance"</span>
          <span>]</span><span>,</span>
          <span>"type"</span><span>:</span> <span>1</span>
        <span>}</span><span>,</span>
        <span>"selector"</span><span>:</span> <span>"0x56e929b2"</span>
      <span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>In api, can call by:</p>
<div><pre><code>bob_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> bob<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer bob_balance </span><span><span>{</span>bob_balance<span>}</span></span><span>'</span></span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="contractobserver-is-used-to-listen-contracts-events"> <code>ContractObserver</code> is used to listen contracts events</h3>
<p>ContractObserver can observer events for a contract:</p>
<div><pre><code>substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>"ws://127.0.0.1:9944"</span><span>,</span> type_registry_preset<span>=</span><span>'canvas'</span><span>)</span>
contract_metadata <span>=</span> ContractMetadata<span>.</span>create_from_file<span>(</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span><span>,</span>
    substrate<span>=</span>substrate
<span>)</span>
observer <span>=</span> ContractObserver<span>(</span><span>"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48"</span><span>,</span> contract_metadata<span>,</span> substrate<span>)</span>

<span># for some handlers (callbacks)</span>
observer<span>.</span>scanEvents<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>The handler function can take the erc20 support as a example.</p>
<h2 id="special-case-erc20-api"> Special case: ERC20 API</h2>
<p>Except react contract by <code>ContractAPI</code>, developers could create the wrapper by themself to react with corresponding contract. <code>py-contract</code> create an <code>ERC20 API</code> as an example to show this.</p>
<p>ERC20 api provide a wapper to erc20 contract exec, read and observer events, it can be a example for contracts api calling.</p>
<div><pre><code>
<span># init api</span>
substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>"ws://127.0.0.1:9944"</span><span>,</span> type_registry_preset<span>=</span><span>'canvas'</span><span>)</span>

contract_metadata <span>=</span> ContractMetadata<span>.</span>create_from_file<span>(</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span><span>,</span>
    substrate<span>=</span>substrate
<span>)</span>

alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>

<span># erc20 api</span>
erc20 <span>=</span> ERC20<span>.</span>create_from_contracts<span>(</span>
    substrate<span>=</span> substrate<span>,</span> 
    contract_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span># deplay a erc20 contract</span>
erc20<span>.</span>put_and_deploy<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>)</span>

<span># read total supply</span>
total_supply <span>=</span> erc20<span>.</span>totalSupply<span>(</span><span>)</span>

<span># transfer</span>
erc20<span>.</span>transfer_from<span>(</span>alice<span>,</span>
    from_acc<span>=</span>alice<span>.</span>ss58_address<span>,</span> 
    to_acc<span>=</span>bob<span>.</span>ss58_address<span>,</span> 
    amt<span>=</span><span>10000</span><span>)</span>

erc20<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>10000</span><span>)</span>

<span># get balance</span>
alice_balance <span>=</span> erc20<span>.</span>balance_of<span>(</span>alice<span>.</span>ss58_address<span>)</span>

<span># approve</span>
erc20<span>.</span>approve<span>(</span>alice<span>,</span> spender<span>=</span>bob<span>.</span>ss58_address<span>,</span> amt<span>=</span><span>10000</span><span>)</span>

<span># get allowance</span>
alice_allowance <span>=</span> erc20<span>.</span>allowance<span>(</span>alice<span>.</span>ss58_address<span>,</span> bob<span>.</span>ss58_address<span>)</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p><code>ERC20Observer</code> is a event observer for erc20 contract:</p>
<div><pre><code>observer <span>=</span> ERC20Observer<span>.</span>create_from_address<span>(</span>
    substrate <span>=</span> substrate<span>,</span> 
    contract_address <span>=</span> contract_address<span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

<span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>


observer<span>.</span>scanEvents<span>(</span>on_transfer <span>=</span> on_transfer<span>,</span> on_approval <span>=</span> on_approval<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="observer-for-contracts"> Observer For Contracts</h3>
<p><code>ContractObserver</code> is a observer to listen events by contract with a given address:</p>
<div><pre><code>observer <span>=</span> ContractObserver<span>.</span>create_from_address<span>(</span>
    substrate <span>=</span> substrate<span>,</span> 
    contract_address <span>=</span> <span>'contract_address'</span><span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

<span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

observer<span>.</span>scanEvents<span>(</span>from_num<span>,</span> to_num<span>,</span> <span>{</span>
    <span>'Transfer'</span><span>:</span> on_transfer<span>,</span>
    <span>'Approve'</span><span>:</span> on_approval
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>handlers</code> is a hander dictionary by name to hander function.</p>
<h2 id="unittest-node-environment"> Unittest Node Environment</h2>
<p>PatractPy can support write contract unittest by node environment.</p>
<p>At First We need install <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a>.</p>
<div><pre><code><span>from</span> patractinterface<span>.</span>contracts<span>.</span>erc20 <span>import</span> ERC20
<span>from</span> patractinterface<span>.</span>unittest<span>.</span>env <span>import</span> SubstrateTestEnv

<span>class</span> <span>UnittestEnvTest</span><span>(</span>unittest<span>.</span>TestCase<span>)</span><span>:</span>
    <span>@classmethod</span>
    <span>def</span> <span>setUp</span><span>(</span>cls<span>)</span><span>:</span>
        <span># start env or use canvas for a 6s block</span>
        cls<span>.</span>env <span>=</span> SubstrateTestEnv<span>.</span>create_europa<span>(</span>port<span>=</span><span>39944</span><span>)</span>
        cls<span>.</span>env<span>.</span>start_node<span>(</span><span>)</span>

        cls<span>.</span>api <span>=</span> SubstrateInterface<span>(</span>url<span>=</span>cls<span>.</span>env<span>.</span>url<span>(</span><span>)</span><span>,</span> type_registry_preset<span>=</span>cls<span>.</span>env<span>.</span>typ<span>(</span><span>)</span><span>,</span> type_registry<span>=</span>cls<span>.</span>env<span>.</span>types<span>(</span><span>)</span><span>)</span>
        cls<span>.</span>alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
        cls<span>.</span>bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>

        cls<span>.</span>erc20 <span>=</span> ERC20<span>.</span>create_from_contracts<span>(</span>
            substrate<span>=</span> cls<span>.</span>substrate<span>,</span> 
            contract_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
            metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
        <span>)</span>
        cls<span>.</span>erc20<span>.</span>put_and_deploy<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>)</span>

        <span>return</span>

    <span>def</span> <span>tearDown</span><span>(</span>cls<span>)</span><span>:</span>
        cls<span>.</span>env<span>.</span>stop_node<span>(</span><span>)</span>

    <span>def</span> <span>test_transfer</span><span>(</span>self<span>)</span><span>:</span>
        self<span>.</span>erc20<span>.</span>transfer_from<span>(</span>alice<span>,</span>
            from_acc<span>=</span>alice<span>.</span>ss58_address<span>,</span> 
            to_acc<span>=</span>bob<span>.</span>ss58_address<span>,</span> 
            amt<span>=</span><span>10000</span><span>)</span>
        <span># some more test case</span>

<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>
    unittest<span>.</span>main<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>By example, we can use python to write testcase for some complex logics, by <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a>, we can test the contracts for python scripts.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/en/himalia/tutorial/</id>
    <link href="https://www.patract.io/en/himalia/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<p>The SDK used by Himalia to interact with the contract part of the chain needs to start a node before proceeding with the subsequent execution process.</p>
<p>For nodes with <code>pallet-contracts</code> function, we recommend Europa as an alternative to nodes. For more information, please refer to Europa's <a href="./europa.html">Document</a>.</p>
<p>Europa can be easily installed and used with the following commands:</p>
<div><pre><code><span>git</span> <span>install</span> --recurse-submodules https://github.com/patractlabs/europa.git --force --locked
europa --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>On the other hand, you can also use Patract’s testnet <a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">Jupiter</a>, or the contract testnet provided by Parity [Canvas-node](https://github.com/paritytech/ canvas-node.git)</p>
<h2 id="go"> go</h2>
<p>PatractGo relies on <a href="https://github.com/centrifuge/go-substrate-rpc-client" target="_blank" rel="noopener noreferrer">GSRPC</a>. The Go version of Himalia project is called <a href="https://github.com/patractlabs/go-patract" target="_blank" rel="noopener noreferrer">go-patract</a></p>
<p>After installing PatractGo, you can use the following methods to quickly deploy and call a contract. For the complete case, please refer to <a href="https://github.com/patractlabs/go-patract/blob/master/contracts/erc20/transfer_test.go" target="_blank" rel="noopener noreferrer">transfer_test</a></p>
<h3 id="deploy-the-contract"> Deploy the contract</h3>
<div><pre><code><span>// read the code wasm from file</span>
codeBytes<span>,</span> err <span>:=</span> ioutil<span>.</span><span>ReadFile</span><span>(</span><span>"/path/to/contracts.wasm"</span><span>)</span>
<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> err
<span>}</span>
<span>// create the api</span>
cApi<span>,</span> err <span>:=</span> rpc<span>.</span><span>NewContractAPI</span><span>(</span>env<span>.</span><span>URL</span><span>(</span><span>)</span><span>)</span>

<span>// read the abi(metadata) for contract</span>
metaBz<span>,</span> err <span>:=</span> ioutil<span>.</span><span>ReadFile</span><span>(</span><span>"/path/to/contracts_metadata.json"</span><span>)</span>
cApi<span>.</span><span>WithMetaData</span><span>(</span>metaBz<span>)</span>

<span>// create context with from auth, like Alice</span>
ctx <span>:=</span> api<span>.</span><span>NewCtx</span><span>(</span>context<span>.</span><span>Background</span><span>(</span><span>)</span><span>)</span><span>.</span><span>WithFrom</span><span>(</span>authKey<span>)</span>

<span>// put code</span>
<span>_</span><span>,</span> err <span>=</span> cApi<span>.</span><span>Native</span><span>(</span><span>)</span><span>.</span><span>PutCode</span><span>(</span>ctx<span>,</span> codeBytes<span>)</span>

codeHash <span>:=</span> <span>readCodeHash</span><span>(</span><span>)</span> <span>// get code hash</span>

<span>var</span> codeBz <span>[</span><span>]</span><span>byte</span>

<span>if</span> err <span>:=</span> cApi<span>.</span><span>Native</span><span>(</span><span>)</span><span>.</span>Cli<span>.</span><span>GetStorageLatest</span><span>(</span><span>&amp;</span>codeBz<span>,</span>
    <span>"Contracts"</span><span>,</span> <span>"PristineCode"</span><span>,</span>
    <span>[</span><span>]</span><span>byte</span><span>(</span>codeHash<span>)</span><span>,</span> <span>nil</span><span>)</span><span>;</span> err <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> err
    <span>}</span>

<span>var</span> endowment <span>uint64</span> <span>=</span> <span>1000000000000</span>

<span>// Instantiate</span>
<span>_</span><span>,</span> contractAccount<span>,</span> err <span>:=</span> cApi<span>.</span><span>Instantiate</span><span>(</span>ctx<span>,</span>
    types<span>.</span><span>NewCompactBalance</span><span>(</span>endowment<span>)</span><span>,</span>
    types<span>.</span><span>NewCompactGas</span><span>(</span>test<span>.</span>DefaultGas<span>)</span><span>,</span>
    contracts<span>.</span>CodeHashERC20<span>,</span>
    types<span>.</span><span>NewU128</span><span>(</span>totalSupply<span>)</span><span>,</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h3 id="call-contract"> Call contract</h3>
<h4 id="rpc-call"> rpc call</h4>
<p>Call <code>total_supply</code> to get the current total supply.</p>
<div><pre><code><span>var</span> res types<span>.</span>U128

err <span>:=</span> a<span>.</span><span>CallToRead</span><span>(</span>ctx<span>,</span>
    <span>&amp;</span>res<span>,</span>
    a<span>.</span>ContractAccountID<span>,</span>
    <span>[</span><span>]</span><span>string</span><span>{</span><span>"total_supply"</span><span>}</span><span>,</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id="transaction-call"> Transaction call</h4>
<p>Call <code>transfer</code> to transfer a fund.</p>
<div><pre><code>toParam <span>:=</span> <span>struct</span> <span>{</span>
    Address AccountID
<span>}</span><span>{</span>
    Address<span>:</span> to<span>,</span>
<span>}</span>

valueParam <span>:=</span> <span>struct</span> <span>{</span>
    Value U128
<span>}</span><span>{</span>
    Value<span>:</span> amt<span>,</span>
<span>}</span>

<span>return</span> a<span>.</span><span>CallToExec</span><span>(</span>ctx<span>,</span>
    a<span>.</span>ContractAccountID<span>,</span>
    types<span>.</span><span>NewCompactBalance</span><span>(</span><span>0</span><span>)</span><span>,</span>
    types<span>.</span><span>NewCompactGas</span><span>(</span>test<span>.</span>DefaultGas<span>)</span><span>,</span>
    <span>[</span><span>]</span><span>string</span><span>{</span><span>"transfer"</span><span>}</span><span>,</span>
    toParam<span>,</span> valueParam<span>,</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="python"> python</h2>
<p>PatractPy relies on <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">py-substrate-interface</a> The Python version of the Himalia project is called [py-patract](https://github.com/patractlabs/py -patract)</p>
<h3 id="installation"> Installation</h3>
<div><pre><code>pip3 <span>install</span> -U patract-interface
</code></pre>
<div><span>1</span><br></div></div><p>Can be used in python script</p>
<div><pre><code>from patractinterface <span>import</span> ContractFactory, ContractAPI

// <span>..</span>. So something <span>..</span>.
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="quick-use"> Quick use</h3>
<div><pre><code><span>import</span> os
<span>from</span> substrateinterface <span>import</span> SubstrateInterface<span>,</span> Keypair
<span>from</span> patractinterface<span>.</span>contract <span>import</span> ContractAPI<span>,</span> ContractFactory
<span>from</span> patractinterface<span>.</span>observer <span>import</span> ContractObserver

<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>
    <span># use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.</span>
    substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>'ws://127.0.0.1:9944'</span><span>,</span> type_registry_preset<span>=</span><span>"default"</span><span>,</span> type_registry<span>=</span><span>{</span><span>'types'</span><span>:</span> <span>{</span><span>'LookupSource'</span><span>:</span> <span>'MultiAddress'</span><span>}</span><span>}</span><span>)</span>
    <span># load deployer key</span>
    alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
    bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>
    <span># 1. load a contract from WASM file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))</span>
    <span># in this example, we use `ink/example/erc20` contract as example.</span>
    contract <span>=</span> ContractFactory<span>.</span>create_from_file<span>(</span>
            substrate<span>=</span>substrate<span>,</span> <span># should provide a subtrate endpoint</span>
            code_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'res'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
            metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'res'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
        <span>)</span>
    <span># upload code to chain directly</span>
    res <span>=</span> contract<span>.</span>put_code<span>(</span>alice<span>)</span>
    <span>print</span><span>(</span><span>"update code hash{} res:{}"</span><span>.</span><span>format</span><span>(</span>contract<span>.</span>code_hash<span>.</span><span>hex</span><span>(</span><span>)</span><span>,</span> res<span>.</span>is_succes<span>)</span><span>)</span>
    <span># 2. instantiate the uploaded code as a contract instance</span>
    erc20_ins <span>=</span> contract<span>.</span>new<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>,</span> endowment<span>=</span><span>2</span><span>*</span><span>10</span><span>**</span><span>10</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>,</span> deployment_salt<span>=</span><span>"0x12"</span><span>)</span>
    <span># 2.1 create a observer to listen event</span>
    observer <span>=</span> ContractObserver<span>(</span>erc20_ins<span>.</span>contract_address<span>,</span> erc20_ins<span>.</span>metadata<span>,</span> substrate<span>)</span>
    <span># 3. send a transfer call for this contract</span>
    res <span>=</span> erc20_ins<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>100000</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>)</span>
    <span>print</span><span>(</span><span>'transfer res'</span><span>,</span> res<span>.</span>is_succes<span>)</span>

    <span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
        <span>print</span><span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

    <span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
        <span>print</span><span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>
    <span># 4 set event callback </span>
    observer<span>.</span>scanEvents<span>(</span>handlers<span>=</span><span>{</span>
        <span>'Transfer'</span><span>:</span> on_transfer<span>,</span>
        <span>'Approve'</span><span>:</span> on_approval
    <span>}</span><span>)</span>

<span>if</span> __name__ <span>==</span> <span>"__main__"</span><span>:</span>
    main<span>(</span><span>)</span>
    <span>pass</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 跨合约调用</title>
    <id>https://www.patract.io/en/ink/call-contracts/</id>
    <link href="https://www.patract.io/en/ink/call-contracts/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-跨合约调用"> ink! 跨合约调用</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">cargo-contract</title>
    <id>https://www.patract.io/en/ink/cargo-contract/</id>
    <link href="https://www.patract.io/en/ink/cargo-contract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="cargo-contract"> cargo-contract</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! eDSL basic elements</title>
    <id>https://www.patract.io/en/ink/edsl-basic/</id>
    <link href="https://www.patract.io/en/ink/edsl-basic/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-edsl-basic-elements"> ink! eDSL basic elements</h1>
<p>The elements of ink! eDSL design are actually relatively similar to those of Solidity, because the contract model structure of Contracts Pallet and the contract model of EVM are relatively similar.</p>
<p>Therefore, the design of ink! can find a lot of shadows similar to Solidity (the same applies to the Runtime design of Substrate). When describing the ink characteristics later, I will try to compare with the characteristics of Solidity, which is convenient for readers to understand.</p>
<h2 id="elements-of-edsl"> Elements of eDSL</h2>
<p>From the example provided by ink! documentation or ink!, the code shows that ink! also proposes the following three basic elements on the Contracts Pallet model:</p>
<ul>
<li><code>constructor</code>/<code>message</code></li>
<li><code>storage</code></li>
<li><code>event</code></li>
</ul>
<p>However, due to the design relationship of the Rust process macro, you can see that ink! First requires a contract to be under a <code>mod</code>, and add the <code>#[ink::contract]</code> macro to this <code>mod</code>:</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>In this way, it is equivalent to telling ink! What is in this mod is to be processed according to the eDSL of ink.</p>
<h3 id="ink-contract"> <code>#[ink::contract]</code></h3>
<p>Therefore, when you encounter the macro <code>#[ink::contract]</code>, it appears that this is the &quot;contract part&quot; identified by ink!. Therefore, we can see that many imports of <code>use xxx</code> will be placed under the scope of <code>mod</code> in <code>#[ink::contract]</code>.</p>
<p>And the current ink! design is that, under a <code>crate</code> package, only one <code>#[ink::contract]</code> can appear, so it means that ink! thinks that the dimension of a contract is based on rust's <code>crate</code>, that is If in the same <code>crate</code>, whether in the same file (for example, under <code>lib.rs</code>) or in different files, more than two are defined by <code>#[ink::contract]</code> The <code>mod</code>, for example:</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    // ...
}

#[ink::contract]
mod another_define {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>Analogous to solidity:</p>
<div><pre><code>// a.sol defines multiple `contract` in the same file
contract A {

}
contract B {

}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Then in the compilation of ink!, this situation will be considered illegal.</p>
<p>Of course, as opposed to this, as long as there is only one <code>mod</code> modified by <code>#[ink::contract]</code> in the current <code>crate</code>, other <code>mod</code>s should be used normally, so the contract modified by ink! <code>crate</code> can still do a good job of code isolation, enhance readability and maintainability**. This ability is important for <strong>maintaining large and complex contracts</strong>, such as:</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    use crete::another_define::*;
}

mod another_define {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>For example, the following example:</p>
<div><pre><code>mod fxck {
    use crate::erc20::Erc20;
    use ::ink_lang::Env; // Note that `ink_lang::Env` needs to be introduced here
    impl Erc20 {
        pub fn tmp(&amp;self) {
            self.env().caller(); // 
        }
    }
}

#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 {...}

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -&gt; Self {...}
        #[ink(message)]
        pub fn transfer(&amp;mut self, initial_supply: Balance) -&gt; Self {
            self.tmp(); // call methods defined in other `mod`
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>This model can achieve some code isolation that cannot be done under Solidity, and enhance maintainability. (Because Solidity's library can only be used for pure function calculations)</p>
<p>In summary, under the ink! system:</p>
<ul>
<li>A contract is in a <code>crate</code> unit, and only one <code>#[ink::contract]</code> definition can appear in a <code>crate</code>;</li>
<li><code>#[ink::contract]</code> modified <code>mod</code> represents the content of the contract, and also represents <strong>the basic elements of the contract must be defined under this <code>mod</code></strong>;</li>
<li>All parts other than <code>mod</code> modified by <code>#[ink::contract]</code> (other <code>mod</code>, functions, types) follow the rules of rust, and good code isolation can be done to improve maintainability;</li>
<li>In practice, the <code>mod</code> modified by <code>#[ink::contract]</code> can be used as the entry point of the contract, and the implemented logic can be distributed to other <code>mod</code>s.</li>
</ul>
<p>The following uses &quot;contract mod&quot; to indicate a <code>mod</code> modified by <code>#[ink::contract]</code></p>
<h3 id="storage"> <code>storage</code></h3>
<p>In the contract mod, a structure must be defined, and this structure is modified by <code>#[ink(storage)]</code>, indicating that the storage of the contract is defined.</p>
<p>At the same time, this structure definition modified by <code>#[ink(storage)]</code> is also regarded as an operable contract entity**, so all contract-related resources, types, and operations will be ** and this structure The body is bound together**. When the contract calls the contract, the type of the called contract is also represented by this structure.</p>
<p>Therefore, this structure can be understood as a contract entity.</p>
<blockquote>
<p>Although the part that modifies <code>mod</code> is the contract, because <code>mod</code> can only represent the scope in rust, so for practical use, use the structure modified by <code>#[ink(storage)]</code> to indicate that it can be operated Contract entity.</p>
<p>In this context, the <code>mod</code> modified by <code>#[ink::contract]</code> can be understood as the concept of &quot;opening the contract domain&quot;, while the <code>stuct</code> modified by <code>#[ink(storage)]</code> It is a contract under this contract domain.</p>
</blockquote>
<p>Here, the concept of storage defined by ink! is consistent with the concept of “storage” defined in Solidity, which means that the attributes defined here are the final state written to the <strong>chain</strong>. The purpose of writing all contract logic is to modify the state defined here.</p>
<p>However, because the current ink! uses a structure to carry the contract state, all the states of the current contract can only be defined in this structure. When the contract is designed to be relatively large and complicated, the maintainability here will decrease.</p>
<p>An example of defining storage is as follows:</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    /// Total token supply.
    total_supply: Lazy&lt;Balance&gt;,
    /// Mapping from owner to number of owned token.
    balances: StorageHashMap&lt;AccountId, Balance&gt;,
    /// Mapping of the token amount which an account is allowed to withdraw
    /// from another account.
    allowances: StorageHashMap&lt;(AccountId, AccountId), Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>Structures modified by <code>#[ink(storage)]</code> are collectively referred to as contract structures in the following text.</p>
<p>Here are a few features that need to be paid special attention to:</p>
<ol>
<li>
<p>The type of the attribute defined in the contract structure must be a type that has implemented <code>SpreadLayout</code> (or more accurately, a type that implements <code>PackedLayout</code>, because <code>PackedLayout</code> is inherited from the definition of <code>SpreadLayout</code>):</p>
<div><pre><code>/// Types that can be stored to and loaded from the contract storage.
pub trait SpreadLayout {
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>The reason why only the type that implements this trait can be used here is very simple, because storage is different from the general type, it must contain the information of the &quot;chain&quot; in it, so the contract implementation of different chains must have a part for processing The storage (that is, state) allocation problem in the contract.</p>
<p>For example, during the compilation process of Solidity, the key of the state is actually assigned according to the upper and lower order defined by the storage in the contract. If the <code>SpredLayout</code> or <code>PackedLayout</code> type has been implemented here, there will be an approximate process for state allocation.</p>
</blockquote>
<p>Ink! has done basic implementations for general types, but <strong>for collection types (<code>Vec</code>, <code>HashMap</code>, etc.), because the state of the contract needs to hook the process of reading and writing</strong>, it cannot be implemented for collection types This <code>trait</code>. Therefore, in ink!, all the commonly used collection types in the standard library have been re-implemented, and the attribute types of the structure modified by <code>#[ink(storage)]</code> must be used if the collection type is used. The collection type provided by ink!**.</p>
<blockquote>
<p>Since Solidity is relatively rudimentary, the storage map defined by Solidity cannot be traversed. (Caused by a defect in the Solidity design)</p>
<p>ink! has done a lot of things when designing this piece, so the collection types <code>Vec</code>, <code>BTreeMap</code>, <code>HashMap</code> and so on provided by ink! are all <strong>traversable</strong>. Compared with the functions that Solidity can achieve, it is a considerable improvement.</p>
</blockquote>
</li>
<li>
<p>Even based on the above design, the nested collection type is still difficult to implement (because the state structure of Substrate uses the k/v model). Therefore, in the design, we can only try to avoid nested collection types. If you must nest the collection type, you need to flatten the nesting level, merge the second-level key and the first-level key together, and use tuples instead (equivalent to <code>double_map</code> in Substrate Runtime)</p>
<div><pre><code>// solidity
contract A {
    mapping (uint =&gt; mapping (uint =&gt; uint))
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>The similar code in ink! should be:</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    // Note that the key here uses the tuple `(AccountId, AccountId)`
    allowances: StorageHashMap&lt;(AccountId, AccountId), Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>A model of <code>Lazy</code> is provided in storage, which allows developers to use <code>Lazy</code> to wrap a type so that the state data can be loaded when it is used:</p>
<div><pre><code>/// A lazy storage entity.
///
/// This loads its value from storage upon first use.
///
/// # Note
///
/// Use this if the storage field doesn&#39;t need to be loaded in some or most cases.
#[derive(Debug)]
pub struct Lazy&lt;T&gt;
where
    T: SpreadLayout,
{
    cell: LazyCell&lt;T&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>How to use:</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    /// Total token supply.
    total_supply: Lazy&lt;Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ol>
<h3 id="constructor-message"> <code>constructor</code>/<code>message</code></h3>
<p><code>constructor</code>/<code>message</code> is the entry function that triggers the contract state change. In other words, <code>constructor</code>/<code>message</code> is the state transition function of the contract state.</p>
<p><code>constructor</code>/<code>message</code> can only modify the methods of the contract structure**, and cannot be used to modify the methods of other structures or other pure functions.</p>
<p>In the contract mod, there is at least one method for the contract structure modified by <code>constructor</code> and <code>message</code>. If there are less than one respectively, it will cause compilation error.</p>
<p>among them:</p>
<ul>
<li>
<p><code>constructor</code> corresponds to the constructor in the Solidity contract. When the contract is deployed (in Contracts Pallet currently represents the process of doing <code>instantiate</code> from the uploaded contract code), a call to the corresponding constructor will be triggered.</p>
<blockquote>
<p>It needs to be emphasized here that the call of the constructor and the instantiation of the contract are two conceptual things. This process is <strong>not atomic</strong> in the coordination process of ink! and Contracts Pallet. Therefore, the constructor may not be called, but the contract address will be generated, and the contract instance for which the constructor has not been called can be called normally.</p>
<p>A typical example is the wrong code parameter passed in when calling <code>instantiate</code>.</p>
</blockquote>
</li>
<li>
<p><code>message</code> corresponds to the call methods such as <code>public</code>/<code>external</code> in the Solidity contract. Due to the characteristics of Rust's mutable/immutable methods, <code>message</code> uses the ** feature to indicate whether this method will modify the state of the contract**.</p>
<p>So if the method of <code>message</code> modification is</p>
<div><pre><code>// Note that the first parameter of the method is `&amp;self`
#[ink(message)]
pub fn total_supply(&amp;self) -&gt; Balance {
    *self.total_supply
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>It means that the call of this method will not modify the state (controlled by the rust syntax), which is consistent with Ethereum. This type of method is mostly used for rpc calls to return the storage of a contract or return some storage-based calculation results.</p>
<p>If the modification is</p>
<div><pre><code>// Note that the first parameter of the method is `&amp;mut self`
pub fn transfer(&amp;mut self, to: AccountId, value: Balance) -&gt; Result&lt;()&gt; {
    let from = self.env().caller();
    self.transfer_from_to(from, to, value)
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>It means that the call of this method will modify the state, so if this method is called and executed in the form of a packaged transaction call, it will trigger a state change. If it is called by rpc, it means that the simulation has been executed once.</p>
<p>At the same time, metadata.json (corresponding to the ABI of Solidity) will be generated after the contract is compiled. In this metadata, there will be a <code>mutates</code> field for the message part to indicate whether the method is variable.</p>
</li>
</ul>
<h4 id="message-s-selector"> message's <code>selector</code></h4>
<p>For the generation of the ABI of the contract method, Solidity uses the method name plus the parameter type as a function signature to piece together into a string and then make a hash to take the first 4 bytes.</p>
<div><pre><code>call = &quot;func_name(param1_type,param2_type,...)&quot;
bytes4(keccak256(call), a, b)
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>In ink!, this concept that allows contracts to distinguish call trigger points is called <code>selector</code>.</p>
<p>Since rust does not support function overloading, a relatively simple design is adopted in ink!, which directly hashes the string of the function name and takes the first 4 bytes:</p>
<div><pre><code>call = &quot;func_name&quot;
blake2_512(call)[0..4]
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>The author believes that this design has caused problems with other contract language designs. Because rust does not support overloading, it does not mean that other languages ​​do not support overloading. After Solang compiles Solidity to Wasm, if it wants to be compatible with ink!'s metadata, problems will arise when calling each other.</p>
</blockquote>
<p>On the other hand, <code>selector</code> can also run the contract developer's own definition</p>
<div><pre><code>#[ink(message, selector = &quot;0xCAFEBABE&quot;)]
pub fn was_it_ten(&amp;self) -&gt; bool {...}
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="message-of-payable"> message of <code>payable</code></h4>
<p>There is a <code>payable</code> modifier for the method in Solidity, which is used to indicate that the method can accept a certain amount of money.</p>
<p>Therefore, <code>payable</code> is also provided in ink! to indicate whether it is possible to transfer a certain amount of <strong>local currency</strong> while calling this method. In the current design of ink!, if a non-payable message is called with an amount at the same time, the calling process will be regarded as an error.</p>
<p>By default, <code>paybale</code> is considered to be <code>false</code>, and it is <code>true</code> only when the contract developer specifies <code>payable</code>.</p>
<p>The case for specifying a message to be callable is:</p>
<div><pre><code>#[ink(message, playable)]
pub fn was_it_ten(&amp;self) -&gt; bool {...}
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>On the other hand, in metadata, there will be a <code>payable</code> field for the message part to indicate whether this method requires payment.</p>
<h3 id="event"> <code>event</code></h3>
<p>The concept of event is not necessary in the state machine model. However, because <strong>blockchain is an asynchronous system</strong>, after sending a transaction to trigger a state change, the result of the change cannot be immediately known, and it can only rely on monitoring an element to determine the execution result. <code>event</code> is an element designed at the stage of Solidity, and this design is also inherited from Substrate Runtime and ink!.</p>
<blockquote>
<p>I don't think event is a good design. In theory, there are other better ways, or variants of event. Event will cause abuse by developers to a certain extent.</p>
</blockquote>
<p>The <code>event</code> of ink! in Contracts Pallet finally prints the event defined by the contract to the event of the chain through the <code>host function</code>.</p>
<p>The event design of ink! is nothing special compared to Solidity, but because it is a contract running in Wasm, the event of the printing contract needs to interact with the chain through the host function, so the calling method needs to be passed through. env()` to call.</p>
<div><pre><code>Self::env().emit_event(...);
// or use
self.env().emit_event(...);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! Framework</title>
    <id>https://www.patract.io/en/ink/framework/</id>
    <link href="https://www.patract.io/en/ink/framework/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-framework"> ink! Framework</h1>
<p>All the main functions of ink! are implemented in the <a href="https://github.com/paritytech/ink/tree/master/crates" target="_blank" rel="noopener noreferrer"><code>ink/crates</code></a> directory:</p>
<ul>
<li>crates:
<ul>
<li>allocator: related to Wasm, define allocator, developers do not need to care in most cases</li>
<li>env: Provides components that interact with the chain. In summary, the parts related to the chain will be placed here, including
<ul>
<li>host function part</li>
<li>Some types and trait definitions that need to be imported</li>
<li>topic of event</li>
</ul>
</li>
<li>lang: The definition component of the eDSL process macro, the contract specification is determined by this place</li>
<li>metadata: components that generate metadata</li>
<li>prelude: A package that needs to be imported in advance during the contract writing process, including some standard libraries</li>
<li>primitives: pointers to operating state storage, developers do not need to care in most cases</li>
<li>storage: provide chain storage allocation model and provide some predefined storage collection types</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 与solidity的对比</title>
    <id>https://www.patract.io/en/ink/ink-solidity/</id>
    <link href="https://www.patract.io/en/ink/ink-solidity/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-与solidity的对比"> ink! 与solidity的对比</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink</title>
    <id>https://www.patract.io/en/ink/introduction/</id>
    <link href="https://www.patract.io/en/ink/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink"> ink</h1>
<p>ink! is an eDSL to write WebAssembly based smart contracts using the Rust programming language. The compilation target are blockchains built on the Substrate framework.</p>
<p>Although ink! claims to be a kind of eDSL for writing contracts, I prefer to think that ink! is a contract framework written in Rust language that meets the requirements of Contracts Pallet.</p>
<p>For example, for EVM, if the instruction set of the EVM is regarded as a specification (the instruction set of the EVM already contains the information of the EVM contract model), then as long as the language can be compiled into the instruction set of the EVM, it can be said to be able to run on the EVM Contract language on the Internet, for example:</p>
<ul>
<li>Solidity</li>
<li>Vyper</li>
</ul>
<p>And ink! Same here. Contracts Pallet requires Wasm code that can run the Contracts Pallet contract model, so any framework/language/library that can be compiled to meet this Wasm contract model can be called Contracts Pallet's contract language.</p>
<p>ink! is to use the Rust language, and on this basis, design a set of eDSL through Rust's <strong>hygienic macro system</strong>, and use this eDSL to write Rust code that meets the requirements of Contracts Pallet. In addition to eDSL, ink! also provides a <strong>storage collection type</strong> suitable for contract models, generating Metadata (corresponding to Solidity's ABI) and other tool libraries.</p>
<p>See the official documentation of ink!:</p>
<ul>
<li><a href="https://substrate.dev/docs/en/knowledgebase/smart-contracts/ink-fundamentals" target="_blank" rel="noopener noreferrer">ink! Concepts</a></li>
<li><a href="https://substrate.dev/substrate-contracts-workshop/#/" target="_blank" rel="noopener noreferrer">ink! Smart Contracts Tutorial</a></li>
<li><a href="https://paritytech.github.io/ink-docs/" target="_blank" rel="noopener noreferrer">ink! Documentation Portal</a></li>
</ul>
<h2 id="ink-the-process-to-the-contracts-pallet"> ink! The process to the Contracts pallet</h2>
<p>An example image is provided in the official parity document:
<img src="https://paritytech.github.io/ink-docs/img/how-it-works.svg" alt="https://paritytech.github.io/ink-docs/how-it-works"></p>
<p>From this figure, we can see that the process of writing and deploying the ink! contract requires</p>
<ul>
<li>ink! dependent library: provide ink! eDSL framework and provide corresponding dependent components</li>
<li>cargo-contract: tool for compiling ink! contract</li>
<li>SDK: SDK that interacts with the chain and deploys the contract to the chain. The official parity mainly provides <code>polkadot.js</code>, and Patract provides the Himalia toolkit, including <code>go</code>, <code>java</code>, <code>python</code>, <code>C#</code> SDK</li>
</ul>
<p>This chapter will mainly introduce ink! and <code>cargo-contract</code> information, and the information about SDK will be introduced in the following chapters.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 当前的坑</title>
    <id>https://www.patract.io/en/ink/trap/</id>
    <link href="https://www.patract.io/en/ink/trap/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-当前的坑"> ink! 当前的坑</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! tutorial</title>
    <id>https://www.patract.io/en/ink/tutorial/</id>
    <link href="https://www.patract.io/en/ink/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-tutorial"> ink! tutorial</h1>
<p>TODO</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Substrate Contracts Book</title>
    <id>https://www.patract.io/en/introduction/</id>
    <link href="https://www.patract.io/en/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="substrate-contracts-book"> Substrate Contracts Book</h1>
<h2 id="introduction"> Introduction</h2>
<p>This book introduces a series of knowledge related to the contract system in Substrate. The book is written by Aten @atenjin, who comes from Patract (<a href="https://patract.io/" target="_blank" rel="noopener noreferrer">https://patract.io/</a>) @<a href="https://github.com/patractlabs" target="_blank" rel="noopener noreferrer">patractlabs</a>. You can check the repository of this book on <a href="https://github.com/patractlabs/substrate-contracts-book" target="_blank" rel="noopener noreferrer">GitHub</a> and we welcome you to contribute to this book.</p>
<p>Because <code>pallet-evm</code>, which is the contract of EVM/solidity system, has relatively rich information in the Ethereum ecosystem, <code>pallet-evem</code> will not be explained as a key point in this contract book. Other contract systems, such as pallet-actor, or libra transplantation contract platform, are in a relatively early stage of research, so they will not be mentioned in this book either.</p>
<p>This book focuses on <code>pallet-contracts</code>, which is the WASM contracts, and contains the following topics:</p>
<ul>
<li><code>pallet-contracts</code>: the contract platform (also referred as contract module) to run the contract</li>
<li>Language for writing contracts, which are:
<ul>
<li><code>ink!</code></li>
<li><code>Ask!</code></li>
<li><code>Solang</code></li>
</ul>
</li>
<li>Tools to develop contracts, which are:
<ul>
<li><code>Redspot</code></li>
<li><code>Europa</code></li>
<li><code>Elara</code></li>
<li>and so on..</li>
</ul>
</li>
</ul>
<p>To make contract developers to better understand how the <code>pallet-contracts</code> module and WASM contracts work, this book also includes some information about WASM and blockchain contract models.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Access Control</title>
    <id>https://www.patract.io/en/metis/access-control/</id>
    <link href="https://www.patract.io/en/metis/access-control/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="access-control"> Access Control</h1>
<p>Although smart contract applications are decentralized, implementing necessary centralized access control in the contract can make the contract more secure.</p>
<h2 id="ownership-and-ownable"> Ownership and Ownable</h2>
<p>The concept of ownership is the most common and basic form of access control: an account is the owner of the contract and can perform management tasks on the contract.</p>
<p>metis provides <a href="https://github.com/patractlabs/metis/tree/master/traits/access/ownership" target="_blank" rel="noopener noreferrer">Ownership</a> to realize the ownership in your contract.</p>
<div><pre><code><span>#[ink::trait_definition]</span>
<span>pub</span> <span>trait</span> <span>Ownable</span> <span>{</span>
    <span>/// Initializes the contract setting the deployer as the initial owner.</span>
    <span>#[ink(constructor)]</span>
    <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span><span>;</span>

    <span>/// Returns the account id of the current owner.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>owner</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>;</span>

    <span>/// Transfer ownership to new owner.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>transfer_ownership</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> new_owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="use-ownership-to-realize-contract-ownership"> Use <code>Ownership</code> to realize contract ownership</h3>
<ol>
<li>Add the <code>ownership</code> package to the <code>cargo.toml</code> dependency of the new contract project</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>ownership</span> <span>=</span> <span>{</span><span>version</span> <span>=</span> <span>"0.1.0"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"ownership/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ol start="2">
<li>The simplest realization of <code>ownership</code></li>
</ol>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>ownership</span> <span>{</span>
<span>use</span> <span>super</span><span>::</span><span>Ownable</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Ownership</span> <span>{</span>
        owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>Ownable</span> <span>for</span> <span>Ownership</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>Self</span> <span>{</span>
                owner<span>:</span> <span>Self</span><span>::</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>,</span>
            <span>}</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>owner</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span> <span>{</span>
            <span>self</span><span>.</span>owner<span>.</span><span>clone</span><span>(</span><span>)</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_ownership</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> new_owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>)</span> <span>{</span>
            <span>assert_eq!</span><span>(</span><span>self</span><span>.</span><span>owner</span><span>(</span><span>)</span><span>,</span> <span>Some</span><span>(</span><span>self</span><span>.</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
            <span>if</span> <span>let</span> <span>Some</span><span>(</span>new_one<span>)</span> <span>=</span> new_owner <span>{</span>

            <span>}</span>
            <span>self</span><span>.</span>owner <span>=</span> new_owner<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>By default, the owner of the contract is the account that deployed it, and <code>Ownable</code> also provides the <code>transfer_ownership</code> method to allow you to transfer the contract ownership to other accounts.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Metis</title>
    <id>https://www.patract.io/en/metis/introduction/</id>
    <link href="https://www.patract.io/en/metis/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="metis"> Metis</h1>
<p>Metis is the contract standard implementation and example case library led by Patract. In this warehouse, contract language frameworks such as ink!, Ask! that can run on <code>pallet-contracts</code> will be provided with the implementation of corresponding contract standards and common cases.</p>
<p>Metis is similar to OpenZepplin-contracts in the Ethereum ecosystem, providing contract developers with reusable wheels without having to write contract code from scratch. Developers who are new to Polkadot's ecological trial contract development can quickly build common applications with the help of the code in this warehouse after learning simple basic knowledge.</p>
<blockquote>
<p>Since the current ink! contract is not yet stable and the Ask! contract is still under development, neither platform has yet to make standards. Therefore, the current implementations provided in Metis are some mimic implementations that imitate the EIP-related standards in Solidity.</p>
</blockquote>
<h1 id="overview"> Overview</h1>
<h2 id="warehouse-address"> Warehouse Address</h2>
<p><a href="https://github.com/patractlabs/metis" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/metis</a></p>
<h2 id="project-structure"> Project structure</h2>
<p>The metis project is divided into the following three modules: <code>trait</code>, <code>stubs</code>, and <code>impls</code>.</p>
<h3 id="trait"> trait</h3>
<p>The <code>trait</code> module contains commonly used contract standard definitions, such as: erc20, erc721, etc. The ink! contract defines the common shared contract interface by defining <code>#[ink::trait_definition]</code> to achieve the characteristics similar to solidity <code>interface</code>.</p>
<p>Metis has formulated some widely used <code>trait_definition</code> contract standards based on development practical experience. Developers only need to add the <code>trait</code> package defined in metis to their own project's dependencies,
And implement the method defined in <code>#[ink::trait_definition]</code> like implementing the rust trait, then a common standard contract can be implemented.</p>
<h4 id="example"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::trait_definition]</span>
<span>pub</span> <span>trait</span> <span>IErc20</span> <span>{</span>
    <span>/// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.</span>
    <span>#[ink(constructor)]</span>
    <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span><span>;</span>

    <span>/// Returns the total supply.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

    <span>/// Transfers'amount' from caller to'to'.</span>
    <span>#[ink(message, payable)]</span>
    <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="stubs"> stubs</h3>
<p>The <code>stubs</code> module is a <code>stub</code> implementation of the <code>trait definition</code> contract defined in the <code>trait</code> module. The main purpose of stub is to assemble the contract address into a contract object when calling across contracts, and the contract method on the chain corresponding to the contract address can be called through the contract object.</p>
<p>Students who are familiar with solidity know that solidity implements inter-contract calls through interface, such as: <code>interfaceContract _interfaceContract = interfaceContract(_addr);</code>, so you may have questions here: since ink! has been implemented through <code>#[ink:: trait_definition]</code> to implement the contract interface,
Why not use <code>trait</code> to implement cross-contract calls, but need <code>stub</code>? This is indeed a feature that the official parity needs to implement in the next step, but it is not currently supported. Interested students can track the official implementation (https://github.com/paritytech/ink/issues/631).</p>
<p>Therefore, metis implements the function of cross-contract call by providing contract stubs. Developers can introduce stub contracts into the project to implement cross-contract calls.</p>
<blockquote>
<p>The structure of the interface definition is exactly the same as that of the contract, but no function implementation is defined, only they are declared. This type of declaration is usually called a <code>stub</code>;</p>
</blockquote>
<h4 id="example-2"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ierc20<span>::</span></span><span>IErc20</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20Stub</span> <span>{</span><span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20Stub</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span><span>unimplemented!</span><span>(</span><span>)</span><span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span><span>unimplemented!</span><span>(</span><span>)</span><span>}</span>

        <span>#[ink(message, payable)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span><span>unimplemented!</span><span>(</span><span>)</span><span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id="impls"> impls</h3>
<p>The impls module provides contract development and implementation cases, including the above-mentioned <code>trait</code>, the use of packages in the <code>stubs</code> module, and contract cases with features such as zkp.</p>
<h4 id="example-3"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ierc20<span>::</span></span><span>IErc20</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20</span> <span>{</span>
        total_supply<span>:</span> <span>Balance</span><span>,</span>
        <span>// more fields ...</span>
    <span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>#[ink(message, payable)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ERC20</title>
    <id>https://www.patract.io/en/metis/tokens/</id>
    <link href="https://www.patract.io/en/metis/tokens/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="erc20"> ERC20</h1>
<p>metis provides <a href="https://github.com/patractlabs/metis/tree/master/traits/token/erc20" target="_blank" rel="noopener noreferrer">trait_definition</a> and <a href="https://github.com/patractlabs/metis/tree/master/traits/token/erc20" target="_blank" rel="noopener noreferrer">calling stub between contracts</a> that fully complies with the <code>ERC20</code> standard. com/patractlabs/metis/tree/master/stubs/token/erc20)
And the standard implementation of <a href="https://github.com/patractlabs/metis/tree/master/impls/token/erc20" target="_blank" rel="noopener noreferrer">erc20 contract</a>.</p>
<p>The following is a detailed introduction to the use of the erc20 trait and stub provided by metis.</p>
<h2 id="trait-definition"> Trait Definition</h2>
<p>By processing macros with <code>#[ink::trait_definition]</code>, developers can define their own trait definitions, which can then be implemented by ink! smart contract. This allows the definition of shared smart contract interfaces for different specific implementations. Note that this <code>#[ink::trait_definition]</code> can be defined anywhere, even in another crate!</p>
<h3 id="erc20-trait-source-code-analysis"> erc20 trait source code analysis</h3>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>// Note: The tarit definition needs to be exported here for other packages to use</span>
<span>pub</span> <span>use</span> <span>self</span><span><span>::</span>erc20<span>::</span></span><span>{</span><span>Error</span><span>,</span> <span>IErc20</span><span>,</span> <span>Result</span><span>}</span><span>;</span>
<span>pub</span> <span>mod</span> <span>events</span> <span>{</span>
    <span>// pub use crate::erc20::{Transfer, Approval};</span>
<span>}</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>
<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> ink_lang <span>as</span> ink<span>;</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>
    <span>/// The ERC-20 result type.</span>
    <span>pub</span> <span>type</span> <span>Result</span><span>&lt;</span><span>T</span><span>></span> <span>=</span> <span>core<span>::</span>result<span>::</span></span><span>Result</span><span>&lt;</span><span>T</span><span>,</span> <span>Error</span><span>></span><span>;</span>

    <span>/// Event emitted when a token transfer occurs.</span>
    <span>#[ink(event)]</span>
    <span>pub</span> <span>struct</span> <span>Transfer</span> <span>{</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> from<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> to<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> value<span>:</span> <span>Balance</span><span>,</span>
    <span>}</span>
    <span>/// Event emitted when an approval occurs that `spender` is allowed to withdraw</span>
    <span>/// up to the amount of `value` tokens from `owner`.</span>
    <span>#[ink(event)]</span>
    <span>pub</span> <span>struct</span> <span>Approval</span> <span>{</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> owner<span>:</span> <span>AccountId</span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> spender<span>:</span> <span>AccountId</span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> value<span>:</span> <span>Balance</span><span>,</span>
    <span>}</span>

    <span>/// The ERC-20 error types.</span>
    <span>#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]</span>
    <span>#[cfg_attr(feature = <span>"std"</span>, derive(scale_info::TypeInfo))]</span>
    <span>pub</span> <span>enum</span> <span>Error</span> <span>{</span>
        <span>/// Returned if not enough balance to fulfill a request is available.</span>
        <span>InsufficientBalance</span><span>,</span>
        <span>/// Returned if not enough allowance to fulfill a request is available.</span>
        <span>InsufficientAllowance</span><span>,</span>
    <span>}</span>

    <span>/// Trait implemented by all ERC-20 respecting smart contracts.</span>
    <span>#[ink::trait_definition]</span>
    <span>pub</span> <span>trait</span> <span>IErc20</span> <span>{</span>
        <span>/// Creates a new ERC-20 contract with the specified initial supply.</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>
            initial_supply<span>:</span> <span>Balance</span><span>,</span>
            name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span><span>;</span>

        <span>/// Returns the token name.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_name</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>;</span>

        <span>/// Returns the token symbol.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_symbol</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>;</span>

        <span>/// Returns the token decimals.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_decimals</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>;</span>
        <span>/// Returns the total token supply.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>
        <span>/// Returns the account balance for the specified `owner`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>balance_of</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

        <span>/// Transfers `value` amount of tokens from the caller's account to account `to`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>

        <span>/// Returns the amount which `spender` is still allowed to withdraw from `owner`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>allowance</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

        <span>/// Transfers `value` tokens on the behalf of `from` to the account `to`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_from</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> from<span>:</span> <span>AccountId</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>

        <span>/// Allows `spender` to withdraw from the caller's account multiple times, up to</span>
        <span>/// the `value` amount.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>
    <span>}</span>

    <span>// TODO tmp hack struct for passing compile</span>
    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Phantom</span><span>;</span>
    <span>impl</span> <span>Phantom</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>Phantom</span> <span>{</span><span>}</span>
        <span>}</span>
        <span>#[ink(message)]</span>
        <span>pub</span> <span>fn</span> <span>message</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>{</span><span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br></div></div><p>First, you must define <code>#[ink::trait_definition]</code>, where a trait interface of <code>IErc20</code> is defined. At least one of <code>#[ink(constructor)]</code> and <code>#[ink(message)]</code> must be defined in trait_definition.
All interfaces have only declarations, not implementations.</p>
<p><code>#[ink::trait_definition]</code> can be defined separately from <code>#[ink::contract]</code>. For simple traits, you only need to define trait_definition, as defined in the introduction. But in this erc20 trait
In the implementation, the reason why it is defined in <code>#[ink::contract]</code> is because of the existence of <code>#[ink(event)]</code>. We hope to not only provide interfaces, but also provide some event and error definitions, so that developers When using our erc20-trait package, you can clearly know that it will
Which events are triggered and what errors occur, but the catch is that <code>#[ink(event)]</code> cannot be separated from the separate definition of <code>#[ink::contract]</code>, so we can only temporarily implement a <code>Phantom</code> contract and store it. Make the compilation pass. We have submitted this issue as an official issue
(Https://github.com/paritytech/ink/issues/683).</p>
<p>After defining <code>#[ink::trait_definition]</code>, pay attention to exporting the trait, such as: <code>pub use self::erc20::{Error, IErc20, Result};</code>, only after exporting can it be used by other crates .</p>
<h3 id="use-erc20-trait-to-implement-the-contract"> Use erc20-trait to implement the contract</h3>
<ol>
<li>Create a new contract</li>
</ol>
<div><pre><code>cargo contract new myerc20
</code></pre>
<div><span>1</span><br></div></div><p>Note: The ink! dependencies of all contracts in metis are the codes in the latest ink warehouse, so you need to change the dependencies in the newly created contract project to the latest, otherwise it will cause version conflicts, as follows:</p>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>ink_primitives</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_metadata</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"derive"</span><span>]</span><span>,</span> <span>optional</span> <span>=</span> <span>true</span> <span>}</span>
<span>ink_env</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_storage</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_lang</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_prelude</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol start="2">
<li>Add the <code>erc20-trait</code> package to the <code>cargo.toml</code> dependency of the new contract project</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>erc20-trait</span> <span>=</span> <span>{</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"ink-as-dependency"</span><span>]</span> <span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"erc20-trait/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>When adding a dependency here, the <code>features = [&quot;ink-as-dependency&quot;]</code> feature is enabled because it is in ink! As a dependency, the Chinese contract needs to be turned on and modified.</p>
<ol start="3">
<li>Implement the erc20 trait in the new contract project</li>
</ol>
<p>The complete code is at: <code>https://github.com/patractlabs/metis/blob/master/impls/token/erc20</code></p>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>// Here you need to import the interface and errors defined in erc20_trait</span>
    <span>use</span> <span>erc20_trait<span>::</span></span><span>{</span><span>Error</span><span>,</span> <span>IErc20</span><span>,</span> <span>Result</span><span>}</span><span>;</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>

    <span>/// Basic version of StandardToken, with no allowances.</span>
    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20</span> <span>{</span>
        <span>/// Total token supply.</span>
        total_supply<span>:</span> <span>Lazy</span><span>&lt;</span><span>Balance</span><span>></span><span>,</span>
        <span>/// Mapping from owner to number of owned token.</span>
        balances<span>:</span> <span>StorageHashMap</span><span>&lt;</span><span>AccountId</span><span>,</span> <span>Balance</span><span>></span><span>,</span>
        <span>/// Mapping of the token amount which an account is allowed to withdraw</span>
        <span>/// from another account.</span>
        allowances<span>:</span> <span>StorageHashMap</span><span>&lt;</span><span>(</span><span>AccountId</span><span>,</span> <span>AccountId</span><span>)</span><span>,</span> <span>Balance</span><span>></span><span>,</span>
        <span>/// Name of the token</span>
        name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
        <span>/// Symbol of the token</span>
        symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
        <span>/// Decimals of the token</span>
        decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>
            initial_supply<span>:</span> <span>Balance</span><span>,</span>
            name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>// Omitted part of interface</span>
        
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_from</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> from<span>:</span> <span>AccountId</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
        
        <span>#[ink(message)]</span>
        <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h2 id="call-stub-across-contracts"> Call stub across contracts</h2>
<p>Before that, we have implemented the standard erc20 contract through the erc20 trait, and it is essential to interact with the erc20 contract in some complex dapps. Metis provides <code>erc20-stub</code> to support cross-contract calls. We have implemented the erc20 contract.</p>
<h3 id="erc20-stub-source-code-analysis"> erc20 stub source code analysis</h3>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>// Need to export Erc20Stub for sub-contract call</span>
<span>pub</span> <span>use</span> <span>self</span><span><span>::</span>erc20<span>::</span></span><span>Erc20Stub</span><span>;</span>
<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>

    <span>/// The ERC-20 error types.</span>
    <span>#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]</span>
    <span>#[cfg_attr(feature = <span>"std"</span>, derive(scale_info::TypeInfo))]</span>
    <span>pub</span> <span>enum</span> <span>Error</span> <span>{</span>
        <span>/// Returned if not enough balance to fulfill a request is available.</span>
        <span>InsufficientBalance</span><span>,</span>
        <span>/// Returned if not enough allowance to fulfill a request is available.</span>
        <span>InsufficientAllowance</span><span>,</span>
    <span>}</span>

    <span>/// The ERC-20 result type.</span>
    <span>pub</span> <span>type</span> <span>Result</span><span>&lt;</span><span>T</span><span>></span> <span>=</span> <span>core<span>::</span>result<span>::</span></span><span>Result</span><span>&lt;</span><span>T</span><span>,</span> <span>Error</span><span>></span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20Stub</span> <span>{</span><span>}</span>

    <span>impl</span> <span>Erc20Stub</span> <span>{</span>
        <span>/// Creates a new ERC-20 contract with the specified initial supply.</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span>
            _initial_supply<span>:</span> <span>Balance</span><span>,</span>
            _name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            _symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            _decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token name.</span>
        <span>#[ink(message, selector = <span>"0x6b1bb951"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_name</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token symbol.</span>
        <span>#[ink(message, selector = <span>"0xb42c3368"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_symbol</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token decimals.</span>
        <span>#[ink(message, selector = <span>"0xc64b0eb2"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_decimals</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the total token supply.</span>
        <span>#[ink(message, selector = <span>"0x143862ae"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the account balance for the specified `owner`.</span>
        <span>#[ink(message, selector = <span>"0xb7d968c9"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>balance_of</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> _owner<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Transfers `value` amount of tokens from the caller's account to account `to`.</span>
        <span>#[ink(message, selector = <span>"0x10d455c2"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _to<span>:</span> <span>AccountId</span><span>,</span> _value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the amount which `spender` is still allowed to withdraw from `owner`.</span>
        <span>#[ink(message, selector = <span>"0xc04aa300"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>allowance</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> _owner<span>:</span> <span>AccountId</span><span>,</span> _spender<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Transfers `value` tokens on the behalf of `from` to the account `to`.</span>
        <span>#[ink(message, selector = <span>"0xbb399017"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>transfer_from</span><span>(</span>
            <span>&amp;</span><span>mut</span> <span>self</span><span>,</span>
            _from<span>:</span> <span>AccountId</span><span>,</span>
            _to<span>:</span> <span>AccountId</span><span>,</span>
            _value<span>:</span> <span>Balance</span><span>,</span>
        <span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Allows `spender` to withdraw from the caller's account multiple times, up to</span>
        <span>/// the `value` amount.</span>
        <span>#[ink(message, selector = <span>"0x4ce0e831"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _spender<span>:</span> <span>AccountId</span><span>,</span> _value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br></div></div><p>From the above code, we can know that there is no erc20 specific logic implementation in the stub contract, only an empty implementation of the interface is provided, and the contract will be instantiated by the child contract as the parent contract.
And you can call the interface of the parent contract in the child contract.</p>
<p>Note: In the erc20-stub contract, the <code>selector</code> of each contract method is set with a fixed value, where the value of <code>selector</code> is determined by <code>BLAKE2(&quot;IErc20::{message_func_name}&quot;.to_string().as_bytes ())[0..4]</code>
The formula is calculated.</p>
<p>The calculation method of <code>selector</code> in the ink! system is different from that of solidity. In solidity, the method signature is hashed, while in ink! there is a set of calculation methods. The simplest one is for <code>{message_func_name}</code>
Perform hash operation, but when message is implemented by <code>#[ink::trait_definition]</code>, use {trait_name} + {message_func_name} mixed hash method, detailed calculation rules,
You can check ink! Source code (https://github.com/paritytech/ink/blob/master/crates/lang/ir/src/ir/item_impl/callable.rs#L190).</p>
<p>Therefore, erc20-stub is only applicable to cross-contract calls of the erc20 contract implemented in metis (implemented through the IErc20 trait). If it is an erc20 contract implemented in other ways, this stub cannot be used due to the mismatch of <code>selector</code>.</p>
<h3 id="cross-contract-call-through-erc20-stub"> Cross-contract call through erc20 stub</h3>
<ol>
<li>Add the <code>erc20-stub</code> package to the <code>cargo.toml</code> dependency of the new contract project</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>erc20-stub</span> <span>=</span> <span>{</span><span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"ink-as-dependency"</span><span>]</span><span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"erc20-stub/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ol start="2">
<li>Instantiate erc20 stub in the new contract</li>
</ol>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>delegate</span> <span>{</span>
    <span>use</span> <span>erc20_stub<span>::</span></span><span>Erc20Stub</span><span>;</span>
    <span>use</span> <span>ink_env<span>::</span>call<span>::</span></span><span>FromAccountId</span><span>;</span>
    <span>use</span> <span>ink_storage<span>::</span></span><span>Lazy</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>CrossCall</span> <span>{</span>
        callee<span>:</span> <span>Lazy</span><span>&lt;</span><span>Erc20Stub</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>CrossCall</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span>callee<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>let</span> token<span>:</span> <span>Erc20Stub</span> <span>=</span> <span>FromAccountId</span><span>::</span><span>from_account_id</span><span>(</span>callee<span>)</span><span>;</span>
            <span>Self</span> <span>{</span> callee<span>:</span> <span>Lazy</span><span>::</span><span>new</span><span>(</span>token<span>)</span> <span>}</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span>
            <span>self</span><span>.</span>callee<span>.</span><span>transfer</span><span>(</span>owner<span>,</span> amount<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>In the ink! contract, you can use <code>FromAccountId</code> to instantiate the contract object (not to create a new contract), and then you can use the contract object to make cross-contract calls to contract methods.</p>
<blockquote>
<p><code>ink_storage::Lazy</code> manages data entities and delays the execution of read/write operations on the storage. Only when it is determined that reading/writing is really needed, it will be executed on the storage.</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">pallet-contracts 合约模块</title>
    <id>https://www.patract.io/en/pallet-contracts/introduction/</id>
    <link href="https://www.patract.io/en/pallet-contracts/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="pallet-contracts-合约模块"> pallet-contracts 合约模块</h1>
<p><code>pallet-contracts</code>合约模块, 一般称呼为<a href="https://substrate.dev/docs/en/knowledgebase/smart-contracts/contracts-pallet" target="_blank" rel="noopener noreferrer">“Contracts Pallet”</a> 或者 “FRAME Contracts pallet”，又或者称呼为“Substrate Smart Contracts”，是parity官方研发的Wasm合约模块。</p>
<p>依据Substrate knowledgebase的介绍，Contracts Pallet具备如下特性：</p>
<ul>
<li>Are inherently safer to the network.</li>
<li>Have built in economic incentives against abuse.</li>
<li>Have computational overhead to support graceful failures in logic.</li>
<li>Have a lower bar to entry for development.</li>
<li>Enable fast pace community interaction through a playground to write new logic.</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Getting started</title>
    <id>https://www.patract.io/en/patra-store/getting-starter/</id>
    <link href="https://www.patract.io/en/patra-store/getting-starter/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="getting-started"> Getting started</h2>
<p>First of all, please make sure you include <code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://static.patrastore.io/sdk/store-sdk.min.js&quot;&gt;&lt;/script&gt;</code> in the html, In order to ensure that the SDK can work normally, you need to quote it before the business code. A better way is to put it in the <code>head</code> tag of html.</p>
<p>Make sure you have a certain understanding of the <a href="https://polkadot.js.org/docs/extension" target="_blank" rel="noopener noreferrer">document</a> of <code>@polkadot/extension-dapp</code>, we will also post a demo below.</p>
<p>Install the corresponding dependencies. <code>yarn add @polkadot/extension-dapp</code>.</p>
<h3 id="request-user-authorization"> Request user authorization</h3>
<p>**This step is before all the following operations are called. **</p>
<div><pre><code><span>import</span> <span>{</span>web3Enable<span>}</span> <span>from</span><span>'@polkadot/extension-dapp'</span><span>;</span>

<span>await</span> <span>web3Enable</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="get-injected"> Get Injected</h3>
<div><pre><code><span>import</span> <span>{</span>web3FromSource<span>}</span> <span>from</span><span>'@polkadot/extension-dapp'</span><span>;</span>

<span>// The injected name of PatraStore is store</span>
<span>const</span> injected <span>=</span> <span>await</span> <span>web3FromSource</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="signer"> Signer</h3>
<div><pre><code><span>const</span> signer <span>=</span> injected<span>.</span>signer<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>After obtaining the Signer, you can use the signer to retrieve the signature of PatraStore</p>
<h3 id="provider-optional"> Provider(Optional)</h3>
<p>The Provider we provide is implemented based on PostMessage. To ensure that Dapp and PatraStore are connected to the same chain, it is recommended that you use this method to instantiate the Provider.</p>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> ProviderInterface <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider/types'</span><span>;</span>
<span>import</span> <span>{</span> WsProvider <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider'</span><span>;</span>
<span>import</span> <span>{</span> web3ListRpcProviders<span>,</span> web3UseRpcProvider <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>let</span> provider<span>:</span> ProviderInterface<span>;</span>
<span>const</span> providers <span>=</span> <span>await</span> <span>web3ListRpcProviders</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
<span>if</span> <span>(</span>providers <span>&amp;&amp;</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
  provider <span>=</span> <span>(</span><span>await</span> <span>web3UseRpcProvider</span><span>(</span><span>'store'</span><span>,</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>.</span>provider<span>;</span>
<span>}</span> <span>else</span> <span>{</span>
  provider <span>=</span> <span>new</span> <span>WsProvider</span><span>(</span>url<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="init-api"> Init Api</h3>
<p>After the above steps, we have obtained Provider and Signer. Below is a complete example of instantiating <code>ApiPromise</code>.</p>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> ProviderInterface <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider/types'</span><span>;</span>

<span>import</span> <span>{</span> ApiPromise <span>}</span> <span>from</span> <span>'@polkadot/api/promise'</span><span>;</span>
<span>import</span> <span>{</span> WsProvider <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider'</span><span>;</span>
<span>import</span> <span>{</span> web3Enable<span>,</span> web3FromSource<span>,</span> web3ListRpcProviders<span>,</span> web3UseRpcProvider <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>async</span> <span>function</span> <span>initApi</span><span>(</span><span>)</span><span>:</span> ApiPromise <span>{</span>
  <span>await</span> <span>web3Enable</span><span>(</span><span>)</span><span>;</span>

  <span>let</span> provider<span>:</span> ProviderInterface<span>;</span>
  <span>const</span> providers <span>=</span> <span>await</span> <span>web3ListRpcProviders</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span>providers <span>&amp;&amp;</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
    provider <span>=</span> <span>(</span><span>await</span> <span>web3UseRpcProvider</span><span>(</span><span>'store'</span><span>,</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>.</span>provider<span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    provider <span>=</span> <span>new</span> <span>WsProvider</span><span>(</span>url<span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> <span>{</span> signer <span>}</span> <span>=</span> <span>await</span> <span>web3FromSource</span><span>(</span><span>'store'</span><span>)</span><span>;</span>

  <span>return</span> <span>new</span> <span>ApiPromise</span><span>(</span><span>{</span>
    provider<span>,</span>
    signer<span>,</span>
    <span>// Jupiter types</span>
    types<span>:</span> <span>{</span>
      <span>"LookupSource"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
      <span>"Address"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
      <span>"FullIdentification"</span><span>:</span> <span>"AccountId"</span><span>,</span>
      <span>"AuthorityState"</span><span>:</span> <span>{</span>
        <span>"_enum"</span><span>:</span> <span>[</span>
          <span>"Working"</span><span>,</span>
          <span>"Waiting"</span>
        <span>]</span>
      <span>}</span><span>,</span>
      <span>"EraIndex"</span><span>:</span> <span>"u32"</span><span>,</span>
      <span>"ActiveEraInfo"</span><span>:</span> <span>{</span>
        <span>"index"</span><span>:</span> <span>"EraIndex"</span><span>,</span>
        <span>"start"</span><span>:</span> <span>"Option&lt;u64>"</span>
      <span>}</span><span>,</span>
      <span>"UnappliedSlash"</span><span>:</span> <span>{</span>
        <span>"validator"</span><span>:</span> <span>"AccountId"</span><span>,</span>
        <span>"reporters"</span><span>:</span> <span>"Vec&lt;AccountId>"</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>const</span> api<span>:</span> ApiPromise <span>=</span> <span>await</span> <span>initApi</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><h3 id="more-usage"> More usage</h3>
<p>Please refer to <a href="https://polkadot.js.org/docs/extension" target="_blank" rel="noopener noreferrer">https://polkadot.js.org/docs/extension</a></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Introduction</title>
    <id>https://www.patract.io/en/patra-store/introduction/</id>
    <link href="https://www.patract.io/en/patra-store/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="introduction"> Introduction</h2>
<p>PatraStore embeds Dapp through iFrame, PatraStore will provide Dapp with Signer and Provider functions.</p>
<p>Reading this document requires a certain understanding of <a href="https://polkadot.js.org/docs/" target="_blank" rel="noopener noreferrer">pokadot-js</a>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Overview</title>
    <id>https://www.patract.io/en/patra-store/overview/</id>
    <link href="https://www.patract.io/en/patra-store/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="overview"> Overview</h2>
<p>The communication between PatraStore and Dapp uses PostMessage to communicate. For the convenience of developers, we provide a set of SDK. This set of SDK implements the protocol in <a href="https://github.com/polkadot-js/extension" target="_blank" rel="noopener noreferrer">polkadot-js/extension</a>, so our SDK can be fully compatible with [@polkadot/extension-dapp](https 😕/www.npmjs.com/package/@polkadot/extension-dapp).</p>
<p>Developers can easily import PatraStore's SDK. We provide CDN service to host the SDK. You only need to include <code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://static.patrastore.io/sdk in the code. /store-sdk.min.js&quot;&gt;&lt;/script&gt;</code>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Publish DApp</title>
    <id>https://www.patract.io/en/patra-store/publish-dapps/</id>
    <link href="https://www.patract.io/en/patra-store/publish-dapps/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="publish-dapp"> Publish DApp</h2>
<p>Currently we do not support hosting DApps. Developers need to deploy DApps and upload information (domain name, type, picture, account, etc.) on PatraStore.</p>
<p>Make sure that the front end of the DApp you develop includes our <a href="./getting-starter.html">SDK</a>, otherwise the DApp will not work properly in PatraStore.</p>
<ol>
<li>Enter <a href="https://patrastore.io/jupiter-a1/system/developer" target="_blank" rel="noopener noreferrer">https://patrastore.io/:chain-value/system/developer</a> page</li>
<li>Click the Publish DApp button
<img src="./imgs/publish.png" alt="">
<img src="./imgs/publish-form.png" alt=""></li>
<li>Select Account and fill in the basic information of the DApp</li>
<li><strong>Add meta tag to html</strong><div><pre><code><span>&lt;!-- The accountId must be the same as the account address you selected. We will check the meta tag at intervals in the background. If the accountId and the account address are inconsistent, the DApp will become Offline --></span>
<span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>patrastore:verify<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>accountId<span>"</span></span><span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>Click the <code>Publish</code> button, and if the information filled above is correct, the DApp can be successfully published.</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Patract</title>
    <id>https://www.patract.io/en/patract/introduction/</id>
    <link href="https://www.patract.io/en/patract/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="patract"> Patract</h1>
<p><img src="./imgs/overview.jpg" alt="overview"></p>
<p>Patract 做的东西具体包括:</p>
<ul>
<li>
<p>在开发者端：</p>
<ul>
<li>Jupiter：独立的智能合约测试网，提供给合约开发者测试合约链的环境。</li>
<li>Ask!：AssemblyScript 版的 Ink! 合约框架，吸引 TS/JS 的开发者，给不愿意使用 rust 的合约开发者另一个选择。</li>
<li>Redspot：Wasm 合约开发工作流和脚手架：对标 Ethereum 生态中的 Tuffle/Redhat，让合约开发项目化，自动化的工具。Redspot 采用插件化设计，运行开发者添加自己设计的插件丰富 Redspot 的功能。</li>
<li>Europa：Runtime 和合约运行沙盒：对标 Ethereum 生态中的 EthereumJS/Ganache，给合约开发者提供了丰富的调试信息，便于快速开发合约。</li>
<li>Elara：实时和可扩展的波卡 API：对标 Ethereum 中的 Infura，给合约项目方提供节点的 Endpoint，不用自行搭建节点获取数据。</li>
<li>Megaclite：零知识证明的底层支持：在 Jupiter/Patract 链中提供零知识原语支持，可以允许项目方设计 zkRollup 或其他零知识相关合约。</li>
<li>Metis：Ink! 合约标准库：对标 Ethereum 中的 openzeppelin-contracts，给合约开发者提供可复用的轮子，不必从零开始编写合约代码。</li>
<li>Himalia：多语言合约 SDK：对标 Ethereum 中的 Web3J，Web3Py 等 SDK，给合约项目方提供不同语言的环境，丰富的接口与合约进行交互。</li>
<li>Leda：合约监控台：对标 Ethereum 生态中各类合约监控设施，让合约项目方随时监控合约的存储情况，代币转移情况，合约调用情况等等。</li>
<li>Carpo：专注开发合约的智能 WebIDE：对标 Ethereum 中的 Remix，但其将会是对 Patract 以上合约开发工具的集大成者。Carpo 将采用最新的 WebIDE 技术，使得云端开发无限贴近本地开发，同时完整的云端让开发者无需搭建任何开发环境即可进行开发，开箱即用的 Patract 工具链给合约开发者提供了一体化开发体验，让开发者的开发、调试、测试和部署的合约过程如丝般顺畅。</li>
</ul>
</li>
<li>
<p>在用户端包括：</p>
<ul>
<li>Patra Store：作为 Patract 平行链钱包和 DApp 生态的入口，在测试网阶段将集成一些示例应用和配套开发工具套件用法演示，帮助开发者快速开发 Wasm 合约和前端界面，帮助用户快速进入波卡新合约生态。</li>
<li>Patra Scan：专门为智能合约链优化的区块链浏览器，集成比统一的链浏览器更丰富的合约数据信息展示，增强统计和自定义的查询功能。</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Configure</title>
    <id>https://www.patract.io/en/redspot/configuration/</id>
    <link href="https://www.patract.io/en/redspot/configuration/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="configure"> Configure</h1>
<p>When you run Redspot, it will search for the closest redspot.config.js file starting from the current working directory. This file is usually located in the root directory of the project.</p>
<p>This file contains the entire Redspot setup (e.g. configuration, plugins, custom tasks, etc.).</p>
<h2 id="configuration-options"> Configuration options</h2>
<p>To set the configuration, you need to export the object (object) from redspot.config.ts.</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
  defaultNetwork<span>:</span> <span>'development'</span><span>,</span>
  contract<span>:</span> <span>{</span>
    ink<span>:</span> <span>{</span>
      toolchain<span>:</span> <span>'nightly'</span><span>,</span>
      sources<span>:</span> <span>[</span><span>'contracts/**/*'</span><span>]</span>
    <span>}</span><span>,</span>
    solang<span>:</span> <span>{</span>
      sources<span>:</span> <span>[</span><span>'contracts/**/*.sol'</span><span>]</span>
    <span>}</span>
  <span>}</span><span>,</span>
  networks<span>:</span> <span>{</span>
    development<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span>
    <span>}</span><span>,</span>
    substrate<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span><span>,</span>
      accounts<span>:</span> <span>[</span><span>'//Alice'</span><span>,</span> <span>"tomato mad peasant blush poem obtain inspire distance attitude mercy return marriage"</span><span>,</span> <span>" 0x26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850"</span><span>]</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span>
    <span>}</span>
  <span>}</span><span>,</span>
  paths<span>:</span> <span>{</span>
    artifacts<span>:</span> <span>"artifacts"</span><span>,</span>
    tests<span>:</span> <span>"tests"</span>
  <span>}</span><span>,</span>
  mocha<span>:</span> <span>{</span>
    timeout<span>:</span> <span>60000</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>The configuration information can be obtained in the js file via ``config`''.</p>
<div><pre><code><span>import</span> <span>{</span> config <span>}</span> <span>from</span> <span>"redspot"</span>

<span>console</span><span>.</span><span>log</span><span>(</span>config<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="defaultnetwork"> defaultNetwork</h2>
<p>You can customize the network that is used by default when running Redspot by using the <code>defaultNetwork</code> field in the configuration. If this configuration is omitted, the default value is <code>localhost</code>.</p>
<h2 id="networks"> networks</h2>
<p>The <code>networks</code> configuration field is an optional object to which the network name maps to its configuration.</p>
<p>The default configuration for <code>localhost</code> is :</p>
<div><pre><code><span>{</span>
  localhost<span>:</span> <span>{</span>
    gasLimit<span>:</span> <span>"400000000000"</span><span>,</span>
    accounts<span>:</span> <span>[</span><span>"//Alice"</span><span>,</span> <span>"//Bob"</span><span>,</span> <span>"//Charlie"</span><span>,</span> <span>"//Dave"</span><span>,</span> <span>"//Eve"</span><span>,</span> <span>"//Ferdie"</span><span>]</span><span>,</span>
    endpoint<span>:</span> <span>"ws://127.0.0.1:9944"</span><span>,</span>
    types<span>:</span> <span>{</span><span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>Other network names can also be configured, e.g. configure <code>mainnet</code>, the name of a particular network <code>some_network_name</code>, etc.</p>
<div><pre><code><span>{</span>
    mainnet<span>:</span> <span>{</span>
        <span>//...</span>
    <span>}</span><span>,</span>
    some_network_name<span>:</span> <span>{</span>
        <span>//...</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>The following configuration options are described for the <code>network</code> section.</p>
<h3 id="network-gaslimit"> <code>[network].gasLimit</code></h3>
<p>This configuration is used to set the default value of <code>gaslimit</code> that needs to be provided when instantiating or invoking a contract via a transaction. This value must be an integer, with no precision.</p>
<p>If this value is too small, you will get a <code>contracts.OutOfGas</code> error. The maximum gaslimit is the maximum value used for <code>DispatchClass::Normal</code> in Runtime for this Substrate's chain. (For example, in the configuration of Substrate's node node is <code>NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT = 75% * 2000000000000</code>).</p>
<p>So it is generally recommended to set it higher.</p>
<h3 id="network-accounts"> <code>[network].accounts</code></h3>
<p><code>accounts</code> should be set by <a href="https://polkadot.js.org/docs/keyring/start/suri/" target="_blank" rel="noopener noreferrer"><code>suri</code></a> or <a href="https://polkadot.js.org/docs/keyring/" target="_blank" rel="noopener noreferrer"><code>KeyringPair</code></a> start/create/#adding-a-pair).</p>
<p>The accounts default to [&quot;//Alice&quot;, &quot;//Bob&quot;, &quot;//Charlie&quot;, &quot;//Dave&quot;, &quot;//Eve&quot;, &quot;//Ferdie&quot;].</p>
<p>See runtime-environment for details</p>
<h3 id="network-endpoint"> <code>[network].endpoint</code></h3>
<p><code>endpoint</code> specifies the node in the current network configuration that the developer wants to connect to.</p>
<p>Currently, only WebSockets type RPC connections are supported (i.e. only link protocols starting with <code>wss://</code> or <code>ws://</code> are supported).</p>
<h3 id="network-types"> <code>[network].types</code></h3>
<p>type is a concept defined in <code>polkadotjs</code>. If there is any doubt about this, you can see it here at <a href="https://polkadot.js.org/docs/api/start/types.extend/" target="_blank" rel="noopener noreferrer"><code>types.extend</code></a>. You can also set <code>[network].typesbundle</code>, <code>[network].typesSpec</code>, etc. Usually, if you get an error like &quot;No such variant in enum MultiSignature&quot;, you should probably consider adding <code>{ Address: &quot;AccountId&quot;, LookupSource: &quot;AccountId&quot;}</code>, see <a href="https://polkadot.js.org/docs/api/start/types.extend/#impact-on-extrinsics" target="_blank" rel="noopener noreferrer">impact-on-extrinsics</a> .</p>
<h2 id="contract"> contract</h2>
<p>In the contract, you can set the compiler options, currently <a href="https://github.com/paritytech/ink" target="_blank" rel="noopener noreferrer">ink</a> and <a href="https://github.com/hyperledger-labs/solang" target="_blank" rel="noopener noreferrer">solang</a> are supported. You can also compile the ink contract and the solang contract together under the same project.</p>
<p>See the example of compiling multiple contracts at https://github.com/patractlabs/redspot/tree/master/examples/multi-contract .</p>
<h3 id="contract-ink-toolchain"> [contract].ink.toolchain</h3>
<p>Set the toolchain used by <a href="https://github.com/paritytech/cargo-contract" target="_blank" rel="noopener noreferrer">cargo-contract</a> when compiling contracts. You can also specify <code>nightly-YYYY-MM-DD</code></p>
<h3 id="contract-ink-sources"> [contract].ink.sources</h3>
<p>Sets the directory of the ink contract to look for at compile time. glob syntax.</p>
<h3 id="contract-solang-sources"> [contract].solang.sources</h3>
<p>Set the directory of the solang contract to be looked up at compile time. glob syntax.</p>
<h2 id="paths"> Paths</h2>
<p>paths sets the directory name for artifacts and tests files. Normally, you don't need to change this.</p>
<h2 id="mocha"> mocha</h2>
<p>Redspot uses mocha as its testing framework, and all of the options here will be passed to mocha. Check out https://mochajs.org/api/mocha for more details.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Console</title>
    <id>https://www.patract.io/en/redspot/console/</id>
    <link href="https://www.patract.io/en/redspot/console/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="console"> Console</h1>
<p>Redspot provides a powerful console that allows developers to simply use commands and contracts to do operations, or call scripts located in the <code>scripts</code> directory to do mechanized repetitive work, etc.</p>
<p>Redspot's console has many other rich features.</p>
<ul>
<li>Provides <strong>powerful tab-completion</strong> capabilities</li>
<li>The console records command history, so developers can view the <code>cache/console-history.txt</code> file to get the history of executed commands, and also use the <code>↑</code> button to find the required history commands. In the future, the console will also provide shortcut keys to index history commands.</li>
</ul>
<h2 id="start-the-console"> Start the console</h2>
<div><pre><code>$ npx redspot console
<span>## If you are sure that the contract compiled in the ``artifacts`` directory meets your expectations, you can add the --no-compile argument to not compile the contract</span>
$ npx redspot console --no-compile
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>If you run the <code>.help</code> command, you can see the corresponding help.</p>
<div><pre><code><span>></span> .help
.break Sometimes you get stuck, this gets you out
.clear Alias <span>for</span> .break
.editor Enter editor mode
.exit Exit the repl
.help Print this <span>help</span> message
.load Load JS from a <span>file</span> into the REPL session
.save Save Save all evaluated commands <span>in</span> this REPL session to a <span>file</span>
<span>></span>Save 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="common-commands"> Common commands</h2>
<p>By default, the console imports components for contract interaction under the <code>redspot</code> library, such as</p>
<ul>
<li><code>patract</code></li>
<li><code>network</code></li>
<li>...</li>
</ul>
<p>Consistent with the scripts in the <code>scripts</code> directory, these components can be used to invoke many functions, such as interacting with the contract, querying information, viewing the network, etc.</p>
<h3 id="common-workflows"> Common workflows</h3>
<p>Example: You currently want to debug the erc20 contract. After the contract is compiled, you will see the <code>erc20.json</code> and <code>erc20.wasm</code> files in the <code>artifacts</code> directory. The operations related to loading the contract need to be marked by the file names here.</p>
<p>For example, if we emulate the <code>deploy.ts` deployment script in the</code>scripts` directory, we can execute the command to deploy the contract and call it directly from the console.</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span> <span>// erc20 is the same as the filename</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>deployed</span><span>(</span><span>'new'</span><span>,</span> <span>10000000</span><span>)</span><span>;</span> <span>// upload the code and instantiate this contract</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>If the address of a contract is known and you want to load the contract instance first you can do so by.</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span> <span>// erc20 is the same as the filename</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>attach</span><span>(</span><span>'16DHBsUan9GoedoTYJmbyBZJMmN39ZpKUPvYeAGMTXCgxLQe'</span><span>)</span><span>;</span> <span>// load the contract address</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>At this point the <code>contract</code> object here is a well instantiated object. So subsequently you can use this <code>contract</code> object to interact with the contract directly, for example to call a transfer function.</p>
<div><pre><code><span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>transfer</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>,</span> <span>100</span><span>)</span>
ret<span>.</span>events <span>// print the information of events</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>If it is to get the result of executing a method via an rpc call.</p>
<div><pre><code><span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>balanceOf</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>)</span>
ret<span>.</span>output<span>.</span><span>toString</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>If this procedure is more fixed, the above commands can be written to a file in the <code>scripts</code> directory, e.g. named <code>scripts/do_something.ts</code>.</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>deployed</span><span>(</span><span>'new'</span><span>,</span> <span>10000000</span><span>)</span><span>;</span> 
<span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>transfer</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>,</span> <span>100</span><span>)</span>
ret<span>.</span>events
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>A series of processes can then be automated using the following command.</p>
<div><pre><code><span>.</span>load scripts<span>/</span>do_something<span>.</span>ts
</code></pre>
<div><span>1</span><br></div></div><p>So the console helper functions as follows.</p>
<p>! [](. /imgs/process.jpg)</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Redspot</title>
    <id>https://www.patract.io/en/redspot/introduction/</id>
    <link href="https://www.patract.io/en/redspot/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot"> Redspot</h1>
<p>Redspot is a contract integration builder that allows developers to simplify the process of testing and interacting with contracts by projecting the development of contracts such as ink! The Redspot system allows developers to build rich plugins that extend Redspot's functionality, minimizing the burden on contract developers and automating the execution of repetitive processes.</p>
<p>Redspot is designed to be similar to Truffle in the Ethereum ecosystem, but with a broader set of extensions than Truffle.</p>
<p>Patract believes that Redspot must be a flexible system, since the <code>pallet-contracts</code> contract module can be integrated directly, or with some modification, into the Substrate chain. Therefore, Redspot decided to use <a href="https://github.com/nomiclabs/hardhat" target="_blank" rel="noopener noreferrer">hardhat</a> as the core Redspot architecture because it has an excellent design that allows developers to add new features using plugins.</p>
<p>So Redspot comes from the hardhat fork (based on the MIT protocol) and removes the Ether-related parts from its base and adds features related to the Substrate and <code>pallet-contracts</code> modules. In the future, Redspot will build more features based on hardhat's core.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Introduction</title>
    <id>https://www.patract.io/en/redspot/overview/</id>
    <link href="https://www.patract.io/en/redspot/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="introduction"> Introduction</h2>
<h2 id="redspot-s-architecture"> Redspot's architecture</h2>
<p>Redspot is designed around the concept of Tasks and Plugins. most of Redspot's functionality comes from plugins, and as a developer you are free to choose which plugins you want to use.</p>
<h3 id="tasks"> Tasks</h3>
<p>Every time you run Redspot from the cli, you are running a task. For example, executing the command <code>npx redspot compile</code> is running a compile task. To see what tasks are currently available in your project, run <code>npx redspot</code>. You can see help for any task by running <code>npx redspot help [task]</code>.</p>
<h3 id="plugins"> Plugins</h3>
<p>Redspot has some plugins installed by default, if you need to install or upgrade them manually, please follow these steps.</p>
<p>For example, if you want to install the <code>@redspot/patract</code> and <code>@redspot/chai</code> plugins, go to the project root directory and follow these commands to install them</p>
<div><pre><code><span>yarn</span> <span>add</span> @redspot/patract @redspot/chai
</code></pre>
<div><span>1</span><br></div></div><p>In the redspot configuration file <code>redspot.config.js</code> in the project's directory, add</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Plugins</title>
    <id>https://www.patract.io/en/redspot/plugin/</id>
    <link href="https://www.patract.io/en/redspot/plugin/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="plugins"> Plugins</h1>
<p>The core functionality of Redspot includes the Redspot runtime environment and the tasks of compiling contracts, running tests, and running scripts.</p>
<p>Other functions such as test suites with contracts, contract interaction, accessing contracts, setting up different chain configurations, etc. are provided by plugins. Users can choose which plugins they want to use. Introducing a plugin is simple. Add it as an npm dependency. Then add to <code>redspot.config.ts</code>.</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span> <span>// introduce the @redspot/patract plugin</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span> <span>// import @redspot/chai plugin</span>

<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>Here we introduce a few of the officially provided plugins.</p>
<h2 id="redspot-patract"> @redspot/patract</h2>
<p>This plugin extends the Redspot runtime environment and adds the patract attribute, which allows you to access patract instances like this.</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span> 
</code></pre>
<div><span>1</span><br></div></div><p>The type definition of patract is as follows.</p>
<div><pre><code><span>interface</span> <span>Patract</span> <span>{</span>
     Contract<span>:</span> Contract<span>;</span>
     ContractFactory<span>:</span> ContractFactory<span>;</span>
    <span>/**
     * Generating Contract Instance from Contract Addresses
     *
     * @param contractName Contract name
     * @param address contract address
     * @param signer The account used to sign, or the first account in the user configured if it is undefined.
     * @returns Contract Instance
     */</span>
    <span>getContractAt</span><span>(</span>
      contractName<span>:</span> <span>string</span><span>,</span>
      address<span>:</span> AccountId <span>|</span> <span>string</span><span>,</span>
      signer<span>?</span><span>:</span> Signer
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Contract<span>></span><span>;</span>
    <span>/**
     * Return the contract factory
     *
     * @param contractName Contract name
     * @param signer The account used to sign, or the first account in the user configured if it is undefined.
     * @returns Contract Factory Instance
     */</span>
    <span>getContractFactory</span><span>(</span>
      contractName<span>:</span> <span>string</span><span>,</span>
      signer<span>?</span><span>:</span> Signer
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>ContractFactory<span>></span><span>;</span>
    <span>/**
     * Generate a random account and transfer token to it
     *
     * @param from This account will be transferred to the new account
     * @param amount The amount transferred to the new account
     * @returns New Account
     */</span>
    <span>getRandomSigner</span><span>(</span>
      <span>from</span><span>?</span><span>:</span> Signer<span>,</span>
      amount<span>?</span><span>:</span> <span>BN</span> <span>|</span> <span>number</span> <span>|</span> <span>string</span> <span>|</span> BigInt
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Signer<span>></span><span>;</span>
  
  <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h4 id="getrandomsigner-from-amount-promise-signer"> <code>getRandomSigner(from, amount): Promise&lt;Signer&gt;</code></h4>
<p>getRandomSigner is a utility function that creates a random signer to be generated and passes some initial amount to it from from.</p>
<h4 id="getcontractfactory-contractname-signer-promise-contractfactory"> <code>getContractFactory(contractName, signer?): Promise&lt;ContractFactory&gt;</code></h4>
<p>This function will create an instance of contractFactory with the contract name and signer.</p>
<p>Note that the contract must have been compiled successfully. You can find the metadata file for this in artifacts.</p>
<h4 id="getcontractat-contractname-address-signer-promise-contract"> <code>getContractAt(contractName, address, signer): Promise&lt;Contract&gt;</code></h4>
<p>Creates a Contract instance with a contract name, contract address and signer.</p>
<p>Note that the contract must have been compiled successfully. You can find the metadata file for it in artifacts.</p>
<p>###ContractFactory</p>
<p>The ContractFactory is mainly used for contract deployment.</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span>
<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
<span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> signers<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
<span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="new-contractfactory-address-contractmetadata-api-signer"> <code>new ContractFactory(address, contractMetadata, api, signer)</code></h4>
<p>Create a contractFactory instance with contract address, metadata, api and signer.</p>
<h4 id="contractfactory-deploy-constructororid-args-overrides-promise-contract"> <code>contractFactory.deploy(constructorOrId, . . args[ , overrides ]): Promise&lt;Contract&gt;</code></h4>
<p>constructorOrId is the name of the contructor of the contract to be called. Note that for some contracts that use <code>trait</code>, the name of the contructor should be something like this.</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>args is the list of arguments you need to pass to the contructor you are using.</p>
<p>overrides are optional and can be used to specify gasLimit, value, signer, salt, etc.</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>,</span> <span>{</span>
  gaslimit<span>:</span> <span>'10000000000000000000000'</span><span>,</span>
  salt<span>:</span> <span>'jkqwezlkwklqreqw'</span><span>,</span>
  signer<span>:</span> signers<span>[</span><span>1</span><span>]</span><span>,</span>
  value<span>:</span> <span>'32133210000000000000000000000'</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>gasLimit is the maximum gas value that can be used for this transaction.</p>
<p>salt is used to generate the address of the contract. The same contract address will be generated if the deployer, deployment parameters and salt are the same.</p>
<p>signer When creating a contractFactory, there is a signer parameter that is used for the default transaction signature. The signer item can override the default signature account.</p>
<p>value is the amount to be passed to the contract to be created.</p>
<p>Note that <code>@redspot/patract</code> will not handle numeric amount precision and needs to be handled by the user.</p>
<h4 id="contractfactory-deployed-constructororid-args-overrides-promise-contract"> <code>contractFactory.deployed(constructorOrId, . .args[ , overrides ]): Promise&lt;Contract&gt;</code></h4>
<p>This method is similar to <code>contractFactory.deploy</code>, the only difference is that <code>deployed</code> checks in advance if the contract address to be generated exists, and if it does, does not try to deploy it, but instead creates a <code>Contract</code> instance directly using that contract address.</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress"> <code>contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>If wasm has been uploaded to the chain, you can call <code>contractFactory.instantiate</code> directly to instantiate the contract. It takes the same arguments as <code>deploy</code>, but returns the contract address.</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-2"> <code>contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>If wasm has been uploaded to the chain, you can call <code>contractFactory.instantiate</code> directly to instantiate the contract. It takes the same arguments as <code>deploy</code>, but returns the contract address.</p>
<h4 id="contractfactory-attach-address-contract"> <code>contractFactory.attach(address):Contract</code></h4>
<p>Generates a <code>Contract</code> instance using the specified contract address</p>
<h4 id="contractfactory-connect-signer-contractfactory"> <code>contractFactory.connect(signer): ContractFactory</code></h4>
<p>Create a new contractFactory instance with the specified signer</p>
<h3 id="contract"> Contract</h3>
<h4 id="new-contract-address-contractmetadata-api-signer"> <code>new Contract(address, contractMetadata, api, signer)</code></h4>
<p>Create a contractFactory instance with the contract address, contractMetadata, api and signer.</p>
<h4 id="contract-query-messagename-args-overrides"> <code>contract.query.MessageName(. .args[, overrides])</code></h4>
<p>Similar to in polkadotjs, contract.query[MessageName] can call <code>contracts.call</code> rpc. For example, in the erc20 contract, to get the account balance.</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>The return value is of the following type.</p>
<div><pre><code><span>export</span> <span>interface</span> <span>ContractCallOutcome</span> <span>{</span>
    debugMessage<span>:</span> Text<span>;</span>
    gasConsumed<span>:</span> u64<span>;</span>
    output<span>:</span> Codec <span>|</span> <span>null</span><span>;</span>
    result<span>:</span> ContractExecResultResult<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>It is the same as in polkadotjs api-contract.</p>
<p>overrides are optional and can be used to specify gasLimit, value, etc.</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>,</span> <span>{</span>
	gasLimit：<span>'1231231231233123123'</span>
  value<span>:</span> <span>'3213321000000000000000000'</span>
  signer： signers<span>[</span><span>1</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>gasLimit is the maximum amount of gas that can be used for this transaction.</p>
<p>salt is used to generate the address of the contract. The same contract address will be generated if the deployer, deployment parameters and salt are identical.</p>
<p>signer When creating a contractFactory, there is a signer parameter that is used for the default transaction signature. The signer item can override the default signature account.</p>
<p>value is the amount to be passed to the contract to be created.</p>
<p>Note that <code>@redspot/patract</code> will not handle numeric amount precision and needs to be handled by the user.</p>
<h4 id="contractfactory-deployed-constructororid-args-overrides-promise-contract-2"> <code>contractFactory.deployed(constructorOrId, . .args[ , overrides ]): Promise&lt;Contract&gt;</code></h4>
<p>This method is similar to <code>contractFactory.deploy</code>, the only difference is that <code>deployed</code> checks in advance if the contract address to be generated exists, and if it does, does not try to deploy it, but instead creates a <code>Contract</code> instance directly using that contract address.</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-3"> <code>contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>If wasm has been uploaded to the chain, you can call <code>contractFactory.instantiate</code> directly to instantiate the contract. It takes the same arguments as <code>deploy</code>, but returns the contract address.</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-4"> <code>contractFactory.instantiate(constructorOrId, . .args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>If wasm has been uploaded to the chain, you can call <code>contractFactory.instantiate</code> directly to instantiate the contract. It takes the same arguments as <code>deploy</code>, but returns the contract address.</p>
<h4 id="contractfactory-attach-address-contract-2"> <code>contractFactory.attach(address):Contract</code></h4>
<p>Generates a <code>Contract</code> instance using the specified contract address</p>
<h4 id="contractfactory-connect-signer-contractfactory-2"> <code>contractFactory.connect(signer): ContractFactory</code></h4>
<p>Create a new contractFactory instance with the specified signer</p>
<h3 id="contract-2"> Contract</h3>
<h4 id="new-contract-address-contractmetadata-api-signer-2"> <code>new Contract(address, contractMetadata, api, signer)</code></h4>
<p>Creates a contractFactory instance with the contract address, contractMetadata, api and signer.</p>
<h4 id="contract-query-messagename-args-overrides-2"> <code>contract.query.MessageName(. .args[, overrides])</code></h4>
<p>Similar to in polkadotjs, contract.query[MessageName] can call <code>contracts.call</code> rpc. For example, in the erc20 contract, to get the account balance.</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>The return value is of the following type.</p>
<div><pre><code><span>export</span> <span>interface</span> <span>ContractCallOutcome</span> <span>{</span>
    debugMessage<span>:</span> Text<span>;</span>
    gasConsumed<span>:</span> u64<span>;</span>
    output<span>:</span> Codec <span>|</span> <span>null</span><span>;</span>
    result<span>:</span> ContractExecResultResult<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>It is the same as in polkadotjs api-contract.</p>
<p>overrides are optional and can be used to specify gasLimit, value, etc.</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>,</span> <span>{</span>
	gasLimit<span>:</span> <span>'1231231231231233123123'</span>
  value<span>:</span> <span>'32133210000000000000000000000'</span>
  signer<span>:</span> signers<span>[</span><span>1</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>gasLimit value refers to the gasLimit and value in the <code>contracts.call</code> rpc. signer can specify the origin address of <code>contracts.call</code>.</p>
<h4 id="contract-optimizegas-messagename-args-overrides"> <code>contract.optimizeGas.MessageName(.. . args[, overrides])</code></h4>
<p>This function is similar to <code>contract.query.MessageName</code>, but the return value is the estimated gas to be consumed</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>estimateGas<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
result <span>// BN(232130000000)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="contract-tx-messagename-args-overrides"> <code>contract.tx.MessageName(. .args[,overrides])</code></h4>
<p>With <code>contract.tx.MessageName</code> you can execute the contract's transactions. For example.</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>someddress<span>,</span> <span>7</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>Unlike polkadotjs, this function returns a promise that will wait until the transaction is up, or until an error occurs before it is resolved.</p>
<p>The return value type is as follows.</p>
<div><pre><code><span>export</span> <span>interface</span> <span>TransactionResponse</span> <span>{</span>
  <span>from</span><span>:</span> <span>string</span><span>;</span>
  txHash<span>?</span><span>:</span> <span>string</span><span>;</span>
  blockHash<span>?</span><span>:</span> <span>string</span><span>;</span>
  error<span>?</span><span>:</span> <span>{</span>
    message<span>?</span><span>:</span> <span>any</span><span>;</span>
    data<span>?</span><span>:</span> <span>any</span><span>;</span>
  <span>}</span><span>;</span>
  result<span>:</span> SubmittableResult<span>;</span>
  events<span>?</span><span>:</span> DecodedEvent<span>[</span><span>]</span><span>;</span>
<span>}</span>

<span>export</span> <span>interface</span> <span>DecodedEvent</span> <span>{</span>
  args<span>:</span> Codec<span>[</span><span>]</span><span>;</span>
  name<span>:</span> <span>string</span><span>;</span>
  event<span>:</span> AbiEvent<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>You can get the events of the parsed contract directly via <code>result.events</code>. If the execution goes wrong, you can get the error message via <code>result.error.message</code>.</p>
<p>overrides are optional and can be used to specify gasLimit, value, signer, etc.</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>someddress<span>,</span> <span>7</span><span>,</span> <span>{</span>
  gasLimit<span>:</span> <span>'1231231231231233123123'</span>
  value<span>:</span> <span>'32133210000000000000000000000'</span>
  signer<span>:</span> signers<span>[</span><span>1</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>gasLimit refers to the maximum value of gas that can be used for this transaction.</p>
<p>value refers to the amount to be passed to the contract to be created.</p>
<p>signer is used to override the default signer.</p>
<h4 id="contract-attach-address-contract"> <code>contract.attach(address): Contract</code></h4>
<p>Generates a <code>Contract</code> instance using the specified contract address</p>
<h4 id="contract-connect-signer-contractfactory"> <code>contract.connect(signer): contractFactory</code></h4>
<p>Create a new contract instance with the specified signer</p>
<h2 id="redspot-chai"> @redspot/chai</h2>
<p>This plugin provides a set of matchers for writing contract test cases, inspired by <a href="https://ethereum-waffle.readthedocs.io/en/latest/matchers.html" target="_blank" rel="noopener noreferrer">waffle</a>.</p>
<p>Introducing @redspot/chai. This plugin will automatically modify the chai matchers without having to call them manually.</p>
<div><pre><code>// redspot.config.ts

import { RedspotUserConfig } from &#39;redspot/types&#39;;
import &#39;@redspot/chai&#39;; 

export default {
 ...
} as RedspotUserConfig;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>For a full example of using @redspot/chai.</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer adds amount to destination account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span><span>changeTokenBalance</span><span>(</span>contract<span>,</span> receiver<span>,</span> <span>7</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span><span>changeTokenBalances</span><span>(</span>contract<span>,</span> <span>[</span>contract<span>.</span>signer<span>,</span> receiver<span>]</span><span>,</span> <span>[</span><span>-</span><span>7</span><span>,</span> <span>7</span><span>]</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><p>There are more built-in uses for chai, see the chai documentation: https://www.chaijs.com/.</p>
<h3 id="equal"> equal</h3>
<p>@redspot/chai will modify the default equal match. The default equal does not support matching objects. But @redspot/chai can.</p>
<div><pre><code><span>expect</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span><span>1000</span><span>)</span><span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span> <span>// true</span>
<span>expect</span><span>(</span>AccountId<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>'5Gdjkw....'</span><span>)</span> <span>// true</span>
<span>expect</span><span>(</span><span>Uint8Array</span><span>(</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>)</span><span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>'0x010203'</span><span>)</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>For BN types, equal to call <code>new BN(expected).eq(actual)</code> to determine if it is equal</p>
<p>For types defined in polkadotjs, equal calls <code>Type.eq(actual)</code> to determine if they are equal</p>
<p>For uint8Array types, equal converts them all to hex and then compares them for equality</p>
<p>For other types, the default method of determining equality is used</p>
<h3 id="changetokenbalance"> changeTokenBalance</h3>
<p>This matcher detects changes in the balance of erc20 and internally calls the balanceOf interface to determine the balance. Since the erc20-trait interface for getting balance is <code>baseErc20,balanceOf</code></p>
<p>so it does not apply to erc20-trait.</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span><span>changeTokenBalance</span><span>(</span>contract<span>,</span> receiver<span>,</span> <span>7</span><span>)</span><span>;</span>

<span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span><span>changeTokenBalances</span><span>(</span>contract<span>,</span> <span>[</span>contract<span>.</span>signer<span>,</span> receiver<span>]</span><span>,</span> <span>[</span><span>-</span><span>7</span><span>,</span> <span>7</span><span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="emit"> emit</h3>
<p>This matcher detects if the contract emits an event, e.g. to detect if a Transfer event has been emitted.</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
    <span>.</span>to<span>.</span><span>exit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>Detects if the event contains the specified parameters.</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
    <span>.</span>to<span>.</span><span>exit</span><span>(</span>contract<span>,</span> <span>'transfer'</span><span>)</span>
    <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>Not expecting to emit events</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
    signer<span>:</span> emptyAccount
  <span>}</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>exit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="redspot-gas-reporter"> @redspot/gas-reporter</h2>
<p>The plugin prints out the gas usage of the transaction for the called contract when the test completes at</p>
<p>! <a href="https://user-images.githubusercontent.com/7029338/101343840-7700ab00-38e9-11eb-80a0-c6b6d38a9640.png" target="_blank" rel="noopener noreferrer"></a></p>
<p>As with @redspot/chai, just add to redspot.config.ts, after introducing @redspot/gas-reporter, the following.</p>
<div><pre><code>// redspot.config.ts

import { RedspotUserConfig } from &#39;redspot/types&#39;;
import &#39;@redspot/gas-reporter&#39;; 

export default {
 ...
} as RedspotUserConfig;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>which is ready to run automatically.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/chai</title>
    <id>https://www.patract.io/en/redspot/plugin/redspot-chai/</id>
    <link href="https://www.patract.io/en/redspot/plugin/redspot-chai/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-chai"> @redspot/chai</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/gas-reporter</title>
    <id>https://www.patract.io/en/redspot/plugin/redspot-gas-reporter/</id>
    <link href="https://www.patract.io/en/redspot/plugin/redspot-gas-reporter/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-gas-reporter"> @redspot/gas-reporter</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/patract</title>
    <id>https://www.patract.io/en/redspot/plugin/redspot-patract/</id>
    <link href="https://www.patract.io/en/redspot/plugin/redspot-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-patract"> @redspot/patract</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Q &amp; A</title>
    <id>https://www.patract.io/en/redspot/q-and-a/</id>
    <link href="https://www.patract.io/en/redspot/q-and-a/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="q-a"> Q &amp; A</h1>
<h1 id="q-a-2"> Q &amp; A</h1>
<h3 id="how-to-upgrade-redspot"> How to upgrade Redspot</h3>
<p>redspot is just a normal npm package. So it is upgraded in the same way as any other npm package.</p>
<p><code>npm upgrade</code> upgrades all dependencies</p>
<p><code>npm upgrade redspot</code> Upgrade only redspot</p>
<p>If you are using yarn</p>
<p><code>yarn upgrade-interactive --latest</code> to upgrade all dependencies to the stable version</p>
<p>You can manually change the version number in package.json and reinstall the dependencies directly</p>
<div><pre><code><span>{</span>
  <span>"name"</span><span>:</span> <span>"erc20"</span><span>,</span>
  <span>"version"</span><span>:</span> <span>"0.1.0"</span><span>,</span>
  <span>"private"</span><span>:</span> <span>true</span><span>,</span>
  <span>"dependencies"</span><span>:</span> <span>{</span>
    <span>"@redspot/chai"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@redspot/gas-reporter"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@redspot/patract"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@types/chai"</span><span>:</span> <span>"^4.2.14"</span><span>,</span>
    <span>"@types/mocha"</span><span>:</span> <span>"^8.0.3"</span><span>,</span>
    <span>"chai"</span><span>:</span> <span>"^4.2.0"</span><span>,</span>
    <span>"redspot"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"typescript"</span><span>:</span> <span>"^4.0.2"</span>
  <span>}</span><span>,</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"build"</span><span>:</span> <span>"npx redspot compile"</span><span>,</span>
    <span>"test"</span><span>:</span> <span>"npx redspot test"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>Note that it is best to upgrade all plugins to the latest version at the same time.</p>
<h3 id="cannot-call-the-contract-when-using-erc20-trait"> Cannot call the contract when using erc20-trait</h3>
<p>Since erc20-trait has extra namespaces, you must also add namespaces when calling it. Example.</p>
<div><pre><code><span>// erc20</span>
contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>)</span>
<span>// erc20-trait</span>
contractFactory<span>.</span><span>deploy</span><span>(</span><span>"baseErc20,new"</span><span>,</span> <span>"1000000"</span><span>)</span>

<span>// erc20</span>
contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
<span>// erc20-trait</span>
contract<span>.</span>query<span>[</span><span>"baseErc20,balanceOf"</span><span>]</span><span>(</span>someaddress<span>)</span>

<span>// erc20</span>
contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
<span>// erc20-trait</span>
contract<span>.</span>tx<span>[</span><span>"baseErc20,transfer"</span><span>]</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="how-to-secure-the-private-key-online-and-avoid-uploading-to-github"> How to secure the private key online and avoid uploading to github</h3>
<p>You can use environment variables to configure account, e.g.</p>
<div><pre><code><span>// redspot.config.ts</span>
<span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>


<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
  network<span>:</span> <span>{</span>
    mainnet<span>:</span> <span>{</span>
      <span>...</span>
      account<span>:</span> <span>[</span>process<span>.</span>env<span>.</span><span>ACCOUNT</span><span>]</span>
      <span>...</span>
    <span>ACCOUNT</span><span>]</span> <span>...</span> <span>}</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>Run the script.</p>
<div><pre><code><span>REDSPOT_NETWORK</span><span>=</span>mainnet <span>ACCOUNT</span><span>=</span><span>"//Alice"</span> npx redspot run <span>.</span> /scripts/deploy.ts
</code></pre>
<div><span>1</span><br></div></div><p>You can also use tools like <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv </a>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Runtime Environment</title>
    <id>https://www.patract.io/en/redspot/runtime-environment/</id>
    <link href="https://www.patract.io/en/redspot/runtime-environment/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="runtime-environment"> Runtime Environment</h1>
<p>The RedSpot Runtime Environment (RSE) contains all of Redspot's publicly available features.</p>
<p>When you import Redspot (import &quot;redspot&quot;), you get an RSE environment.</p>
<h2 id="accessing-rse"> Accessing RSE</h2>
<p>env has the following properties.</p>
<div><pre><code>RuntimeEnvironment {
		config; // the user&#39;s configuration file 
    redspotArguments; // global arguments to run the command, including network , logLevel, etc.
    run; // function to run the command
    network; // Contains attributes such as api , keyring etc.
    artifacts; // the product of managing contract compilation
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>In the Redspot Console, these properties of env are injected into global variables. You can access them directly at</p>
<div><pre><code>&gt; network.name
&#39;development&#39;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>In js or ts files, you can access the RSE by <code>import env from 'redspot'</code>.</p>
<div><pre><code><span>import</span> <span>{</span> config<span>,</span> redspotArguments<span>,</span> run<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span> 
</code></pre>
<div><span>1</span><br></div></div><h2 id="extending-rse"> Extending RSE</h2>
<p>Some plugins can extend RSE by adding some additional properties or methods to RSE. For example, <code>@redspot/patract</code> extends the RSE by providing an instance of patract. When the patract plugin is introduced, you can access the patract instance like this.</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span> 
<span>console</span><span>.</span><span>log</span><span>(</span>patract<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>Let's go through the properties of the built-in RSE in more detail.</p>
<h3 id="config"> config</h3>
<p>Config contains all the configuration options in redspot.config.ts. and contains the default settings. It is a JSON object.</p>
<p>Get the currently configured default network to connect to</p>
<div><pre><code><span>import</span> <span>{</span> config <span>}</span> <span>from</span> <span>'redspot'</span> 
<span>console</span><span>.</span><span>log</span><span>(</span>config<span>.</span>defaultNetwork<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="redspotarguments"> redspotArguments</h3>
<p>Global arguments for the currently running command.</p>
<div><pre><code>&gt; redspotArguments
{
  network: undefined,
  showStackTraces: false,
  version: false,
  help: false,
  config: undefined,
  verbose: false,
  logLevel: &#39;2&#39;,
  maxMemory: undefined,
  tsconfig: undefined
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="run"> run</h3>
<p>With the run function, you can call the task in a js or ts file: ``#</p>
<div><pre><code><span>import</span> <span>{</span> run <span>}</span> <span>from</span> <span>'redspot'</span>

<span>run</span><span>(</span><span>'test'</span><span>)</span> <span>// run the test command</span>
<span>run</span><span>(</span><span>'test'</span><span>,</span> <span>{</span> testFiles<span>:</span> <span>'. /tests/erc20.test.ts'</span><span>}</span><span>)</span> <span>// pass in parameters</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="network"> network</h3>
<p>Network contains information about the network you are currently running on. The network can be used to get api, keyring, signer, etc. The type definition of network is</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Network</span> <span>{</span>
  name<span>:</span> <span>string</span><span>;</span>
  config<span>:</span> NetworkConfig<span>;</span>
  provider<span>:</span> WsProvider<span>;</span>
  api<span>:</span> ApiPromise<span>;</span>
  registry<span>:</span> Registry<span>;</span>
  keyring<span>:</span> Keyring<span>;</span>
  <span>getSigners</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Signer<span>[</span><span>]</span><span>></span><span>;</span>
  <span>createSigner</span><span>(</span>pair<span>:</span> KeyringPair<span>)</span><span>:</span> Signer<span>;</span>
  gasLimit<span>:</span> <span>BN</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="network-name"> network.name</h4>
<p>The name of the network currently in use</p>
<h4 id="network-config"> network.config</h4>
<p>Configuration options for the network currently in use, equivalent to: <code>config.networks[network.name]</code></p>
<h4 id="network-provider"> network.provider</h4>
<p>is equivalent to an instance of <a href="https://polkadot.js.org/docs/api/start/create/#providers" target="_blank" rel="noopener noreferrer">wsprovider</a> in polkadotjs. They have the same interface. The endpoint configured in <code>redspot.config.ts</code> is used for the network.provider instantiation parameters.</p>
<h4 id="network-registry"> network.registry</h4>
<p>Equivalent to an instance of the Registry in polkadotjs, used to manage type codecs. It also contains the <code>types</code> type definitions configured by the user in <code>redspot.config.ts</code>. Check out the polkadotjs documentation to learn more: https://polkadot.js.org/docs/api/start/types.create/.</p>
<h4 id="network-keyring"> network.keyring</h4>
<p>Equivalent to an instance of Keyring in polkadotjs. The default is type ss25519. The default value of ss58 is set after the api initialization is complete. See more about keyring: https://polkadot.js.org/docs/api/start/keyring.</p>
<h4 id="network-getsigners"> network.getSigners</h4>
<p>The accounts configured by the user in <code>redspot.config.ts</code> will be resolved to Signers. The getSigners function allows you to get all signers, which is an array corresponding to the accounts configured in accounts.</p>
<p>To get all signers.</p>
<div><pre><code><span>import</span> <span>{</span> network <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

network<span>.</span><span>getSigners</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span>signers<span>)</span> <span>=></span> <span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span>signers<span>[</span><span>0</span><span>]</span><span>.</span>address<span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>The signer is actually compatible with the polkadot js signer. signer's type definition.</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Signer</span> <span>{</span>
   	address<span>:</span> <span>string</span><span>;</span>
   api<span>:</span> ApiPromise<span>;</span>
   pair<span>:</span> KeyringPair<span>;</span>
   <span>signPayload</span><span>:</span> <span>(</span>payload<span>:</span> SignerPayloadJSON<span>)</span> <span>=></span> <span>Promise</span><span>&lt;</span>SignerResult<span>></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>You can also use it in polkadotjs for transaction signing: the</p>
<div><pre><code><span>import</span> <span>{</span> network <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> api <span>=</span> network<span>.</span>api

<span>async</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> signers <span>=</span> <span>await</span> network<span>.</span><span>getSigners</span><span>(</span><span>)</span>
  <span>const</span> <span>from</span> <span>=</span> signers<span>[</span><span>0</span><span>]</span>
  <span>const</span> to <span>=</span> signers<span>[</span><span>1</span><span>]</span>
  
  api<span>.</span>tx<span>.</span>balances<span>.</span><span>transfer</span><span>(</span>signer1<span>.</span>address<span>,</span> <span>100000000000</span><span>)</span><span>.</span><span>signAndSend</span><span>(</span><span>{</span>
  	signer<span>:</span> <span>from</span>
  <span>}</span><span>)</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id="network-createsigner"> network.createSigner</h4>
<p>You can generate a signer with the createSigner function, which takes a keyringpair and converts it into a signer instance: ``</p>
<div><pre><code><span>const</span> pair <span>=</span> keyring<span>.</span><span>createFromUri</span><span>(</span>uri<span>)</span>
<span>const</span> signer <span>=</span> network<span>.</span><span>createSigner</span><span>(</span>pair<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="network-gaslimit"> network.gasLimit</h4>
<p>It comes from gaslimt in config and is resolved to type bn.</p>
<h3 id="artifacts"> artifacts</h3>
<p>With artifacts you can access and manage abi. it has the following type definition.</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Artifacts</span> <span>{</span>
  <span>readArtifact</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>AbiMetadata<span>></span><span>;</span>
  <span>readArtifactSync</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> AbiMetadata<span>;</span>
  <span>readAllArtifact</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>AbiMetadata<span>[</span><span>]</span><span>></span><span>;</span>
  <span>readAllArtifactSync</span><span>(</span><span>)</span><span>:</span> AbiMetadata<span>[</span><span>]</span><span>;</span>
  <span>getArtifactPath</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>string</span><span>></span><span>;</span>
  <span>getArtifactPathSync</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>
  <span>artifactExists</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>boolean</span><span>></span><span>;</span>
  <span>getArtifactPaths</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>string</span><span>[</span><span>]</span><span>></span><span>;</span>
  <span>copyToArtifactDir</span><span>(</span>paths<span>:</span> <span>string</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>void</span><span>></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="artifacts-readartifact"> artifacts.readArtifact</h4>
<p>Get the contract metadata by contract name, which returns a JSON object:</p>
<div><pre><code><span>{</span>
  metadataVersion<span>:</span> <span>string</span><span>;</span>
  source<span>:</span> <span>{</span>
    hash<span>:</span> <span>string</span><span>;</span>
    language<span>:</span> <span>string</span><span>;</span>
    compiler<span>:</span> <span>string</span><span>;</span>
    wasm<span>:</span> <span>string</span><span>;</span>
  <span>}</span><span>;</span>
  contract<span>:</span> <span>{</span>
    name<span>:</span> <span>string</span><span>;</span>
    version<span>:</span> <span>string</span><span>;</span>
    authors<span>:</span> <span>string</span><span>[</span><span>]</span><span>;</span>
  <span>}</span><span>;</span>
  types<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
  spec<span>:</span> <span>{</span>
    constructors<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    docs<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    events<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    messages<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>where wasm is the wasm file compiled from the contract.</p>
<h4 id="artifacts-readartifactsync"> artifacts.readArtifactSync</h4>
<p>Synchronized version of <code>artifacts.readArtifact</code>.</p>
<h4 id="artifacts-readallartifact"> artifacts.readAllArtifact</h4>
<p>Get the metadata of all contracts.</p>
<h4 id="artifacts-readallartifactsync"> artifacts.readAllArtifactSync</h4>
<p>Synchronized version of <code>artifacts.readAllArtifact</code>.</p>
<h4 id="artifacts-getartifactpath"> artifacts.getArtifactPath</h4>
<p>Gets the path to the file that contains the metadata for the specified contract.</p>
<h4 id="artifacts-getartifactpathsync"> artifacts.getArtifactPathSync</h4>
<p>Synchronized version of <code>artifacts.getArtifactPath</code>.</p>
<h4 id="artifacts-artifactexists"> artifacts.artifactExists</h4>
<p>Determines if a contract's metadata exists</p>
<h4 id="artifacts-getartifactpaths"> artifacts.getArtifactPaths</h4>
<p>Gets the file paths of the metadata for all contracts.</p>
<h4 id="artifacts-copytoartifactdir"> artifacts.copyToArtifactDir</h4>
<p>Copies the file to the artifact directory</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/en/redspot/tutorial/</id>
    <link href="https://www.patract.io/en/redspot/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<h2 id="environment-preparation"> Environment preparation</h2>
<h3 id="installing-node"> Installing Node</h3>
<p>We require node version &gt;= 12.0, if not, you can visit the nodejs website and learn how to install or upgrade. Alternatively we recommend that you install Node using nvm. Windows users can use nvm-windows instead.</p>
<h3 id="ink-toolchain-for-contract-compilation"> ink! Toolchain for contract compilation</h3>
<ol>
<li>
<p>rust environment. Since the ink! contract requires rust's Wasm toolchain, and Wasm currently only runs under the nightly toolchain, developers need to prepare the Wasm compilation environment first: ``bash</p>
<div><pre><code>rustup <span>install</span> nightly
rustup component <span>add</span> rust-src --toolchain nightly
rustup target <span>add</span> wasm32-unknown-unknown --toolchain nightly
rustup component <span>add</span> rust-src --toolchain nightly

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ol>
<p>The tool to compile the contract <code>cargo-contract</code>.</p>
<div><pre><code>Please note that the following command installs the official `cargo-contract` provided by parity by default (currently the latest version is 0.10.0).
``bash
cargo install cargo-contract --force
```

With Europa you can use the `cargo-contract` provided by Patract, which provides an optional `-d/--debug` command
``bash
cargo install cargo-contract --git https://github.com/patractlabs/cargo-contract --branch=v0.10.0 --force
```

If you installed `cargo-contract` without feature `binaryen-as-dependency`, you need to prepare `wasm-opt` in your current environment.
</code></pre>
</div><ol start="3">
<li>install <code>wasm-opt</code> (optional)</li>
</ol>
<p>wasm-opt comes from the repository <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener noreferrer">https://github.com/WebAssembly/binaryen</a>. Developers can download the latest compilation product for the corresponding platform directly from the release. Direct downloads should be placed in a PATH path that can be accessed from anywhere.</p>
<p>Alternatively, developers can install <code>wasm-opt</code> via the system command</p>
<p>TODO Determine the installation method for different platforms</p>
<h3 id="prepare-a-blockchain-node-that-can-run-contracts"> Prepare a blockchain node that can run contracts</h3>
<h4 id="_1-jupiter"> 1. Jupiter</h4>
<p>Jupiter <a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/jupiter</a> is maintained by Patract, contains the Patract contract design specification and is compatible with the latest <code>pallet-contracts</code> module of the contract testing network.</p>
<p>Jupiter has three types of nodes.</p>
<ul>
<li>a parallel chain of Jupiter contracts running on rococo.</li>
<li>Jupiter standalone test networks that run independently to provide the latest contract functionality to the outside world.</li>
<li>Jupiter nodes for fast local testing</li>
</ul>
<p>See the Readme of this project for information on the differences between these three types of nodes and their compilation and installation.</p>
<h4 id="_2-europa"> 2. Europa</h4>
<p>Europa <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/europa</a> is a contract sandbox designed by Patract to help contract developers debug and test their contracts. It is similar to Ganache in the Ethereum ecosystem, but the features of Europa are more in the sense that it provides a log of detailed execution information during the deployment of contract invocations, which can reflect the operation of the contract module as a &quot;black box&quot; to the maximum extent, and is very helpful for contract This is very helpful for contract developers.</p>
<p>Developers can install and start Europa simply by</p>
<div><pre><code>cargo <span>install</span> europa --git https://github.com/patractlabs/europa --locked --force
europa --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>For different versions of Europa and other information, see the Readme for this project.</p>
<h4 id="_3-canvas"> 3. Canvas</h4>
<p>Canvas <a href="https://github.com/paritytech/canvas-node" target="_blank" rel="noopener noreferrer">https://github.com/paritytech/canvas-node</a> is the official contract test chain provided by parity with the <code>pallet-contracts</code> module. module, which is a test network maintained by the parity <code>ink!</code> &amp; <code>pallet-contracts</code> development team.</p>
<p>To participate in the canvas network, please refer to the Readme for this project. if the purpose is just to run the test node locally, you can execute the following command.</p>
<div><pre><code>cargo <span>install</span> canvas-node --git https://github.com/paritytech/canvas-node.git --force --locked
canvas --dev --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="create-a-redspot-project"> Create a Redspot project</h2>
<h3 id="installing-from-a-template"> Installing from a Template</h3>
<p>Redspot provides contract development templates that allow users to quickly build a project. Currently, only templates for the erc20 contract are supported for installation.</p>
<p>To create a new project from the template, you can choose to use <code>npx</code>. npx is a package executor that comes with npm (<em>npm 5.2+</em> ). Running the following command will pull the <strong>latest</strong> Redspot and build the Redspot project using erc20 as the template.</p>
<div><pre><code>npx redspot-new erc20
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>Note that Redspot does not yet provide the ability to create projects from templates, as ink! changes frequently at the moment. Developers who need additional project templates can copy them from the example directory in Redspot's project repository <a href="https://github.com/patractlabs/redspot" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/redspot</a> to directory in Redspot's project repository [] () and change the configuration such as the project name. All cases in the <strong>example directory are already in the Redspot project structure</strong>, so there is no need for the user to run <code>npx redspot-new</code> to create the project.</p>
</blockquote>
<p>If a project has already been created by Redspot, there must be a file <code>redspot.config.ts</code> in the root of the project to mark the project as Redspot, and <code>package.json</code> in the same directory controls the version of Redspot that corresponds to the project.</p>
<p>If a contract developer has obtained a Redspot project from github, or example, or otherwise, and another developer has built it, going to the project directory and running <code>yarn install</code> will restore the Redspot environment used by the Redspot project, as in the following example.</p>
<div><pre><code><span># copy the delegator multi-contract example from redspot repo to local dir</span>
<span>cp</span> -r <span>.</span> /redpost/example/delegator <span>.</span> /
<span>cd</span> delegator
<span>yarn</span> <span>install</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>The default template is already configured with typescript. It is also recommended that you use typescript for development. Even if you have no experience with typescript, typescript is javascript-compatible, works without any type definition, and still has the powerful type hinting and error hinting features of typescript.</p>
<h3 id="integration-into-existing-contract-projects"> Integration into existing contract projects</h3>
<p>Redspot can also be easily integrated into existing contract projects. Let's take the contracts in the <strong>examples</strong> directory of the official ink (https://github.com/paritytech/ink) repository as an example.</p>
<h4 id="compile-the-contract"> Compile the contract</h4>
<p>First clone the ink repository and open the ink directory.</p>
<div><pre><code>git clone https://github.com/paritytech/ink.git
cd ink
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>Then we create the following three files in the ink root directory.</p>
<p>redspot.config.ts:</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span> <span>// 引入 @redspot/patract 插件</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span> <span>// 引入 @redspot/chai 插件</span>

<span>export</span> <span>default</span> <span>{</span>
  defaultNetwork<span>:</span> <span>'development'</span><span>,</span> <span>// 默认的 network</span>
  contract<span>:</span> <span>{</span>
    ink<span>:</span> <span>{</span>
      toolchain<span>:</span> <span>'nightly'</span><span>,</span>      <span>// 指定编译合约时的 toolchain 版本</span>
      sources<span>:</span> <span>[</span><span>'examples/**/*'</span><span>]</span> <span>// 合约所在的目录</span>
    <span>}</span>
  <span>}</span><span>,</span>
  networks<span>:</span> <span>{</span>
    <span>// development 网络的配置</span>
    development<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span><span>,</span> <span>// 设置默认的 gasLimit</span>
      explorerUrl<span>:</span>
        <span>'https://polkadot.js.org/apps/#/explorer/query/?rpc=ws://127.0.0.1:9944/'</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  mocha<span>:</span> <span>{</span>
    timeout<span>:</span> <span>60000</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>package.json:</p>
<div><pre><code><span>{</span>
  <span>"name"</span><span>:</span> <span>"examples"</span><span>,</span>
  <span>"version"</span><span>:</span> <span>"0.1.0"</span><span>,</span>
  <span>"private"</span><span>:</span> <span>true</span><span>,</span>
  <span>"resolutions"</span><span>:</span> <span>{</span>
    <span>"@polkadot/api"</span><span>:</span> <span>"^3.10.2"</span><span>,</span>
    <span>"@polkadot/api-contract"</span><span>:</span> <span>"^3.10.2"</span>
  <span>}</span><span>,</span>
  <span>"dependencies"</span><span>:</span> <span>{</span>
    <span>"@redspot/chai"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"@redspot/patract"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"@types/chai"</span><span>:</span> <span>"^4.2.14"</span><span>,</span>
    <span>"@types/mocha"</span><span>:</span> <span>"^8.0.3"</span><span>,</span>
    <span>"chai"</span><span>:</span> <span>"^4.2.0"</span><span>,</span>
    <span>"redspot"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"typescript"</span><span>:</span> <span>"^4.0.2"</span>
  <span>}</span><span>,</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"build"</span><span>:</span> <span>"npx redspot compile"</span><span>,</span>
    <span>"test"</span><span>:</span> <span>"npx redspot test"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>tsconfig.json:</p>
<div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"target"</span><span>:</span> <span>"es5"</span><span>,</span>
    <span>"module"</span><span>:</span> <span>"commonjs"</span><span>,</span>
    <span>"strict"</span><span>:</span> <span>true</span><span>,</span>
    <span>"esModuleInterop"</span><span>:</span> <span>true</span><span>,</span>
    <span>"outDir"</span><span>:</span> <span>"dist"</span><span>,</span>
    <span>"noImplicitAny"</span><span>:</span> <span>false</span>
  <span>}</span><span>,</span>
  <span>"include"</span><span>:</span> <span>[</span>
    <span>"**/*.ts"</span>
  <span>]</span><span>,</span>
  <span>"exclude"</span><span>:</span> <span>[</span>
    <span>"node_modules"</span>
  <span>]</span><span>,</span>
  <span>"files"</span><span>:</span> <span>[</span>
    <span>"./redspot.config.ts"</span><span>,</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>Then install the npm dependency (it is recommended to use <a href="https://classic.yarnpkg.com/en/docs/install" target="_blank" rel="noopener noreferrer">yarn</a> as the package manager): ```.</p>
<div><pre><code>yarn or npm install
</code></pre>
<div><span>1</span><br></div></div><p>Then running the command <code>npx redspot compile</code> in the root of the project will compile all the contracts under examples, now we execute the following command.</p>
<div><pre><code>npx redspot compile examples/erc20
</code></pre>
<div><span>1</span><br></div></div><p>This command will specify the erc20 contract to be compiled. After the compilation is complete, you can find the compiled product in the artifacts directory.</p>
<h4 id="deploying-the-contract"> Deploying the contract</h4>
<p>Now we can run a deployment script through Redspot by creating this file in the ink root directory.</p>
<p>deploy.ts</p>
<div><pre><code><span>import</span> <span>{</span> network<span>,</span> patract <span>}</span> <span>from</span> <span>"redspot"</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory <span>}</span> <span>=</span> patract<span>;</span>
<span>const</span> <span>{</span> getSigners<span>,</span> api <span>}</span> <span>=</span> network<span>;</span>

<span>async</span> <span>function</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc20"</span><span>)</span><span>;</span>

    <span>await</span> api<span>.</span>isReady<span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc201"</span><span>)</span><span>;</span>

    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> signer <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>

    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>"erc20"</span><span>,</span> signer<span>)</span><span>;</span>

    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>,</span> <span>{</span>
        gasLimit<span>:</span> <span>"200000000000"</span><span>,</span>
        value<span>:</span> <span>"10000000000000000"</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span>
        <span>"Deploy successfully. The contract address: "</span><span>,</span>
        contract<span>.</span>address<span>.</span><span>toString</span><span>(</span><span>)</span>
    <span>)</span><span>;</span>

    api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>run</span><span>(</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>(</span>err<span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>Then you make sure that you have configured the network correctly in <code>redspot.config.ts</code>:</p>
<p>``typescript
{
...
networks: {
development: {
endpoint: 'ws://127.0.0.1:9944', //
types: {},
...
},
},
}</p>
<div><pre><code>
Now you can run the deploy.ts file, adding `-no-compile` to prevent duplicate compilation: `

```bash
npx redspot run . /deploy.ts --no-compile
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>After a successful contract deployment, you will get a message like this.</p>
<div><pre><code>Deploy successfully. the contract address: 5CqB5Mh9UdVbTE1Gt5PJfWSiCHydJaJsA31HjKGti1Z2fn78
</code></pre>
<div><span>1</span><br></div></div><h4 id="test-contracts"> Test Contracts</h4>
<p>We add a new erc20.test.ts file to the tests directory to test the erc20 contract: erc20.test.ts</p>
<p>tests/erc20.test.ts</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>Run the test command.</p>
<div><pre><code>npx redspot test --no-compile
</code></pre>
<div><span>1</span><br></div></div><p>You will get results similar to the following.</p>
<div><pre><code>....
✓ Can not transfer from empty account (17912ms)

  4 passing (46s)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="project-development"> Project Development</h2>
<p>Go to the root of your newly created Redspot project and execute the following command to view the Tasks currently supported by Redspot:</p>
<div><pre><code>npx redspot
</code></pre>
<div><span>1</span><br></div></div><p>For the concept of &gt;Tasks, please refer to the document [Tasks](. /overview.md#Tasks).</p>
<p>Run <code>npx redspot --help</code> to see the help.</p>
<div><pre><code>Redspot version 0.10.1

Usage: redspot [GLOBAL OPTIONS] &lt;TASK&gt; [TASK OPTIONS]

GLOBAL OPTIONS:

  --config A Redspot config file. 
  --help Shows this message, or a task&#39;s help if its name is provided 
  --log-level Set log levels 1-5 
  --max-memory The maximum amount of memory that Redspot can use. 
  --network The network to connect to. 
  --show-stack-traces Show stack traces. 
  --tsconfig Reserved redspot argument -- Has no effect. 
  --verbose Enables Redspot verbose logging 
  --version Shows redspot&#39;s version. 


AVAILABLE TASKS:

  check Check whatever you need
  clean Clears the cache and deletes all artifacts
  compile Compiles the entire project, building all artifacts
  console Opens a redspot console
  help Prints this message
  run Runs a user-defined script after compiling the project
  test Runs mocha tests

To get help for a specific task run: npx redspot help [task]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>You can see that there are two parts to the help message, GLOBAL OPTIONS and TASKS, through which we can invoke Redspot's built-in tasks or custom tasks. For example</p>
<p><code>npx redspot compile</code> can run the compile contract command.</p>
<p>Usually each TASK provides its own configuration of parameters. The <code>npx redspot compile --help</code> can be used to view help information.</p>
<div><pre><code>Redspot version 0.10.1

Usage: redspot [GLOBAL OPTIONS] compile [.... .sourcePattern]

POSITIONAL ARGUMENTS:

  sourcePattern A glob string that is matched against (default: [])

compile: Compiles the entire project, building all artifacts

For global options help run: redspot help
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>For the compile command, we can pass the path of the contract to specify the contract to be compiled, e.g. <code>npx redspot compile examples/erc20</code>.</p>
<p><code>GLOBAL OPTIONS</code> is the global configuration of the Redspot runtime. It can be attached to any TASK. For example, <code>npx redspot test --network substrate</code> will specify a connection to the substrate network (the substrate network needs to be configured in config). <code>npx redspot test --log-level 3</code> will specify the level of logs to be printed, the default is 2. We can also set <code>GLOBAL OPTIONS</code> via environment variables.</p>
<ul>
<li>Set log level: <code>REDSPOT_LOG_LEVEL=5 npx redspot test</code> ,</li>
<li>set network: <code>REDSPOT_NETWORK=substrate npx redspot test</code>.</li>
</ul>
<p>Let's go over a few of the built-in TASKs.</p>
<h3 id="compile"> Compile</h3>
<p>Running the <code>npx redspot compile</code> command will perform contract compilation. The <a href="https://github.com/paritytech/ink" target="_blank" rel="noopener noreferrer">ink</a> contract and the <a href="https://github.com/hyperledger-labs/solang" target="_blank" rel="noopener noreferrer">solang</a> contract are currently supported for compilation. When compiling the ink contract, make sure you have <a href="https://github.com/paritytech/cargo-contract" target="_blank" rel="noopener noreferrer">cargo-contract</a> installed. When compiling the solang contract, make sure you have <a href="https://solang.readthedocs.io/en/latest/installing.html#building-solang-from-crates-io" target="_blank" rel="noopener noreferrer">solang cli</a> installed. In <code>redspot.config.ts</code>, you can configure the options for compiling.</p>
<div><pre><code>{
	...
	contract: {
    ink: {
      toolchain: &#39;nightly&#39;, // set the cargo-contract compile-time toolchain
      sources: [&#39;contracts/**/*&#39;] // Configure the directory to find the contract files
    },
    solang: {
      sources: [&#39;contracts/**/*.sol&#39;] // Configure the directory to find contract files
    }
  },
  paths: {
  	...
    artifacts: &#39;artifacts&#39; // specify the directory where the contract compilation products are stored
    ...
  }
  ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>The compile command takes the sourcePattern parameter and can override the sources in the configuration file, for example</p>
<p><code>npx redspot compile examples/erc20</code></p>
<p>will only look for contracts in the <code>examples/erc20</code> directory.</p>
<p>After compilation, the compiled product can be found in the <code>artifacts</code> directory. There will usually be two formats, <code>[ContractName].contract</code> and <code>[ContractName].json</code>, the only difference between them is that <code>.json</code> does not contain wasm and will be smaller in size. You can also use your own tools to compile and copy the <code>[ContractName].contract</code> file to the artifacts directory. This will not affect other features either.</p>
<h3 id="test"> Test</h3>
<p>Automated testing is essential in writing contracts. You can use Redspot for unit testing. Before running the test command, you need to make sure that you have properly configured the nodes that need to be connected. the relevant configuration for Test is as follows.</p>
<div><pre><code>{
	defaultNetwork: &quot;development&quot;, // the default network to connect to
	...
	networks: {
			development: {
          endpoint: &quot;ws://127.0.0.1:9944&quot;, // url of the network to connect to (websocket)
          types: {}, // Type definitions to be passed to polkadotjs for use
          accounts: [&quot;//Alice&quot;, &quot;tomato mad peasant blush poem obtain inspire distance attitude mercy return marriage&quot;] // The account to use for the signature, default is [&#39;// Alice&#39;, &#39;//Bob&#39;, &#39;//Charlie&#39;, &#39;//Dave&#39;, &#39;//Eve&#39;, &#39;//Ferdie&#39;]
          gasLimit: &quot;400000000000&quot;, // default gaslimit
      },
	}
	path: {
		tests: &#39;tests&#39;, // directory to find test files
	},
	mocha: {
		timeout: 60000, // timeout for mocha tests
		...
	}
	...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>You can configure the network to connect to when testing by passing in the network option, example.</p>
<p><code>REDSPOT_NETWORK=development npx redpost test</code></p>
<p>You can also test only a single file <code>npx redspot test . /tests/[filename].ts</code>. Setting <code>--no-compile</code> prevents the compile command <code>npx redspot test --no-compile</code> from being run automatically.</p>
<p>Test uses mocha as the testing framework by default. You can configure mocha's options in the <code>redspot.config.ts</code> file. Here are all the supported options: https://mochajs.org/api/mocha .</p>
<p>A complete test file looks like this.</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>In the setup function, we create a random account and assign a fixed balance to this account. This account is then used to run various tests to ensure that the results are the same each time.</p>
<p>In this test file, we use two Redspot plugins, @redspot/patract and @redspot/chai, which we will describe in detail in a later article.</p>
<p>In fact, you don't have to use <code>npx redspot test</code> to run this test file; the Test command is simply a wrapper around the mocha command. You can use it any way you like to run the test code. There is no magic in between. For example, try running a test case by executing the command.</p>
<p><code>TS_NODE_TRANSPILE_ONLY=true mocha -r ts-node/register tests/erc20.test.ts --timeout 60000</code></p>
<p>where we use ts-node to compile and run typescript code, so we need to add <code>-r ts-node/register</code>. <code>TS_NODE_TRANSPILE_ONLY=true</code> Set ts-node to ignore typescript type errors when running.</p>
<h3 id="run"> Run</h3>
<p>The Run command can be used to run any typescript file. Setting <code>-no-compile</code> prevents the compile command <code>npx redspot run --no-compile</code> from being run automatically.</p>
<p>Like Test, it is just a simple wrapper around <code>TS_NODE_TRANSPILE_ONLY=true node -r ts-node/register [filepath]</code>. It's just a simple wrapper for `TS_NODE_TRANSPILE_ONLY=true</p>
<p>Normally we can run the deployment script using Run</p>
<div><pre><code><span>import</span> <span>{</span> network<span>,</span> patract <span>}</span> <span>from</span> <span>"redspot"</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory <span>}</span> <span>=</span> patract<span>;</span>
<span>const</span> <span>{</span> getSigners<span>,</span> api <span>}</span> <span>=</span> network<span>;</span>

<span>async</span> <span>function</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc20"</span><span>)</span><span>;</span>

    <span>await</span> api<span>.</span>isReady<span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc201"</span><span>)</span><span>;</span>

    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> signer <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>

    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>"erc20"</span><span>,</span> signer<span>)</span><span>;</span>

    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>,</span> <span>{</span>
        gasLimit<span>:</span> <span>"200000000000"</span><span>,</span>
        value<span>:</span> <span>"10000000000000000"</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span>
        <span>"Deploy successfully. the contract address: "</span><span>,</span>
        contract<span>.</span>address<span>.</span><span>toString</span><span>(</span><span>)</span>
    <span>)</span><span>;</span>

    api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>run</span><span>(</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>(</span>err<span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>This uses the <code>@redspot/patract</code> plugin. We will explain this in more detail in a later article.</p>
<h3 id="console"> Console</h3>
<p>You can start a node's <a href="https://nodejs.dev/learn/how-to-use-the-nodejs-repl" target="_blank" rel="noopener noreferrer"><em>REPL</em></a> console by running the <code>npx redspot console</code>. It has the Redspot Runtime Environment built in, so you can access Redspot in there to provide plugins, configuration, and tasks. We'll have a detailed description of this later.</p>
<p>More examples can be seen at https://github.com/patractlabs/redspot/tree/master/examples/.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Solang</title>
    <id>https://www.patract.io/en/solang/introduction/</id>
    <link href="https://www.patract.io/en/solang/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="solang"> Solang</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Benchmark</title>
    <id>https://www.patract.io/en/zkmega/benchmark/</id>
    <link href="https://www.patract.io/en/zkmega/benchmark/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="benchmark"> Benchmark</h1>
<p>We have constructed <a href="https://github.com/patractlabs/zkmega/tree/master/crates/arkworks/src/tests" target="_blank" rel="noopener noreferrer">the tests of zkMega curves</a> in <a href="https://github.com/patractlabs/substrate/blob/features/curve-benchmark/bin/node-template/pallets/template/src/lib.rs" target="_blank" rel="noopener noreferrer">pallet-template</a> which imports the
curves from zkMega directly(<em>Wasm</em>) and with <a href="https://github.com/patractlabs/substrate/blob/features/curve-benchmark/bin/node-template/io/src/lib.rs" target="_blank" rel="noopener noreferrer">runtime-interface</a>(<em>Native</em>).</p>
<h2 id="building"> Building</h2>
<div><pre><code><span># Clone the branch `curve-benchmark` of our fork</span>
<span>git</span> clone https://github.com/patractlabs/jupiter.git <span>\</span>
    --branch features/runtime-interfaces <span>\</span>
    --depth <span>=</span><span>1</span>

<span># Build the template</span>
cargo build -p jupiter-dev --all-features --release

<span># Check the command benchmark works fine</span>
<span># ./target/release/jupiter-dev benchmark -p pallet_template -e wasm_bls_12_381_add</span>
./target/release/jupiter-dev benchmark -p pallet_template -e wasm_bls_12_381_add

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="result"> Result</h2>
<table>
<thead>
<tr>
<th>memory</th>
<th>processor</th>
</tr>
</thead>
<tbody>
<tr>
<td>64GiB System memory</td>
<td>AMD Ryzen 9 5900X 12-Core Processor</td>
</tr>
</tbody>
</table>
<p>Here we test the curevs on ubuntu LTS 20.04, Time is measured in us</p>
<table>
<thead>
<tr>
<th>Curve</th>
<th>Native</th>
<th>Time(us)</th>
<th>WASM</th>
<th>Time(us)</th>
<th>Speed(Native/WASM)</th>
</tr>
</thead>
<tbody>
<tr>
<td>bls12_377(~9.5x)</td>
<td>native_bls12_377_add</td>
<td>9.588</td>
<td>wasm_bls12_377_add</td>
<td>29.02</td>
<td>~3x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_mul</td>
<td>183.1</td>
<td>wasm_bls12_377_mul</td>
<td>1893</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_pairing_two</td>
<td>1732</td>
<td>wasm_bls12_377_pairing_two</td>
<td>15310</td>
<td>~7x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_mimc_verify</td>
<td>7484</td>
<td>wasm_bls12_377_mimc_verify</td>
<td>64680</td>
<td>~9x</td>
</tr>
<tr>
<td>bls12_381(~10x)</td>
<td>native_bls12_381_add</td>
<td>13.9</td>
<td>wasm_bls12_381_add</td>
<td>28.31</td>
<td>~2x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_mul</td>
<td>177.1</td>
<td>wasm_bls12_381_mul</td>
<td>1879</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_pairing_two</td>
<td>1438</td>
<td>wasm_bls12_381_pairing_two</td>
<td>14770</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_mimc_verify</td>
<td>6411</td>
<td>wasm_bls12_381_mimc_verify</td>
<td>63260</td>
<td>~10x</td>
</tr>
<tr>
<td>bn254(~5x)</td>
<td>native_bn254_add</td>
<td>5.631</td>
<td>wasm_bn254_add</td>
<td>16.05</td>
<td>~3x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_mul</td>
<td>107.7</td>
<td>wasm_bn254_mul</td>
<td>534.3</td>
<td>~5x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_pairing_two</td>
<td>1150</td>
<td>wasm_bn254_pairing_two</td>
<td>5061</td>
<td>~5x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_mimc_verify</td>
<td>4178</td>
<td>wasm_bn254_mimc_verify</td>
<td>19850</td>
<td>~5x</td>
</tr>
<tr>
<td>bw6_761(~13x)</td>
<td>native_bw6_761_add</td>
<td>30.35</td>
<td>wasm_bw6_761_add</td>
<td>26.79</td>
<td>\</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_mul</td>
<td>963.8</td>
<td>wasm_bw6_761_mul</td>
<td>14630</td>
<td>~15x</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_pairing_two</td>
<td>5715</td>
<td>wasm_bw6_761_pairing_two</td>
<td>60960</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_mimc_verify</td>
<td>20330</td>
<td>wasm_bw6_761_mimc_verify</td>
<td>299800</td>
<td>~15x</td>
</tr>
</tbody>
</table>
<div><pre><code><span># 1. Under the jupiter repo</span>
<span># 2. Has compiled jupiter-dev</span>
<span>sh</span> ./benchmark.sh
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Contract</title>
    <id>https://www.patract.io/en/zkmega/contract/</id>
    <link href="https://www.patract.io/en/zkmega/contract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="contract"> Contract</h1>
<blockquote>
<p>Currently we (Patract) support zkMega in testnet Jupiter (<a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/jupiter</a>) and contract debug
sandbox Europa (<a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/europa</a>). And any substrate based chain which uses <code>pallet-contracts</code> v3.0.0 could integrate zkMega.</p>
<p>if the <code>pallet-contracts</code> Wasm contract chain use zkMega, then the following contract could run normally in those chain.</p>
</blockquote>
<h2 id="example"> Example</h2>
<p>TODO this example is wrong for current version!</p>
<div><pre><code>#![cfg_attr(not(feature = &quot;std&quot;), no_std)]

#[ink::contract]
mod altbn128 {
    use ink_env::zk_snarks::AltBn128;
    use ink_prelude::string::String;

    #[ink(storage)]
    pub struct Altbn128 {
        value: String,
    }

    impl Altbn128 {
        #[ink(constructor)]
        pub fn new(init_value: String) -&gt; Self {
            Self { value: init_value }
        }

        #[ink(constructor)]
        pub fn default() -&gt; Self {
            Self::new(&quot;hello, world&quot;.into())
        }

        #[ink(message)]
        pub fn bn_256_add(&amp;mut self) {
            let mut result = [0; 64];
            ink_env::inflect_add::&lt;AltBn128&gt;(&amp;[], &amp;[], &amp;mut result);
            self.value = ink_prelude::format!(&quot;0x{:x?}&quot;, result);
        }

        #[ink(message)]
        pub fn get(&amp;self) -&gt; String {
            ink_prelude::format!(&quot;{}&quot;, &amp;self.value)
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Example</title>
    <id>https://www.patract.io/en/zkmega/example/</id>
    <link href="https://www.patract.io/en/zkmega/example/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="example"> Example</h1>
<h2 id="call-curves-in-ink"> Call curves in ink!</h2>
<table>
<thead>
<tr>
<th>curve</th>
<th>add</th>
<th>mul</th>
<th>pairing</th>
</tr>
</thead>
<tbody>
<tr>
<td>bls12_377</td>
<td>0x01000000</td>
<td>0x01000001</td>
<td>0x01000002</td>
</tr>
<tr>
<td>bls12_381</td>
<td>0x01000010</td>
<td>0x01000011</td>
<td>0x01000012</td>
</tr>
<tr>
<td>bn254</td>
<td>0x01000020</td>
<td>0x01000021</td>
<td>0x01000022</td>
</tr>
<tr>
<td>bw6_761</td>
<td>0x01000030</td>
<td>0x01000031</td>
<td>0x01000032</td>
</tr>
</tbody>
</table>
<div><pre><code><span>let</span> result <span>=</span> <span>ink_env<span>::</span></span><span>call_chain_extension</span><span>(</span>func_id<span>,</span> <span>&amp;</span><span>Vec</span><span>::</span><span>from</span><span>(</span>input<span>)</span><span>)</span><span>?</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="mimc"> MIMC</h2>
<div><pre><code><span>use</span> <span>zkp_u256<span>::</span></span><span>{</span><span>U256</span><span>,</span> <span>Zero</span><span>}</span><span>;</span>
<span>use</span> <span>merkle_tree<span>::</span>mimc<span>::</span></span><span>{</span>mimc<span>,</span>mimc_with_key<span>}</span>
<span>let</span> message <span>=</span> <span>U256</span><span>::</span><span>from_decimal_str</span><span>(</span><span>"49"</span><span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>let</span> in_key <span>=</span> <span>U256</span><span>::</span><span>zero</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>
    <span>mimc</span><span>(</span><span>b"1"</span><span>)</span><span>,</span>
    <span>mimc_with_key</span><span>(</span><span>vec!</span><span>[</span><span>&amp;</span>message<span>]</span><span>,</span> <span>&amp;</span>in_key<span>)</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="merkle-tree"> Merkle Tree</h2>
<div><pre><code><span>use</span> <span>merkle_tree<span>::</span></span><span>MerkleTree</span><span>;</span>
<span>let</span> <span>mut</span> mt <span>=</span> <span>MerkleTree</span><span>::</span><span>default</span><span>(</span><span>)</span><span>;</span>
<span>let</span> message <span>=</span> <span>b"49"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>

<span>let</span> message <span>=</span> <span>b"50"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>

<span>let</span> message <span>=</span> <span>b"51"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="eddsa"> EDDSA</h2>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">zkMega</title>
    <id>https://www.patract.io/en/zkmega/introduction/</id>
    <link href="https://www.patract.io/en/zkmega/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="zkmega"> zkMega</h1>
<p>zkMega is a zero-knowledge proof tool set building for the Polkadot ecology.</p>
<ul>
<li>Polkadot Treasury report for v0.1: https://polkadot.polkassembly.io/post/221.</li>
</ul>
<h2 id="zk-rollup-introduction"> ZK Rollup Introduction</h2>
<p>Compared with the privacy function, the performance improvement brought by Rollup is the
early application direction of zero-knowledge proof. At present, the Layer 2 expansion
plan of the blockchain is to transfer a considerable part of the on-chain workload to
off-chain to complete, and the most watched one is ZK Rollup. The essence of ZK Rollup
is to compress the application on-chain state and store it in a Merkle tree, and move
the state transition funtions to off-chain. At the same time, the correctness of the
off-chain state transition process is guaranteed through the proof of zkSNARK. Compared
with the high cost of directly processing state changes on the chain, the ZK Proof's
on-chain smart contract verification is extremely cost low. At the same time, the
compressed information will also be submitted to the chain together with the proof,
which ensures data availability and obtains the same level of security as Layer 1.</p>
<p>The Ethereum Layer 2 protocols related to ZK Rollup are: <a href="https://zksync.io/" target="_blank" rel="noopener noreferrer">zkSync</a>, <a href="https://aztec.network/" target="_blank" rel="noopener noreferrer">aztec</a>,
etc. Their contract verification modules share a part of the elliptic curve's basic algorithms.
In 2017, Ethereum integrated three basic cryptographic calculation units of the alt
bn128 curve in the form of pre-compiled contracts, which are <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-196.md" target="_blank" rel="noopener noreferrer">EIP196</a>’s ADD and Scalar_MUL
algorithms, and <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md" target="_blank" rel="noopener noreferrer">EIP197</a>’s Pairing algorithm. On top of this, due to the lack of rapid
upgrade capabilities of Ethereum, the community can only encapsulate some  tool libraries
through costly Solidity contracts. On top of these basic contract  libraries, many DApps can combine
ZK Rollup technology to achieve some innovations, such as <a href="https://loopring.org/" target="_blank" rel="noopener noreferrer">loopring</a>, <a href="https://gitcoin.co/" target="_blank" rel="noopener noreferrer">gitcoin</a>
and <a href="https://uniswap.org/" target="_blank" rel="noopener noreferrer">uniswap</a> etc. However, in the past 3 years, ZK technology has further developed,
such as the more practical <a href="https://electriccoin.co/blog/new-snark-curve/" target="_blank" rel="noopener noreferrer">BLS curve</a>, and <a href="https://eprint.iacr.org/2019/953/20190827:165656" target="_blank" rel="noopener noreferrer">PLONK algorithm</a> etc.
Ethereum has not yet supported it.</p>
<h2 id="what-zkmega-does"> What zkMega does</h2>
<p>zkMega 目的是为了给Wasm合约生态<strong>引入零知识原语</strong>，类似于 Ethereum，开发者可以在合约生态中基于零知识原语构建出零知识的dapp及服务于部分Layer2的需求。因此 zkMega 在链的角度上实现的功能为几个基本的 零知识原语 的调用接口。而后续将会继续提供链下开发零知识合约功能的工具包组件等。</p>
<p>zkMega 首先会实现链上的零知识的接口调用功能，并提供合约示例。零知识的接口调用功能分为 Runtime 的实现以及 <code>pallet-contracts</code>合约接口的实现。而 <code>pallet-contracts</code>的实现本质上是通过<code>ChainExtentions</code>调用了Runtime的实现。</p>
<p>而 zkMega 实现零知识的方式是使用了 arkwork 的零知识实现库，该库可以编译成 Wasm 被使用。因此 zkMega 做了对于 Native 执行零知识调用与 Wasm 中执行零知识调用的性能对比（benchmark）。基于Substrate的链引入 zkMega 时，可以根据自己是否愿意导出 zkMega 使用的零知识的 host_function，来以 Wasm 或是 Native 的形式运行零知识的计算过程。详情请参照文档 <a href="./benchmark.html">benchmark</a>。</p>
<p>在<code>pallet-contracts</code>的模块引入了 zkMega 的链中，部署于<code>pallet-contracts</code>中的合约模块可以通过<code>ChainExtentions</code>在合约中调用链里 zkMega 提供的零知识的功能。由于<code>ChainExtentions</code>是通过<code>func_id</code>来区分调用的方法，因此 Patract 希望通过 <a href="https://github.com/patractlabs/pips" target="_blank" rel="noopener noreferrer">Patract/pallet-contracts/Polkadot Improvement Proposals (PIPs)</a> 来协定 func_id 与参数。因此 Patract 通过 Pip-101 <a href="https://github.com/patractlabs/PIPs/blob/main/PIPs/pip-101.md" target="_blank" rel="noopener noreferrer">Function ids for Patract Labs zkMega</a> 来约定 zkMega 在 <code>ChainExtentions</code> 部分使用的 <code>func_id</code>。</p>
<p>另一方面 zkMega 为了丰富开发人员的基础库，仿照 Ethereum 生态中的 <code>libsnark</code> 库，提供了例如 <code>MIMC</code>，<code>Merkle Tree</code> 等实用公共函数。这些库可以直接在ink!中被调用。详情可以参考 <a href="./example.html">example</a>。</p>
<h2 id="license"> LICENSE</h2>
<p>Apache-2.0</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Metis</title>
    <id>https://www.patract.io/en/zkmega/metis/</id>
    <link href="https://www.patract.io/en/zkmega/metis/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="metis"> Metis</h1>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/en/zkmega/tutorial/</id>
    <link href="https://www.patract.io/en/zkmega/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<h2 id="the-chain-based-on-substrate-introduces-zkmega-s-zero-knowledge-primitives"> The chain based on Substrate introduces 　zkMega's zero-knowledge primitives</h2>
<p>The chain integration zkMega with <code>pallet-contracts</code> can refer to Jupiter's integration method: [https://github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs](https:/ /github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs)</p>
<p>The main steps are mainly divided into the following steps:</p>
<ol>
<li>
<p>Design a structure implemented in <code>ChainExtension</code></p>
</li>
<li>
<p>Determine the range of <code>func_id</code> in the implementation of <code>call</code> of <code>ChainExtension</code>, according to <a href="https://github.com/patractlabs/PIPs/blob/main/PIPs/pip-101.md" target="_blank" rel="noopener noreferrer">PIP-101</a>, the current range required to use zkMega is <code>0x01000000..=0x010000ff</code>. Therefore, it can be introduced in the implementation:</p>
<div><pre><code><span>match</span> func_id <span>{</span>
        <span>// 0x01000000-0x010000ff Patract ZKP Support</span>
        <span>0x01000000</span><span>..=</span><span>0x010000ff</span> <span>=></span> <span>{</span>

        <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>Then introduce the gas billing method in the code block of <code>0x01000000..=0x010000ff</code>. Different chains may design different billing methods for the methods called by zkMega. In Jupiter's case, only the simplest way to design a fixed consumption of gas:</p>
<div><pre><code><span>let</span> simple_weight <span>=</span> <span>match</span> func_id <span>&amp;</span> <span>0x01</span> <span>{</span>
        <span>0</span> <span>=></span> <span>100_000</span><span>,</span>   <span>// add, In ethereum: 500</span>
        <span>1</span> <span>=></span> <span>8_000_000</span><span>,</span> <span>// 80x then add, In ethereum: 40000</span>
        <span>2</span> <span>=></span> <span>{</span><span>/* ...*/</span> <span>}</span>
        _ <span>=></span> <span>return</span> <span>Err</span><span>(</span><span>DispatchError</span><span>::</span><span>Other</span><span>(</span><span>"Unimplemented Patract ZKP func_id"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>;</span>
env<span>.</span><span>charge_weight</span><span>(</span>simple_weight<span>)</span><span>?</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>Implement different implementations according to whether the chain itself needs Native call or Wasm call:</p>
<p>For example, if the chain only wants to support Wasm calls, use the following method:</p>
<div><pre><code><span>zkmega_arkworks<span>::</span></span><span>call</span><span>(</span><span>&amp;</span>func_id<span>,</span> <span>&amp;</span>input<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>If the chain wants to execute the call on Native, it can be similar to Jupiter, design <code>runtime_inferface</code> to wrap the call of <code>zkmega_arkworks::call</code>, and put the call process under std to compile. Then call the method exported by <code>runtime_interface</code> in the implementation of <code>ChainExtensions</code>.</p>
</li>
</ol>
<h2 id="the-interface-for-calling-zkmega-s-zero-knowledge-primitives-in-the-contract"> The interface for calling zkMega's zero-knowledge primitives in the contract</h2>
<p>It is relatively simple to use zkMega in the contract. First introduce <code>megaclite-arkworks</code> in contract dependencies</p>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>megaclite-arkworks</span> <span>=</span> <span>{</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/zkmega"</span><span>,</span> <span>features</span> <span>=</span> <span>[</span> <span>"ink"</span> <span>]</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>Please note that you need to use the <code>ink</code> feature when importing the zkMega library.</p>
<p>Then you can use the methods provided by zkMega in the contract:</p>
<div><pre><code><span>megaclite_arkworks<span>::</span></span><span>verify</span><span>(</span><span>...</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>If it is a relatively low-level call, you can call it directly through <code>call</code>:</p>
<div><pre><code><span>let</span> func_id <span>=</span> <span>/*id defined in PIP-101*/</span>
<span>megaclite_arkworks<span>::</span></span><span>verify</span><span>(</span>func_id<span>,</span> <span>...</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa 合约执行日志信息解释</title>
    <id>https://www.patract.io/europa/execution_info/</id>
    <link href="https://www.patract.io/europa/execution_info/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-合约执行日志信息解释"> Europa 合约执行日志信息解释</h1>
<p>当前Europa的<code>pallet-contract</code>中记录合约执行信息的结构体如下所示。注释简要说明了每个属性代表记录的信息：</p>
<div><pre><code><span>/// Record the contract execution context.</span>
<span>pub</span> <span>struct</span> <span>NestedRuntime</span> <span>{</span>
	<span>/// Current depth</span>
    depth<span>:</span> <span>usize</span><span>,</span>
	<span>/// The current contract execute result</span>
	ext_result<span>:</span> <span>ExecResultTrace</span><span>,</span>
	<span>/// The value in sandbox successful result</span>
	sandbox_result_ok<span>:</span> <span>Option</span><span>&lt;</span><span>ReturnValue</span><span>></span><span>,</span>
	<span>/// Who call the current contract</span>
    caller<span>:</span> <span>AccountId32</span><span>,</span>
	<span>/// The account of the current contract</span>
    self_account<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId32</span><span>></span><span>,</span>
	<span>/// The input selector</span>
    selector<span>:</span> <span>Option</span><span>&lt;</span><span>HexVec</span><span>></span><span>,</span>
	<span>/// The input arguments</span>
    args<span>:</span> <span>Option</span><span>&lt;</span><span>HexVec</span><span>></span><span>,</span>
	<span>/// The value in call or the endowment in instantiate</span>
    value<span>:</span> <span>u128</span><span>,</span>
	<span>/// The gas limit when this contract is called</span>
    gas_limit<span>:</span> <span>Gas</span><span>,</span>
	<span>/// The gas left when this contract return</span>
    gas_left<span>:</span> <span>Gas</span><span>,</span>
	<span>/// The host function call stack</span>
    env_trace<span>:</span> <span>EnvTraceList</span><span>,</span>
	<span>/// The error in wasm</span>
    wasm_error<span>:</span> <span>Option</span><span>&lt;</span><span>WasmErrorWrapper</span><span>></span><span>,</span>
	<span>/// The trap in host function execution</span>
    trap_reason<span>:</span> <span>Option</span><span>&lt;</span><span>TrapReason</span><span>></span><span>,</span>
	<span>/// Nested contract execution context</span>
    nest<span>:</span> <span>Vec</span><span>&lt;</span><span>NestedRuntime</span><span>></span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br></div></div><h2 id="该结构对应的日志示例"> 该结构对应的日志示例：</h2>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>success<span>]</span> ExecReturnValue <span>{</span> flags: <span>0</span>, data:  <span>}</span>,
    caller: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d <span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: 0144d6fc570d7bddda6f8e36141f179cd172324599b556ef514193f3105865f6 <span>(</span>5C6NMXaS<span>..</span>.<span>)</span>,
    selector: 0x9bae9d5e,
    args: 0x40420f00000000000000000000000000,
    value: <span>10000000000000000</span>,
    gas_limit: <span>200000000000</span>,
    gas_left: <span>190018947968</span>,
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0x9bae9d5e40420f00000000000000000000000000<span>))</span>,
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d<span>))</span>,
        <span>..</span>.
       seal_set_storage<span><span>((</span>Some<span>(</span><span>0x0300000001000000000000000000000000000000000000000000000000000000</span><span>)</span><span>,</span> Some<span>(</span><span>0x000000000000000000000000</span><span>))</span></span><span>)</span>,
    <span>]</span>,
    sandbox_result_ok: Value<span>(</span>
        I32<span>(</span>
            <span>0</span>,
        <span>)</span>,
    <span>)</span>,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h2 id="日志字段说明"> 日志字段说明：</h2>
<ul>
<li>
<p><code>1: NestedRuntime</code>：调用深度为1的合约执行日志。</p>
</li>
<li>
<p><code>ext_result</code>：合约在<code>pallet-contract</code>层的执行结果，有<code>[success]</code>和<code>[failed]</code>两种情况。</p>
<ul>
<li><code>[success]</code>只能说明在<code>pallet-contract</code>层是执行成功的，但是合约本身的业务逻辑可能是抛出Error的。<code>ExecResultValue {flag:0, data: 0x...}</code>中的data值也许是合约的返回值，也许是合约内定义的Error的枚举值。</li>
<li><code>[failed]</code>后面会跟随一个<code>ExecError {.. }</code>，错误信息是定义在<code>pallet-contracts</code>中的。</li>
</ul>
</li>
<li>
<p><code>caller</code>：该合约的调用者，可能是用户，也可能是另外一个合约账户。当该值为<code>0x000...</code>时，是被rpc调用的。</p>
</li>
<li>
<p><code>self_account</code>：当前合约账户。</p>
</li>
<li>
<p><code>selector</code>：传递给合约的函数标识，在合约的metadata.json中查询到对应关系。</p>
</li>
<li>
<p><code>args</code>：传递给合约调用函数的参数。</p>
</li>
<li>
<p><code>value</code>：给当前合约转账数量。</p>
</li>
<li>
<p><code>gas_limit</code>：当前合约最多可以使用的gas数量。</p>
</li>
<li>
<p><code>gas_left</code>：退出当前合约时，还剩余的gas数量。</p>
</li>
<li>
<p><code>env_trace</code>：在当前合约执行过程中，host_function的调用栈，详细地给出了每个function的参数。以<code>seal_call</code>为例，如果input为Some(xxx)而output为None，那么可能是在合约互相调用过程中出错了。</p>
</li>
<li>
<p><code>trap_reason</code>：在执行host_function过程中，遇到trap的原因。</p>
<ul>
<li>Return &amp; Termination &amp; Restoration：是合约执行的正常退出策略，不是Error。</li>
<li>SupervisorError：定义在<code>pallet_contracts</code>中的DispatchError。</li>
</ul>
</li>
<li>
<p><code>wasm_error</code>：如果合约内部出现了wasm执行错误，会将wasm调用栈打印在该字段中。当且仅当<code>ext_result</code>是<code>[failed]</code>。</p>
</li>
<li>
<p><code>sandbox_result_ok</code>：假如在host_function执行过程中没有<code>trap</code>，并且没有<code>wasm_error</code>，那么认为合约执行成功，打印该字段。该字段携带一个<code>ReturnValue</code>的信息，在<code>ink!</code>中，如果返回的value值不为0，那么可能是出现了一个<code>ink!</code>内定义的Error，需要查询相应的<a href="https://github.com/paritytech/ink/blob/abd5cf14c0883cb2d5acf81f2277aeec330aa843/crates/lang/src/error.rs#L66-L80" target="_blank" rel="noopener noreferrer"><code>DispatchError</code></a>。</p>
</li>
<li>
<p><code>nest</code>：嵌套调用的合约日志。如果当前合约调用了其他合约，被调用合约的执行日志会被嵌套在该字段之中。</p>
<p>该部分详细解释请参照后续章节“合约嵌套调用”部分。</p>
</li>
</ul>
<h2 id="合约嵌套调用"> 合约嵌套调用</h2>
<p>合约间的互相调用，日志如下：</p>
<ul>
<li>在合约A中，调用合约B之后再调用合约C</li>
</ul>
<p><img src="./imgs/call_other_1.png" alt="call_other_1"></p>
<p>日志如下：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	self_account: A,
	nest:<span>[</span>
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: B,
			nest:<span>[</span><span>]</span>,
		<span>}</span>,
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: C,
			nest:<span>[</span><span>]</span>,
		<span>}</span>
	<span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br></div></div><ul>
<li>在合约A中，调用合约B，在合约B中，调用合约C</li>
</ul>
<p><img src="./imgs/call_other_2.png" alt="call_other_2"></p>
<p>日志如下：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	self_account: A,
	nest:<span>[</span>
		<span>2</span>: NestedRuntime <span>{</span>
			self_account: B,
			nest:<span>[</span>
				<span>3</span>: NestedRuntime <span>{</span>
				self_account: C,
				nest:<span>[</span><span>]</span>,
			<span>}</span>
			<span>]</span>,
		<span>}</span>  
	<span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa</title>
    <id>https://www.patract.io/europa/introduction/</id>
    <link href="https://www.patract.io/europa/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa"> Europa</h1>
<p>Europa是一个运行<code>FRAME Contracts pallet</code>并<strong>模拟节点的沙盒环境</strong>，同时也是一个运行Substrate runtime的框架。</p>
<ol>
<li>将Europa作为合约调试的沙盒（sandbox）时，Europa修改了<code>FRAME Contracts pallet</code>模块以跟踪合约执行过程，能够给合约开发人员提供<strong>丰富的合约执行中的信息，让合约的执行过程不再是一个黑盒</strong>，帮助合约开发人员调试Wasm合约；</li>
<li>使用Europa作为Substrate的框架（framework）时，你可以在不受Wasm编译问题的干扰下做Substrate Runtime开发（多用于实验性功能）。</li>
</ol>
<h2 id="作为substrate-runtime的框架"> 作为Substrate runtime的框架</h2>
<ol>
<li>
<p>Europa移除了一些不必要的功能模块，例如WASM executor，p2p等，仅保留了native的执行环境。</p>
</li>
<li>
<p>使用了<code>manual_seal</code>的出块方式（当收到新交易时就触发出块），使开发者不必受共识出块的影响，能更专注于合约的开发调试与日志分析。</p>
</li>
<li>
<p>提供了<code>state-kv</code>数据库，记录了每个区块的状态变更。</p>
<div><pre><code><span># print the modified state kvs for block 1</span>
$ ./target/debug/europa state-kv <span>1</span> -d europa_database
Nov <span>12</span> <span>15</span>:53:27.699  INFO modified state <span>for</span> block:0x6c119a8f7de42e330aca8b9d3587937aacbbc203cc21650b60644c2f2d33e7fb    
Nov <span>12</span> <span>15</span>:53:27.699  INFO       key:26aa394eea5630e07c48ae0c9558cef702a5c1b19ab7a04f536c519aca4983ac<span>|</span>value:<span>[</span>DELETED<span>]</span>    
Nov <span>12</span> <span>15</span>:53:27.699  INFO       key:26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850<span>|</span>value:05000000
<span># ... </span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>Europa除了提供Substrate框架中的基础rpc之外，还有一些特殊的rpc：</p>
<ul>
<li><code>europa_forwardToHeight (params: [height: NumberOf&lt;B&gt;])</code>：将区块快进到指定高度，对于测试跟区块高度相关的功能非常有帮助。</li>
<li><code>europa_backwardToHeight (params: [height: NumberOf&lt;B&gt;])</code>：将区块回退到指定高度，主要用来恢复状态。</li>
<li><code>europa_modifiedStateKvs (params: [number_or_hash: NumberOrHash&lt;B&gt;])</code>：提供区块高度或者区块哈希，查询对应区块中的状态变更。</li>
</ul>
</li>
<li>
<p>Europa除了使用<code>-d/--base-path</code>的可选项命令划分不同的工作目录，还能使用<code>-w/--workspace</code>在工作目录下声明不同的工作空间。</p>
</li>
</ol>
<h2 id="作为frame-contracts-pallet的沙盒环境"> 作为<code>FRAME Contracts pallet</code>的沙盒环境</h2>
<p>当开发合约时，Europa为开发者提供了<strong>更加详细的日志信息</strong>来辅助合约开发者定位问题，包括contracts执行日志与wasm执行栈。同时这个沙盒环境也具备上述Europa框架的功能，例如可以使用<code>europa_forwardToHeight</code>等rpc来控制合约的执行情况。</p>
<p>合约错误可能出现在三处：<code>ink!</code>层、合约内部业务逻辑、<code>pallet_contracts</code>层。有了这些详细的日志，使得开发者在调试时能够快速定位问题，特别是在合约间互相调用的情况下，Europa能够大幅度提升开发体验。</p>
<p>目前，在Europa上有两个自定义的ChainExtension可供使用，分别是Contract logger和ZKP feature。</p>
<h2 id="本章重点"> 本章重点</h2>
<p>由于本书主要关注点是Substrate的Wasm合约，因此后面章节的Europa相关的介绍均围绕与使用Europa合约调试相关。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa 调试示例</title>
    <id>https://www.patract.io/europa/sample/</id>
    <link href="https://www.patract.io/europa/sample/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-调试示例"> Europa 调试示例</h1>
<h2 id="duplicate-topics"> Duplicate topics</h2>
<ol>
<li>
<p>checkout <code>ink!</code> to commit <code>8e8fe09565ca6d2fad7701d68ff13f12deda7eed</code></p>
<div><pre><code>$ <span>cd</span> ink
$ <span>git</span> checkout 8e8fe09565ca6d2fad7701d68ff13f12deda7eed -b tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>
<p>在<code>ink/examples/erc20/lib.rs:L90</code> 在<code>Transfer</code>事件中把value改为 <code>0_u128</code></p>
<div><pre><code><span>#[ink(constructor)]</span>
<span>pub</span> <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
     <span>//...</span>
     <span>Self</span><span>::</span><span>env</span><span>(</span><span>)</span><span>.</span><span>emit_event</span><span>(</span><span>Transfer</span> <span>{</span>
        from<span>:</span> <span>None</span><span>,</span>
        to<span>:</span> <span>Some</span><span>(</span>caller<span>)</span><span>,</span>
        <span>// change this from `initial_supply` to `0_u128`</span>
        value<span>:</span> 0_u128<span>.</span><span>into</span><span>(</span><span>)</span> <span>// initial_supply,</span>
     <span>}</span><span>)</span><span>;</span>
     instance
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div></li>
<li>
<p>执行 <code>cargo +nightly contract build --debug</code> 来编译合约</p>
</li>
<li>
<p>使用 <a href="https://redspot.patract.io/en/tutorial/" target="_blank" rel="noopener noreferrer">RedSpot</a> or <a href="https://polkadot.js.org/apps" target="_blank" rel="noopener noreferrer"><code>Polkadot/Substrate Portal</code></a> 部署合约 ( 注意这里必须使用 erc20.wasm，而不是erc20-opt.wasm，否则无法正常打印wasm backtrace)</p>
</li>
</ol>
<p>在部署过程中，你会遇到 <code>DuplicateTopics</code> ，Europa日志如下：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    <span>#...</span>
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0xd183512b0<span>))</span>,
		<span>#...    </span>
		seal_deposit_event<span><span>((</span>Some<span>(</span>[<span>0x45726332303a3a5472616e736</span>....]<span>)</span><span>,</span> None<span>))</span></span>,
    <span>]</span>,
    trap_reason: TrapReason::SupervisorError<span>(</span>DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>23</span>, message: Some<span>(</span><span>"DuplicateTopics"</span><span>)</span> <span>}</span><span>)</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Host<span>(</span>DummyHostError<span>)</span> <span>}</span><span>))</span>
    	wasm backtrace: 
    	<span>|</span>  ink_env::engine::on_chain::ext::deposit_event<span>[</span><span>1623</span><span>]</span>
    	<span>|</span>  ink_env::engine::on_chain::impls::<span>&lt;</span>impl ink_env::backend::TypedEnvBackend <span>for</span> ink_env::engine::on_chain::EnvInstance<span>></span>::emit_event<span>[</span><span>1564</span><span>]</span>
    	<span>|</span>  ink_env::api::emit_event::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>1563</span><span>]</span>
    	<span>|</span>  <span>&lt;</span>ink_env::engine::on_chain::EnvInstance as ink_env::engine::OnInstance<span>></span>::on_instance<span>[</span><span>1562</span><span>]</span>
    	<span>|</span>  ink_env::api::emit_event<span>[</span><span>1561</span><span>]</span>
    	<span>|</span>  erc20::erc20::_::<span>&lt;</span>impl ink_lang::events::EmitEvent<span>&lt;</span>erc20::erc20::Erc2<span><span>0</span>></span> <span>for</span> ink_lang::env_access::EnvAccess<span>&lt;&lt;</span>erc20::erc20::Erc20 as ink_lang::env_access::ContractEnv<span>></span>::Env<span>>></span>::emit_event<span>[</span><span>1685</span><span>]</span>
        <span># ...</span>
        <span># ...</span>
    	<span>|</span>  deploy<span>[</span><span>1691</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2385</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>在日志中，你可以发现：</p>
<ol>
<li>在<code>env_trace</code>中最后一条记录是<code>seal_deposit_event</code>而不是<code>seal_return</code>。如果合约执行正常，最后一条记录应当是<code>seal_return</code>。</li>
<li><code>seal_deposit_event</code>的第二个参数为<code>None</code>，这意味着这个host_function没有被正常执行。<a href="https://github.com/patractlabs/substrate/blob/3624deb47cabe6f6cd44ec2c49c6ae5a29fd2198/frame/contracts/src/wasm/runtime.rs#L1399" target="_blank" rel="noopener noreferrer">相关实现</a>。</li>
<li>结合wasm backtrace，可以看到栈顶为<code>deposit_event</code>。</li>
</ol>
<p>综上，可以断定错误出现在<code>seal_deposit_event</code>这个host_function中。</p>
<h2 id="balance类型不一致"> Balance类型不一致</h2>
<p>假设链上的Balance定义为u64，而<code>ink!</code>中Balance定义为u128，部署了一个普通的erc20合约。</p>
<p>读取<code>total_supply</code>时，Europa中日志如下：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span>, origin: ErrorOrigin::Caller <span>}</span>,
    caller: 0000000000000000000000000000000000000000000000000000000000000000 <span>(</span>5C4hrfjw<span>..</span>.<span>)</span>,
    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 <span>(</span>5D9Wkfa3<span>..</span>.<span>)</span>,
    selector: 0xdb6375a8,
    args: None,
    value: <span>0</span>,
    gas_limit: <span>4999999999999</span>,
    gas_left: <span>4999865113466</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x0000000000000000<span>))</span>,
    <span>]</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
    	wasm backtrace:
    	<span>|</span>  core::panicking::panic_fmt.48<span>[</span><span>1956</span><span>]</span>
    	<span>|</span>  core::result::unwrap_failed<span>[</span><span>1057</span><span>]</span>
    	<span>|</span>  core::result::Result<span>&lt;</span>T,E<span>></span>::expect<span>[</span><span>1060</span><span>]</span>
    	<span>|</span>  ink_lang::dispatcher::deny_payment<span>[</span><span>1878</span><span>]</span>
    	<span>|</span>  call<span>[</span><span>1906</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2614</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>调用<code>tranfer</code>时，Europa中日志如下：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span>, origin: ErrorOrigin::Caller <span>}</span>,
    caller: 0000000000000000000000000000000000000000000000000000000000000000 <span>(</span>5C4hrfjw<span>..</span>.<span>)</span>,
    self_account: 2fe715301c9609c0c5ab75b24f2d8ad7dbe9671d7aebfeed80ed8963bc017955 <span>(</span>5D9Wkfa3<span>..</span>.<span>)</span>,
    selector: 0xdb6375a8,
    args: None,
    value: <span>0</span>,
    gas_limit: <span>4999999999999</span>,
    gas_left: <span>4999865113466</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x0000000000000000<span>))</span>,
    <span>]</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
    	wasm backtrace:
    	<span>|</span>  core::panicking::panic_fmt.48<span>[</span><span>1956</span><span>]</span>
    	<span>|</span>  core::result::unwrap_failed<span>[</span><span>1057</span><span>]</span>
    	<span>|</span>  core::result::Result<span>&lt;</span>T,E<span>></span>::expect<span>[</span><span>1060</span><span>]</span>
    	<span>|</span>  ink_lang::dispatcher::deny_payment<span>[</span><span>1878</span><span>]</span>
    	<span>|</span>  call<span>[</span><span>1906</span><span>]</span>
    	╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2614</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br></div></div><p>可以发现，无论是读取还是写入操作，都会出现<code>call -&gt; deny_payment -&gt; expect</code>这样的调用过程。原因是在<code>ink!</code>中，有如下代码：</p>
<div><pre><code><span>#[no_mangle]</span>
<span>fn</span> <span>call</span><span>(</span><span>)</span> <span>-></span> <span>u32</span> <span>{</span>
    <span>if</span> <span>true</span> <span>{</span>
     <span>::</span><span>ink_lang<span>::</span></span><span>deny_payment</span><span>::</span><span>&lt;&lt;</span><span>Erc20</span> <span>as</span> <span>::</span><span>ink_lang<span>::</span></span><span>ContractEnv</span><span>></span><span>::</span><span>Env</span><span>></span><span>(</span><span>)</span>
    		<span>.</span><span>expect</span><span>(</span><span>"caller transferred value even though all ink! message deny payments"</span><span>)</span>
    <span>}</span>
    <span>::</span><span>ink_lang<span>::</span></span><span>DispatchRetCode</span><span>::</span><span>from</span><span>(</span>
        <span>&lt;</span><span>Erc20</span> <span>as</span> <span>::</span><span>ink_lang<span>::</span></span><span>DispatchUsingMode</span><span>></span><span>::</span><span>dispatch_using_mode</span><span>(</span>
            <span>::</span><span>ink_lang<span>::</span></span><span>DispatchMode</span><span>::</span><span>Call</span><span>,</span>
        <span>)</span><span>,</span>
    <span>)</span>
    <span>.</span><span>to_u32</span><span>(</span><span>)</span>
<span>}</span>

<span>pub</span> <span>fn</span> <span>deny_payment</span><span>&lt;</span><span>E</span><span>></span><span>(</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span>
<span>where</span>
    <span>E</span><span>:</span> <span>Environment</span><span>,</span>
<span>{</span>
    <span>let</span> transferred <span>=</span> <span>ink_env<span>::</span></span><span>transferred_balance</span><span>::</span><span>&lt;</span><span>E</span><span>></span><span>(</span><span>)</span>
        <span>.</span><span>expect</span><span>(</span><span>"encountered error while querying transferred balance"</span><span>)</span><span>;</span>
    <span>if</span> transferred <span>!=</span> <span>&lt;</span><span>E</span> <span>as</span> <span>Environment</span><span>></span><span>::</span><span>Balance</span><span>::</span><span>from</span><span>(</span><span>0u32</span><span>)</span> <span>{</span>
        <span>return</span> <span>Err</span><span>(</span><span>DispatchError</span><span>::</span><span>PaidUnpayableMessage</span><span>)</span>
    <span>}</span>
    <span>Ok</span><span>(</span><span>(</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br></div></div><p>在<code>ink!</code>中，对于<code>off_chain</code>和<code>on_chain</code>，出现<code>expect</code>的时机是不同的。在<code>off_chain</code>中，是由于<code>ink_env::transferred_balance::&lt;E&gt;()</code>不能正确decoded。在<code>on_chain</code>中，由于<code>transferred!=0</code>导致<code>deny_payment</code>返回Error，在<code>call</code>中才出现<code>expect</code>。</p>
<p>由此可见，当前<code>ink!</code>在<code>off_chain</code>和<code>on_chain</code>中对某些情况是不完全一致的，造成调试的困扰。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa tutorial</title>
    <id>https://www.patract.io/europa/tutorial/</id>
    <link href="https://www.patract.io/europa/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-tutorial"> Europa tutorial</h1>
<p>Europa 作为一个模拟具备合约功能的节点沙盒环境，其接口（主要是rpc）对于大部分第三方工具都保持兼容，因此可以将Europa视为一个独立的节点进行操作。</p>
<h2 id="搭建开发环境"> 搭建开发环境</h2>
<p>Europa的环境与正常使用节点调试合约的环境无异，唯一的差别在于若需要打印Wasm的backtrace时，需要使用Patract提供的一个fork版本的<code>cargo-contract</code>，直到parity（官方）的<code>cargo-contract</code>合并Patract提交的功能之前。若不需要打印合约执行崩溃时的Wasm backtract，则使用官方提供的<code>cargo-contract</code>即可。</p>
<ul>
<li>
<p>编译并运行 Europa 节点</p>
<div><pre><code>$ <span>git</span> clone --recurse-submodules https://github.com/patractlabs/europa.git
<span>## or do following commands</span>
$ <span>git</span> clone https://github.com/patractlabs/europa.git
$ <span>cd</span> europa/vendor
$ <span>git</span> submodule update --init --recursive
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>也直接使用<code>cargo install</code>的方式安装Europa。（注意要添加上<code>--locked</code>以使用Europa当前依赖的Substrate版本）</p>
<div><pre><code>$ cargo <span>install</span> europa --git<span>=</span>https://github.com/patractlabs/europa.git --force --locked
</code></pre>
<div><span>1</span><br></div></div><p>运行Europa：</p>
<div><pre><code>$ ./target/release/europa --log<span>=</span>runtime<span>=</span>debug -d ./europa_database
<span># 若没有需要保留数据的需求，也可以使用`--tmp`运行Europa</span>
$ ./target/release/europa --log<span>=</span>runtime<span>=</span>debug --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>安装 <a href="https://github.com/patractlabs/cargo-contract" target="_blank" rel="noopener noreferrer">PatractLabs's <code>cargo-contract</code></a> （可选，若需要Wasm合约执行崩溃时的backtrace时才需要）</p>
<div><pre><code>$ cargo install cargo-contract --git https://github.com/patractlabs/cargo-contract --branch=v0.10.0 --force
</code></pre>
<div><span>1</span><br></div></div><p>如果开发者已经安装了官方的<code>cargo-contract</code>并且不想覆盖安装，可以采取手动编译的方式：</p>
<div><pre><code>$ <span>git</span> clone https://github.com/patractlabs/cargo-contract --branch<span>=</span>v0.10.0
$ <span>cd</span> cargo-contract
$ cargo build --release
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>编译合约</p>
<p><code>--debug</code>选项是Patract的<code>cargo-contract</code>提供的，若使用parity提供的<code>cargo-contract</code>则下面执行命令中都不需要<code>--debug</code>的选项。</p>
<div><pre><code>$ cargo-contract build --debug
<span># or</span>
$ cargo +nightly contract build --debug
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p><code>-d/--debug</code>能够在<code>target/ink</code>目录下<strong>替换</strong>原本的<code>*.wasm</code>及<code>*.contract</code>文件，替换后的Wasm、Contract文件关闭了编译过程中的代码优化条件，且包含了&quot;name section&quot;部分，用来帮助分析wasm调用栈的信息。</p>
<blockquote>
<p>如果在编译合约的时候没有使用Patract仓库中的<code>cargo-contract</code>并携带<code>-d/--debug</code>参数进行合约编译，则在合约执行过程中若出现wasm panic时，可能出现如下日志：</p>
<div><pre><code>wasm_error: Error::WasmiExecution(Trap(Trap { kind: Unreachable }))
   wasm backtrace:
   |  &lt;unknown&gt;[...]
   |  &lt;unknown&gt;[...]
   ╰─&gt;&lt;unknown&gt;[...]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></blockquote>
<blockquote>
<p>添加了<code>-d/--debug</code>后产生的编译产物一般比原产物大几百倍（例如原产物2.5k，新产物700k），因为新产物没有进行优化，且保留了大量调试信息。因此开发者也可以通过产物大小粗略判定是否是添加了<code>-d/--debug</code>选项后的产物。</p>
</blockquote>
</li>
</ul>
<h2 id="部署合约"> 部署合约</h2>
<p>开发者可以使用<a href="https://redspot.patract.io/zh-CN/tutorial/" target="_blank" rel="noopener noreferrer">Redspot</a>或者<a href="https://polkadot.js.org/apps/#/explorer" target="_blank" rel="noopener noreferrer">Substrate Protal</a>来部署合约。</p>
<p>注意，Europa的<code>extending types</code>如下：</p>
<div><pre><code><span>{</span>
  <span>"LookupSource"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
  <span>"Address"</span><span>:</span> <span>"MultiAddress"</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>例如使用Redspot部署，使用apps执行交易和查看状态。</p>
<p>Redspot部署一个合约：</p>
<div><pre><code>$ npx redspot run scripts/deploy.js
</code></pre>
<div><span>1</span><br></div></div><p>获取到部署成功的合约地址，在apps上添加一个已存在的合约：</p>
<p><img src="./imgs/add_exist.png" alt="add_exist"></p>
<h2 id="分析日志"> 分析日志</h2>
<p>使用Europa部署及执行合约的过程中会有如下详细信息的打印，这些信息是合约执行中的信息，可以方便的帮助开发人员定位合约中出现的问题。通过这些信息，合约的执行过程就不再是一个黑盒了。</p>
<p>日志的打印效果举例：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
    ext_result: <span>[</span>success<span>]</span> ExecReturnValue <span>{</span> flags: <span>0</span>, data:  <span>}</span>,
    caller: d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d <span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: 0144d6fc570d7bddda6f8e36141f179cd172324599b556ef514193f3105865f6 <span>(</span>5C6NMXaS<span>..</span>.<span>)</span>,
    selector: 0x9bae9d5e,
    args: 0x40420f00000000000000000000000000,
    value: <span>10000000000000000</span>,
    gas_limit: <span>200000000000</span>,
    gas_left: <span>190018947968</span>,
    env_trace: <span>[</span>
        seal_input<span>(</span>Some<span>(</span>0x9bae9d5e40420f00000000000000000000000000<span>))</span>,
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d<span>))</span>,
        <span>..</span>.
       seal_set_storage<span><span>((</span>Some<span>(</span><span>0x0300000001000000000000000000000000000000000000000000000000000000</span><span>)</span><span>,</span> Some<span>(</span><span>0x000000000000000000000000</span><span>))</span></span><span>)</span>,
    <span>]</span>,
    sandbox_result_ok: Value<span>(</span>
        I32<span>(</span>
            <span>0</span>,
        <span>)</span>,
    <span>)</span>,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><h3 id="contract执行日志"> Contract执行日志</h3>
<p>上面列举的日志案例，我们可以简单分析出以下信息：</p>
<ul>
<li><code>ext_result</code>： 可以表面这次合约调用执行的执行结果（通过交易调用与rpc调用都属于合约调用）；</li>
<li><code>caller</code>： 表面了调用者的公钥，合约调用合约则为父合约的公钥（与EVM的模型一致）；</li>
<li><code>self_account</code>：表面本合约的地址；</li>
<li><code>selector</code>: 被调用的方法的selector，通过这个属性可以判断出这次的调用是合约的哪个方法；</li>
<li><code>args</code>，<code>value</code>，<code>gas_limit</code>，<code>gas_limit</code>等表明了这次执行的相关参数及gas消耗；</li>
<li><code>env_trace</code>及<code>sandbox_result_ok</code>：表面了合约Wasm执行与<code>pallet-contracts</code>之间的交互信息，及Wasm执行器最终的结果（Wasm执行器结果与合约执行结果是不同概念）</li>
<li><code>nest</code>：描述了合约调用合约的关系，由于这里为空，表面这次调用只涉及一个合约执行。详细介绍见后文；</li>
</ul>
<p>由此可见，Europa提供的合约日志能够清晰的表面一次合约调用中的很多详细信息。若合约的开发者对合约模块<code>pallet-contracts</code>比较了解，则可以获得许多重要的调试信息以辅助定位合约问题。若合约开发者对合约模块了解较少，则例如<code>selector</code>，<code>caller</code>，<code>nest</code>等信息也能给合约开发过程中带来很大帮助，减少调试合约的时间。</p>
<p><strong>注意，当在apps上查看contracts中的messages时，apps会自动调用合约只读的messages获取当前合约的一些值，导致Europa会出现一些读取调用的日志，干扰正常判断。因此开发者需要辨别清楚哪块日志才是自己所需要的。</strong> 若使用发送请求都是能被自己控制的第三方客户端，则没有这方面的顾虑。</p>
<blockquote>
<p>开发者使用apps发送请求时，在Europa中辨别出需要日志的小tip：</p>
<p><code>1: NestedRuntime {}</code> 块下有一个<code>selector</code>字段，表示该次合约执行所使用的selector。开发者可以在metadata.json 中的<code>messages</code>部分中，获知当前调用的方法名对应的selector是什么，例如：</p>
<div><pre><code><span>"messages"</span><span>:</span> <span>[</span>
    <span>{</span>
      <span>"name"</span><span>:</span> <span>[</span>
        <span>"flip"</span>
      <span>]</span><span>,</span>
      <span>"selector"</span><span>:</span> <span>"0x633aa551"</span>
    <span>}</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>因此可以通过<code>selector</code>字段与日志中的<code>selector</code>进行比对，判定出当前通过apps发出的合约调用所对应的日志部分。</p>
</blockquote>
<h3 id="wasmi-panic-backtrace"> wasmi panic backtrace</h3>
<p>假设在<code>ink!</code>中编写合约的方法如下：</p>
<div><pre><code><span>#[ink(message)]</span>
<span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
    <span>let</span> from <span>=</span> <span>self</span><span>.</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>;</span>
    <span>self</span><span>.</span><span>transfer_from_to</span><span>(</span>from<span>,</span> to<span>,</span> value<span>)</span><span>?</span><span>;</span>
    <span>panic!</span><span>(</span><span>"123"</span><span>)</span><span>;</span>
    <span>Ok</span><span>(</span><span>(</span><span>)</span><span>)</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>调用该方法时，Europa中会打印如下日志（请注意当前该合约需要使用Patract的<code>cargo-contract</code>才会打印Wasm的Backtrace）：</p>
<div><pre><code><span>1</span>: NestedRuntime <span>{</span>
	ext_result: <span>[</span>failed<span>]</span> ExecError <span>{</span> error: DispatchError::Module <span>{</span>index:5, error:17, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span>, orign: ErrorOrigin::Caller <span>}</span><span>}</span>
    caller: d43593c715fdd31c61141abd04a99fd6822<span>..</span>.<span>(</span>5GrwvaEF<span>..</span>.<span>)</span>,
    self_account: b6484f58b7b939e93fff7dc10a654af7e<span>..</span><span>..</span> <span>(</span>5GBi41bY<span>..</span>.<span>)</span>,
    selector: 0xfae3a09d,
    args: 0x1cbd2d43530a44705ad088af313e18f80b5<span>..</span><span>..</span>,
    value: <span>0</span>,
    gas_limit: <span>409568000000</span>,
    gas_left: <span>369902872067</span>,
    env_trace: <span>[</span>
        seal_value_transferred<span>(</span>Some<span>(</span>0x00000000000000000000000000000000<span>))</span>,
        seal_input<span>(</span>Some<span>(</span>0xfae3a09d1cbd<span>..</span><span>..</span>.<span>))</span>,
        seal_get_storage<span><span>((</span>Some<span>(</span><span>0x0100000000000</span>....<span>)</span><span>,</span> Some<span>(</span><span>0x010000000100000001000000</span><span>))</span></span><span>)</span>,
        <span># ...</span>
        seal_caller<span>(</span>Some<span>(</span>0xd43593c715fdd31c61141abd<span>..</span>.<span>))</span>,
        seal_hash_blake256<span><span>((</span>Some<span>(</span><span>0x696e6b20686173</span>....<span>)</span><span>,</span> Some<span>(</span><span>0x0873b31b7a3cf</span>....<span>))</span></span><span>)</span>,
      	<span># ...  </span>
        seal_deposit_event<span><span>((</span>Some<span>(</span>[<span>0x45726332303a</span>...<span>.00000000000</span>]<span>)</span><span>,</span> Some<span>(</span><span>0x000</span>..<span>))</span></span><span>)</span>,
    <span>]</span>,
	trap_reason: TrapReason::SupervisorError<span>(</span>DispatchError::Module <span>{</span> index: <span>5</span>, error: <span>17</span>, message: Some<span>(</span><span>"ContractTrapped"</span><span>)</span> <span>}</span><span>)</span>,
    wasm_error: Error::WasmiExecution<span>(</span>Trap<span>(</span>Trap <span>{</span> kind: Unreachable <span>}</span><span>))</span>
        wasm backtrace: 
        <span>|</span>  core::panicking::panic<span>[</span><span>28</span><span>]</span>
        <span>|</span>  erc20::erc20::_::<span>&lt;</span>impl erc20::erc20::Erc2<span><span>0</span>></span>::transfer<span>[</span><span>1697</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::__ink_Msg<span>&lt;</span><span>[</span><span>(</span><span>)</span><span>;</span> <span>2644567034</span><span>]</span><span>></span> as ink_lang::traits::MessageMut<span>></span>::CALLABLE::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>611</span><span>]</span>
        <span>|</span>  core::ops::function::FnOnce::call_once<span>[</span><span>610</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute<span>></span>::execute::<span>{</span><span>{</span>closure<span>}</span><span>}</span><span>[</span><span>1675</span><span>]</span>
        <span>|</span>  ink_lang::dispatcher::execute_message_mut<span>[</span><span>1674</span><span>]</span>
        <span>|</span>  <span>&lt;</span>erc20::erc20::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute<span>></span>::execute<span>[</span><span>1692</span><span>]</span>
        <span>|</span>  erc20::erc20::_::<span>&lt;</span>impl ink_lang::contract::DispatchUsingMode <span>for</span> erc20::erc20::Erc2<span><span>0</span>></span>::dispatch_using_mode<span>[</span><span>1690</span><span>]</span>
        <span>|</span>  call<span>[</span><span>1691</span><span>]</span>
        ╰─<span>></span><span>&lt;</span>unknown<span>></span><span>[</span><span>2387</span><span>]</span>
    ,
    nest: <span>[</span><span>]</span>,
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>从Europa的日志中，我们可以分析出如下调用过程：</p>
<div><pre><code>call -<span>></span> dispatch_using_mode -<span>></span> <span>..</span>. -<span>></span> transfer -<span>></span> panic 
</code></pre>
<div><span>1</span><br></div></div><p>因此合约开发者可以定位到产生这次panic的原因是因为<code>transfer</code>这个函数中出现了<code>panic</code>导致。</p>
<p>以上为简单的日志分析说明，更多特殊的情况将在后面的“示例”章节中介绍。</p>
<h2 id="自定义chainextensions"> 自定义ChainExtensions</h2>
<h3 id="ink-logger"> ink logger</h3>
<p>查看<a href="https://github.com/patractlabs/ink-log" target="_blank" rel="noopener noreferrer">ink-log</a>。</p>
<h3 id="zkp-feature"> ZKP feature</h3>
<p>查看 <a href="https://github.com/patractlabs/zkmega" target="_blank" rel="noopener noreferrer">zkMega</a>，相关合约示例<a href="https://github.com/patractlabs/metis/tree/master/groth16" target="_blank" rel="noopener noreferrer">metis/groth16</a>。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa 的Wasm Backtrace</title>
    <id>https://www.patract.io/europa/wasm_backtrace/</id>
    <link href="https://www.patract.io/europa/wasm_backtrace/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-的wasm-backtrace"> Europa 的Wasm Backtrace</h1>
<p><code>pallet-contracts</code>的执行包含“合约模型”中的执行与Wasm中的执行。其中</p>
<ul>
<li>合约模型中的执行过程通过Wasm的 host_function 转移到了 <code>pallet-contracts</code> 模块中执行，若出现panic或者错误定位可以让节点的runtime以Native运行的形式来定位。</li>
<li>Wasm 中的执行过程由于处于Wasm虚拟机中，因此对于外界而言是黑盒，若内部执行过程出现了崩溃异常，只能由Wasm执行器对外展示。</li>
</ul>
<p>Europa 的 <code>pallet-contracts</code> 模块当前支持2种执行器：</p>
<ul>
<li><code>wasmi</code>：由parity研发的Wasm解释器，当Wasm执行出现panic时只会返回错误，没有Backtrace。Patract fork 了parity的wasmi，在原基础上添加了执行栈的跟踪与打印。当Wasm的执行过程出现Panic的时候，将当前的执行栈及相应信息通过错误一并返回。</li>
<li><code>wasmtime</code>：Wasm的JIT执行器，已经自带了执行崩溃时的Backtrace。</li>
</ul>
<h2 id="europa-能打印出-wasm-backtrace-的条件"> Europa 能打印出 Wasm Backtrace 的条件</h2>
<p>Wasm能够打印Backtrace，要求合约编译出的Wasm文件里有“name section”段。由于parity提供的<code>cargo-contract</code>已经封装了许多操作，因此<strong>在当前</strong>其默认操作中是以最优优化方式去编译合约，在这个过程中会去除掉“name section”段。另一方面<code>cargo-contract</code>也没有提供对应的接口或选项允许开发者调整合约编译使用的优化条件及是否保留一些调试信息。因此Patract只能提供一个修改版本的<code>cargo-contract</code>，开发者使用这个修改版的<code>cargo-contract</code>可编译出携带“name section”段的合约Wasm文件。</p>
<p>另一方面release的编译中会对原代码有优化，通过优化后的Backtrace来定位bug有可能会受到干扰，因此最好能降低优化等级，这样崩溃时的Backtrace才会最大可能性和原代码相匹配。</p>
<h2 id="安装-patract-仓库下的cargo-contract"> 安装 Patract 仓库下的<code>cargo-contract</code></h2>
<ol>
<li>
<p>安装 <a href="https://github.com/patractlabs/cargo-contract" target="_blank" rel="noopener noreferrer">PatractLabs's <code>cargo-contract</code></a></p>
<div><pre><code>$ cargo install cargo-contract --git https://github.com/patractlabs/cargo-contract --branch=v0.10.0 --force
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>由于当前 parity 的 <code>cargo-contract</code> 发布的版本为 <code>v0.10.0</code>，因此我们Patract 基于这个版本添加了功能。若将来<code>cargo-contract</code>继续升级，Patract 也会继续维护。</p>
</blockquote>
<p>通过这种方式安装的 <code>cargo-contract</code> 将会<strong>覆盖</strong>已安装过的的<code>cargo-contract</code>。因此请注意留意当前环境中的<code>cargo-contract</code>来自哪个仓库，以防止定位问题时收到干扰。</p>
<p>执行命令：</p>
<div><pre><code>$ cargo <span>install</span> --list <span>|</span> <span>grep</span> cargo-contract
cargo-contract v0.10.0 <span>(</span>https://github.com/patractlabs/cargo-contract?branch<span>=</span>v0.10.0<span>#106081f1):</span>
cargo-contract
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>可通过列出的结果判定当前环境中的<code>cargo-contract</code>安装来自什么源。例如上面的结果即来自Patract。若没有括号及其中的内容则表示来自<code>crates.io</code>。</p>
</li>
<li>
<p>如果开发者已经安装了官方的<code>cargo-contract</code>并且不想覆盖安装，可以采取手动编译的方式。</p>
<div><pre><code>$ <span>git</span> clone https://github.com/patractlabs/cargo-contract --branch<span>=</span>v0.10.0
$ <span>cd</span> cargo-contract
$ cargo build --release
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>编译好后可以将编译的产物移动到任意可以被全局访问的路径，并重命名（以防和已安装过的cargo-contract冲突）。</p>
<div><pre><code>$ <span>cp</span> target/release/cargo-contract <span>&lt;</span>to any path<span>></span>/patract-cargo-contract
</code></pre>
<div><span>1</span><br></div></div><p>后续在 ink! 合约的编译过程中则使用 <code>patract-cargo-contract xxx</code> 替代 <code>cargo +nighlty contract xxx</code> 执行相应命令。（请注意这种方式要求 default toolchain 为 nightly）</p>
</li>
</ol>
<h2 id="使用-patract-的-cargo-contract-生成携带-name-section-段的-wasm-contract-文件"> 使用 Patract 的 cargo-contract 生成携带 “name section” 段的 <code>*.wasm/*.contract</code> 文件</h2>
<p>Patract 的 <code>cargo-contract</code> 提供 <code>-d/--debug</code> 选项。当执行一下命令时：</p>
<div><pre><code>$ cargo +nightly contract build
</code></pre>
<div><span>1</span><br></div></div><p>生成的<code>*.wasm/*.contract</code> 文件与parity官方的<code>cargo-contract</code>执行结果一致。</p>
<p>当执行以下命令时：</p>
<div><pre><code>$ cargo +nightly contract build --debug
</code></pre>
<div><span>1</span><br></div></div><p>则生成的<code>*.wasm/*.contract</code> 文件就是没有经过优化，且携带“name section”段的<code>*.wasm/*.contract</code> 文件。相当于通过这种方式生成的文件<strong>替换</strong>了原本生成逻辑生成的文件。</p>
<p><strong>请注意通过这种模式生成的编译产物，一般情况下其大小是原产物的几百倍</strong>。因此开发者可以留意生成产物的大小粗略判定是通过那种编译方式生成的编译产物。</p>
<p>例如如下示例：</p>
<div><pre><code>$ <span>cd</span> target/ink
$ <span>ls</span> -h
-rw-rw-r-- <span>1</span> root root <span>1</span>.5M <span>3</span>月  <span>12</span> <span>16</span>:01 flipper.contract
-rw-rw-r-- <span>1</span> root root <span>6</span>.1K <span>3</span>月  <span>12</span> <span>15</span>:34 flipper.contract.old
-rw-rw-r-- <span>1</span> root root 732K <span>3</span>月  <span>12</span> <span>16</span>:00 flipper.wasm
-rw-rw-r-- <span>1</span> root root <span>2</span>.5K <span>3</span>月  <span>12</span> <span>15</span>:34 flipper.wasm.old
-rw-rw-r-- <span>1</span> root root <span>2</span>.1K <span>3</span>月  <span>12</span> <span>16</span>:01 metadata.json
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>带<code>*.old</code> 文件表示是由parity版本的<code>cargo-contract</code>生成（第一次编译后重命名过），反之的同名文件是由Patract的<code>cargo-contract</code>并加上了<code>--debug</code>命令生成。可以看到新文件比老文件大许多倍。而<code>metadata.json</code>则是没有变化的。</p>
<h2 id="wasm-backtrace-解释"> Wasm Backtrace 解释</h2>
<p>TODO：待完成</p>
<h2 id="实验性功能"> 实验性功能</h2>
<h3 id="wasm-backtrace-打印行号-只支持wasmtime"> Wasm Backtrace 打印行号（只支持Wasmtime）</h3>
<p>TODO：该部分未完成</p>
<p>启动Europa的时候添加<code>WASMTIME_BACKTRACE_DETAILS=1</code>或者将这个变量设置成环境变量：</p>
<div><pre><code><span>WASMTIME_BACKTRACE_DETAILS</span><span>=</span><span>1</span> europa --tmp
<span># or use</span>
<span>export</span> <span>WASMTIME_BACKTRACE_DETAILS</span><span>=</span><span>1</span>
europa --tmp <span># run europa in normal way</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>那么在europa的日中的<code>wasm_error</code>部分，将会出现崩溃栈对应原代码中的行号：</p>
<div><pre><code>wasm_error: Error::Trap<span>(</span>
    Trap <span>{</span>
        code: TrapCode::UnreachableCodeReached,
        trace: <span>[</span>
            <span>"wasm trap: unreachable"</span>,
            <span>"wasm backtrace:"</span>,
            <span>"    0: 0x31b2 - &lt;unknown>!core::panicking::panic::he000af669cfcac01"</span>,
            <span>"    1: 0x3c8c - &lt;unknown>!flipper::flippter::_::&lt;impl flipper::flippter::Flippter>::flip::h12b84979a77ae484"</span>,
            <span>"    2: 0x10fa - core::result::Result&lt;T,E>::map_err::h576871030fe833d4"</span>,
            <span>"                    at /home/clearloop/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-2.0.1/src/codec.rs:1199:31"</span>,
            <span>"    3: 0x10d6 - core::result::Result&lt;T,E>::map_err::h576871030fe833d4"</span>,
            <span>"                    at /home/clearloop/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-2.0.1/src/codec.rs:1198"</span>,
            <span>"    4: 0x3966 - &lt;unknown>!&lt;flipper::flippter::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute>::execute::{{closure}}::hf35b139aaf5fba3b"</span>,
            <span>"    5: 0x3941 - &lt;unknown>!ink_lang::dispatcher::execute_message_mut::hf62eb790d230d371"</span>,
            <span>"    6: 0x3c12 - &lt;unknown>!&lt;flipper::flippter::_::_::__ink_MessageDispatchEnum as ink_lang::dispatcher::Execute>::execute::heae3e5bbfc02afa0"</span>,
            <span>"    7: 0x3a7a - &lt;unknown>!flipper::flippter::_::&lt;impl ink_lang::contract::DispatchUsingMode for flipper::flippter::Flippter>::dispatch_using_mode::h8e0c4495e09cd910"</span>,
            <span>"    8: 0x3ba3 - &lt;unknown>!call"</span>,
            <span>"    9: 0xf704 - &lt;unknown>!&lt;wasm function 638>"</span>,
            <span>""</span>,
        <span>]</span>,
    <span>}</span>,
<span>)</span>,
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>在这段backtrace日志中，一些能解析出行号的部分将会在那一行的最后附加错误栈中的函数对应的行号，例如：</p>
<div><pre><code><span>"2: 0x10fa - core::result::Result&lt;T,E>::map_err::h576871030fe833d4"</span>,
            <span>"                    at /home/clearloop/.cargo/registry/src/github.com-1ecc6299db9ec823/parity-scale-codec-2.0.1/src/codec.rs:1199:31"</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>中的<code>codec.rs:1199:31</code>部分即表示该错误栈中的这一帧对应于<code>codec.rs</code>这个文件的行<code>1199</code>，列<code>31</code>。其余行由于解析还不充分或者是由于代码由宏生成，因此还没有行号。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Europa Wasm executor</title>
    <id>https://www.patract.io/europa/wasm_executor/</id>
    <link href="https://www.patract.io/europa/wasm_executor/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="europa-wasm-executor"> Europa Wasm executor</h1>
<p>TODO：未完成</p>
<p>Europa 提供了不同的 Wasm 执行器执行合约。当前提供了<code>wasmi</code>与<code>wasmtime</code>。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">go-patract</title>
    <id>https://www.patract.io/himalia/go-patract/</id>
    <link href="https://www.patract.io/himalia/go-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="go-patract"> go-patract</h1>
<h2 id="intruduction"> Intruduction</h2>
<p>Most contract behaviors are highly related to context. In addition to interacting with the chain, user-oriented contract applications also need to provide users with current relevant context status information:</p>
<div><pre><code>+--DAPP-Front-End--------------+        +---Chain-------------------------+
|                              |        |                                 |
| +----+  +------------------+ |        | +-------+     +-------+         |
| |    |  |                  | | Commit | |       |     |       |         |
| |    |  |   Polkadot-JS    +------------&gt; Node  +----&gt;+ Node  |         |
| |    +-&gt;+                  | |   Tx   | |       |     |       |         |
| |    |  |                  | |        | +-------+     +----+-++         |
| |    |  +------------------+ |        |                    ^ |          |
| | UI |                       |        +---------------------------------+
| |    |  +------------------+ |                             | |
| |    |  |                  | |        +--DAPP-Server--------------------+
| |    |  |                  | |  Push  | +--------+     +-----v-------+  |
| |    +&lt;-+   Model          +&lt;-----------+        +-----+             |  |
| |    |  |                  | |        | | Server |     |  PatractGo  |  |
| |    |  |                  +------------&gt;        +-----+             |  |
| +----+  +------------------+ | Query  | +----+---+     +-----+-------+  |
+------------------------------+        |      |               |          |
                                        |      |         +-----v-------+  |
                                        |      |         |             |  |
                                        |      +--------&gt;+   DataBase  |  |
                                        |                |             |  |
                                        |                +-------------+  |
                                        |                                 |
                                        +---------------------------------+
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>PatractGo is mainly responsible for implementing micro-services in a DApp. Unlike querying the state of the chain API, PatractGo can monitor the calls and events generated by the specified contract. Developers can obtain the state storage based on this information to maintain consistent state with the chain. Through data services based on a typical API-DB architecture, the front-end DApp can efficiently and concisely obtain the state on the chain as context information.</p>
<p>Based on the API of chain nodes, PatractGo obtains block information and summarizes and filters it, and sends contract-related messages and events based on metadata analysis to the handler protocol specified by the developer. For example, for a typical ERC20 contract, the developer can use the channel to subscribe to all transfer events that occur, and then synchronize them into the database, so that other microservices can provide services corresponding to the token data of the account, such as querying the current token holding distribution and other logics.</p>
<p>Therefor, PatractGo will achieve the following support:</p>
<ul>
<li>Complete the secondary packaging of the contract module interface, complete operations such as <code>put_code</code>, <code>call</code>, <code>instantiate</code>, etc.</li>
<li>Parse the metadata.json information of the contract, and support the automatic generation of http service interface for the metadata corresponding contract</li>
<li>Scanning and monitoring support of the contract status on the chain for statistics and analysis</li>
<li>Basic command line tool support for native interaction with the contract, mainly used to test the security of the contract</li>
<li>SDK development examples for ERC20 contract support</li>
</ul>
<h2 id="design"> Design</h2>
<p>PatractGo consists of the following packages:</p>
<ul>
<li><code>patractgo/metadata</code> contract metadata processing, and metadata-based contract processing</li>
<li><code>patractgo/rpc/native</code> re-encapsulation of the contract module interface to provide the contract-related interaction based on chain RPC</li>
<li><code>patractgo/rpc</code> implement the interaction with the contract based on metadata</li>
<li><code>patractgo/rest</code> implements an http service based on metadata to interact with the contract</li>
<li><code>patractgo/observer</code> Monitoring and Scanning support for contract status on the chain</li>
<li><code>patractgo/contracts/erc20</code> supports ERC20 contracts and examples</li>
<li><code>patractgo/tools</code> some tools for contracts develop</li>
</ul>
<p>Currently, we haven't designed the module which could <strong>auto-gen code</strong> for a contract based on a metadata, thus we provide
<code>patractgo/contracts/erc20</code> as an example to show how to warp a contract as a go source file.</p>
<p>This <strong>auto contract code generator</strong> feature would be developed with <code>java-patract</code> repo later (in next version), <strong>for their have same logic to generate the code for contracts</strong>.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Himalia</title>
    <id>https://www.patract.io/himalia/introduction/</id>
    <link href="https://www.patract.io/himalia/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="himalia"> Himalia</h1>
<p>Himalia 是 Patract 构建的一系列不同语言的访问链<code>pallet-contracts</code>合约模块的sdk库的总称。对于Substrate而言，已经存在了一些面向不同语言的访问链的sdk。但是由于<code>pallet-contracts</code>模块的特殊性，需要继续构建基于访问链的sdk上的访问合约模块的sdk。其特殊性主要表现在：</p>
<ul>
<li>合约的部署与调用（包含rpc调用与交易调用）需要依据合约的metadata.json（类似于Solidity的abi文件）提供的信息组装参数的顺序的与编码，而链的metadata只能告知链的sdk该链上存在合约模块的<code>instantiate</code>，<code>call</code>等方法，不可能告知某个合约的调用参数的信息。因此对于合约，需要构建能解析并支持合约metadata的功能。</li>
<li>合约的Event也需要依据合约的metadata.json进行解析。因此若使用链的sdk，只能监听到出现了合约模块的event，但是却无法解析出event中的内容。因此需要提供合约的sdk支持event的监听。</li>
<li>合约的状态（存储）位于子树，且其key的编码与分配方式与runtime不一致。合约存储的key的编码分配方式与该合约所使用的合约语言框架有关（例如Ask!的实现有可能与ink!不一样），因此需要针对不同的合约语言框架实现对应的存储解析方式。同时这个解析过程也十分依赖合约本身提供的metadata。</li>
<li>合约的开发者为广大的项目方，而链的开发者大部分情况下为开发链的项目方。因此在管理私钥的场景方面会出现比较大的区别。很多情况下与链高权限相关的私钥管理为节点自身，数量比较少且门槛高，或者很多情况下都依托于多签或者投票控制。而合约的开发者很广泛，后台安全管理质量参差不齐，另一方面很多合约都只有一个私钥进行控制。因此在对于合约模块的调用上，在私钥管理方面更需要一个高安全低门槛的解决方案。因此合约sdk可以在这些场景上做特殊处理，以减少合约开发者安全管理的门槛。</li>
</ul>
<p>因此 Himalia 是有十分重要的存在理由的。Himalia的定位类似于 Ethereum 生态里的 Web3J, Web3py 等等。</p>
<h2 id="项目仓库地址"> 项目仓库地址</h2>
<p>当前 Himalia 提供的不同语言的合约sdk有如下版本：</p>
<ul>
<li>go: https://github.com/patractlabs/go-patract</li>
<li>python: https://github.com/patractlabs/py-patract</li>
<li>java: 还未实现</li>
<li>c#(.net): 还未实现</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">py-patract</title>
    <id>https://www.patract.io/himalia/py-patract/</id>
    <link href="https://www.patract.io/himalia/py-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="py-patract"> py-patract</h1>
<p>PatractPy is a contract SDK to support the development of Python scripts that interact with contracts, including automated scripts to support testing. Unlike PatractGo, PatractPy is mainly for script development, so PatractPy mainly completes contract-related RPC interfaces, and completes contract deployment and instantiation-related operations.</p>
<p>PatractPy will provide support for <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a> env, which is a good environment for contract exec sandbox,
With PatractPy, we can write contract unittest by python, which is more friendly to developer and can easy use other test tools.</p>
<p>PatractPy will be based on <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a>, which is a Python sdk for Substrate.</p>
<p>Element Group for disscusion: https://app.element.io/#/room/#PatractLabsDev:matrix.org</p>
<p>PatractPy will achieve the following support:</p>
<ul>
<li>Some support that missing in <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a>, which is needed for contracts</li>
<li>Provide Scanning and monitoring support for contract to do statistics and analysis</li>
<li>Provide a SDK development example for ERC20 contract</li>
<li>Support For unittest to canvas or <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a> env.</li>
</ul>
<h2 id="basic-apis-for-contracts"> Basic Apis For Contracts</h2>
<p>As <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">polkascan's Python Substrate Interface</a> has provide some support to contract api, so we not need to important the api for contract calls, but there is some api to add:</p>
<ul>
<li><code>SubstrateSubscriber</code> is a subscriber support to subscribe data changes in chain, for example, the events in chain.</li>
<li><code>get_contract_event_type</code> add event decode support for contracts.</li>
</ul>
<p>The basic api split into 2 parts:</p>
<ul>
<li>Contract, include:
<ul>
<li>contractExecutor: This api could construct an extrinsic to call a contract, would be packed into a block and change state.</li>
<li>contractReader: This api could construct a rpc request to call a contract, do not pack into a block and do not change any state.</li>
<li>contractCreator: This api is used for <code>instantiate</code> a contract and holding the WASM code and metadata, receive following parameters:
<ul>
<li><code>gas_limit</code></li>
<li><code>endowment</code></li>
<li><code>deployment_salt</code> (<code>salt</code> parameter in <code>instantiate</code>)</li>
</ul>
</li>
<li>ContractAPI: This api is used for <code>call</code> a contract, is a wrapper for <code>contractExecutor</code> and <code>contractReader</code>, developers could use this api to react with contracts. This api could create a instance depends on the metadata, auto generate the contract access functions based on the contract. And the auto-gen functions receive the parameters which defined in contracts, besides receive following common parameters:
<ul>
<li><code>gas_limit</code></li>
<li><code>value</code> (notice, if current call's <code>payable</code> is false, this <code>value</code> must be <code>0</code>)</li>
</ul>
</li>
<li>ContractFactory: This api is used for constructing a contract instance in python, and developer could use this instance to access contract. This is a wrapper for <code>contractCreator</code> and <code>ContractAPI</code></li>
</ul>
</li>
<li>Observer, include:
<ul>
<li>ContractObserver: This api is used for listen the events in contracts.</li>
</ul>
</li>
</ul>
<p>All methods which belong to the instance of <code>ContractAPI</code> and <code>ContractFactory</code> <strong>receive a keypair as the first parameter</strong>, as the sender for this operation. And from the second parameter, receive the parameters defined in contracts.</p>
<h3 id="contractfactory-and-contractapi-is-used-to-react-with-contracts"> <code>ContractFactory</code> and <code>ContractAPI</code> is used to react with contracts</h3>
<p>we add a factory to put code and deploy contracts to chain:</p>
<div><pre><code>factory <span>=</span> ContractFactory<span>.</span>create_from_file<span>(</span>
    substrate<span>=</span>substrate<span>,</span> 
    code_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

res <span>=</span> factory<span>.</span>put_code<span>(</span>alice<span>)</span> <span># alice is the keypair for `//Alice`</span>
<span>print</span><span>(</span>res<span>.</span>is_succes<span>)</span>

<span># this api is `ContractAPI`</span>
api <span>=</span> factory<span>.</span>new<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>,</span> endowment<span>=</span><span>10</span><span>**</span><span>15</span><span>,</span> gas_limit<span>=</span><span>1000000000000</span><span>)</span>
<span>print</span><span>(</span>api<span>.</span>contract_address<span>)</span> <span># contract_address is the deployed contract</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><p>The factory will generate constructors from metadata file.</p>
<p>We add api by metadata for Contract, api will auto generate caller for contract from metadata:</p>
<div><pre><code><span># create a ContractAPI from an existed contract address</span>
api <span>=</span> ContractAPI<span>(</span>contract_address<span>,</span> contract_metadata<span>,</span> substrate<span>)</span>

<span># api will auto generate caller for contract from metadata</span>
alice_balance_old <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> alice<span>.</span>ss58_address<span>)</span> <span># bob is the keypair for `//Bob`</span>

res <span>=</span> api<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>100000</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer res </span><span><span>{</span>res<span>.</span>error_message<span>}</span></span><span>'</span></span><span>)</span>
<span>print</span><span>(</span>res<span>.</span>is_succes<span>)</span>

alice_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> alice<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer alice_balance </span><span><span>{</span>alice_balance<span>}</span></span><span>'</span></span><span>)</span>

bob_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> bob<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer bob_balance </span><span><span>{</span>bob_balance<span>}</span></span><span>'</span></span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br></div></div><p>The api will generate exec and read api from metadata file, for example:</p>
<div><pre><code>      <span>{</span>
        <span>"args"</span><span>:</span> <span>[</span>
          <span>{</span>
            <span>"name"</span><span>:</span> <span>"owner"</span><span>,</span>
            <span>"type"</span><span>:</span> <span>{</span>
              <span>"displayName"</span><span>:</span> <span>[</span>
                <span>"AccountId"</span>
              <span>]</span><span>,</span>
              <span>"type"</span><span>:</span> <span>5</span>
            <span>}</span>
          <span>}</span>
        <span>]</span><span>,</span>
        <span>"docs"</span><span>:</span> <span>[</span>
          <span>" Returns the account balance for the specified `owner`."</span><span>,</span>
          <span>""</span><span>,</span>
          <span>" Returns `0` if the account is non-existent."</span>
        <span>]</span><span>,</span>
        <span>"mutates"</span><span>:</span> <span>false</span><span>,</span>
        <span>"name"</span><span>:</span> <span>[</span>
          <span>"balance_of"</span>
        <span>]</span><span>,</span>
        <span>"payable"</span><span>:</span> <span>false</span><span>,</span>
        <span>"returnType"</span><span>:</span> <span>{</span>
          <span>"displayName"</span><span>:</span> <span>[</span>
            <span>"Balance"</span>
          <span>]</span><span>,</span>
          <span>"type"</span><span>:</span> <span>1</span>
        <span>}</span><span>,</span>
        <span>"selector"</span><span>:</span> <span>"0x56e929b2"</span>
      <span>}</span><span>,</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br></div></div><p>In api, can call by:</p>
<div><pre><code>bob_balance <span>=</span> api<span>.</span>balance_of<span>(</span>bob<span>,</span> bob<span>.</span>ss58_address<span>)</span>
logging<span>.</span>info<span>(</span><span><span>f'transfer bob_balance </span><span><span>{</span>bob_balance<span>}</span></span><span>'</span></span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="contractobserver-is-used-to-listen-contracts-events"> <code>ContractObserver</code> is used to listen contracts events</h3>
<p>ContractObserver can observer events for a contract:</p>
<div><pre><code>substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>"ws://127.0.0.1:9944"</span><span>,</span> type_registry_preset<span>=</span><span>'canvas'</span><span>)</span>
contract_metadata <span>=</span> ContractMetadata<span>.</span>create_from_file<span>(</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span><span>,</span>
    substrate<span>=</span>substrate
<span>)</span>
observer <span>=</span> ContractObserver<span>(</span><span>"0x8eaf04151687736326c9fea17e25fc5287613693c912909cb226aa4794f26a48"</span><span>,</span> contract_metadata<span>,</span> substrate<span>)</span>

<span># for some handlers (callbacks)</span>
observer<span>.</span>scanEvents<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>The handler function can take the erc20 support as a example.</p>
<h2 id="special-case-erc20-api"> Special case: ERC20 API</h2>
<p>Except react contract by <code>ContractAPI</code>, developers could create the wrapper by themself to react with corresponding contract. <code>py-contract</code> create an <code>ERC20 API</code> as an example to show this.</p>
<p>ERC20 api provide a wapper to erc20 contract exec, read and observer events, it can be a example for contracts api calling.</p>
<div><pre><code>
<span># init api</span>
substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>"ws://127.0.0.1:9944"</span><span>,</span> type_registry_preset<span>=</span><span>'canvas'</span><span>)</span>

contract_metadata <span>=</span> ContractMetadata<span>.</span>create_from_file<span>(</span>
    metadata_file<span>=</span>os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span><span>,</span>
    substrate<span>=</span>substrate
<span>)</span>

alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>

<span># erc20 api</span>
erc20 <span>=</span> ERC20<span>.</span>create_from_contracts<span>(</span>
    substrate<span>=</span> substrate<span>,</span> 
    contract_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span># deplay a erc20 contract</span>
erc20<span>.</span>put_and_deploy<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>)</span>

<span># read total supply</span>
total_supply <span>=</span> erc20<span>.</span>totalSupply<span>(</span><span>)</span>

<span># transfer</span>
erc20<span>.</span>transfer_from<span>(</span>alice<span>,</span>
    from_acc<span>=</span>alice<span>.</span>ss58_address<span>,</span> 
    to_acc<span>=</span>bob<span>.</span>ss58_address<span>,</span> 
    amt<span>=</span><span>10000</span><span>)</span>

erc20<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>10000</span><span>)</span>

<span># get balance</span>
alice_balance <span>=</span> erc20<span>.</span>balance_of<span>(</span>alice<span>.</span>ss58_address<span>)</span>

<span># approve</span>
erc20<span>.</span>approve<span>(</span>alice<span>,</span> spender<span>=</span>bob<span>.</span>ss58_address<span>,</span> amt<span>=</span><span>10000</span><span>)</span>

<span># get allowance</span>
alice_allowance <span>=</span> erc20<span>.</span>allowance<span>(</span>alice<span>.</span>ss58_address<span>,</span> bob<span>.</span>ss58_address<span>)</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br></div></div><p><code>ERC20Observer</code> is a event observer for erc20 contract:</p>
<div><pre><code>observer <span>=</span> ERC20Observer<span>.</span>create_from_address<span>(</span>
    substrate <span>=</span> substrate<span>,</span> 
    contract_address <span>=</span> contract_address<span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

<span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>


observer<span>.</span>scanEvents<span>(</span>on_transfer <span>=</span> on_transfer<span>,</span> on_approval <span>=</span> on_approval<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="observer-for-contracts"> Observer For Contracts</h3>
<p><code>ContractObserver</code> is a observer to listen events by contract with a given address:</p>
<div><pre><code>observer <span>=</span> ContractObserver<span>.</span>create_from_address<span>(</span>
    substrate <span>=</span> substrate<span>,</span> 
    contract_address <span>=</span> <span>'contract_address'</span><span>,</span>
    metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
<span>)</span>

<span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

<span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
    logging<span>.</span>info<span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

observer<span>.</span>scanEvents<span>(</span>from_num<span>,</span> to_num<span>,</span> <span>{</span>
    <span>'Transfer'</span><span>:</span> on_transfer<span>,</span>
    <span>'Approve'</span><span>:</span> on_approval
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><p><code>handlers</code> is a hander dictionary by name to hander function.</p>
<h2 id="unittest-node-environment"> Unittest Node Environment</h2>
<p>PatractPy can support write contract unittest by node environment.</p>
<p>At First We need install <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a>.</p>
<div><pre><code><span>from</span> patractinterface<span>.</span>contracts<span>.</span>erc20 <span>import</span> ERC20
<span>from</span> patractinterface<span>.</span>unittest<span>.</span>env <span>import</span> SubstrateTestEnv

<span>class</span> <span>UnittestEnvTest</span><span>(</span>unittest<span>.</span>TestCase<span>)</span><span>:</span>
    <span>@classmethod</span>
    <span>def</span> <span>setUp</span><span>(</span>cls<span>)</span><span>:</span>
        <span># start env or use canvas for a 6s block</span>
        cls<span>.</span>env <span>=</span> SubstrateTestEnv<span>.</span>create_europa<span>(</span>port<span>=</span><span>39944</span><span>)</span>
        cls<span>.</span>env<span>.</span>start_node<span>(</span><span>)</span>

        cls<span>.</span>api <span>=</span> SubstrateInterface<span>(</span>url<span>=</span>cls<span>.</span>env<span>.</span>url<span>(</span><span>)</span><span>,</span> type_registry_preset<span>=</span>cls<span>.</span>env<span>.</span>typ<span>(</span><span>)</span><span>,</span> type_registry<span>=</span>cls<span>.</span>env<span>.</span>types<span>(</span><span>)</span><span>)</span>
        cls<span>.</span>alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
        cls<span>.</span>bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>

        cls<span>.</span>erc20 <span>=</span> ERC20<span>.</span>create_from_contracts<span>(</span>
            substrate<span>=</span> cls<span>.</span>substrate<span>,</span> 
            contract_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
            metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'constracts'</span><span>,</span> <span>'ink'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
        <span>)</span>
        cls<span>.</span>erc20<span>.</span>put_and_deploy<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>)</span>

        <span>return</span>

    <span>def</span> <span>tearDown</span><span>(</span>cls<span>)</span><span>:</span>
        cls<span>.</span>env<span>.</span>stop_node<span>(</span><span>)</span>

    <span>def</span> <span>test_transfer</span><span>(</span>self<span>)</span><span>:</span>
        self<span>.</span>erc20<span>.</span>transfer_from<span>(</span>alice<span>,</span>
            from_acc<span>=</span>alice<span>.</span>ss58_address<span>,</span> 
            to_acc<span>=</span>bob<span>.</span>ss58_address<span>,</span> 
            amt<span>=</span><span>10000</span><span>)</span>
        <span># some more test case</span>

<span>if</span> __name__ <span>==</span> <span>'__main__'</span><span>:</span>
    unittest<span>.</span>main<span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br></div></div><p>By example, we can use python to write testcase for some complex logics, by <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">europa</a>, we can test the contracts for python scripts.</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/himalia/tutorial/</id>
    <link href="https://www.patract.io/himalia/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<p>Himalia 用于与链的合约部分交互的sdk，需要首先启动一个节点才能进行后续的执行过程。</p>
<p>对于有<code>pallet-contracts</code>功能的节点，我们推荐使用 Europa 作为节点的替代。更多的信息请参阅Europa的<a href="./europa.html">文档</a>。</p>
<p>Europa 可以以一下命令简单安装使用：</p>
<div><pre><code><span>git</span> <span>install</span> --recurse-submodules https://github.com/patractlabs/europa.git --force --locked
europa --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>另一方面也可以使用 Patract 的测试网 <a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">Jupiter</a>，或者 Parity 提供的合约测试网 <a href="https://github.com/paritytech/canvas-node.git" target="_blank" rel="noopener noreferrer">Canvas-node</a></p>
<h2 id="go"> go</h2>
<p>PatractGo 依赖于 <a href="https://github.com/centrifuge/go-substrate-rpc-client" target="_blank" rel="noopener noreferrer">GSRPC</a>。Go 版本的 Himalia 项目叫做 <a href="https://github.com/patractlabs/go-patract" target="_blank" rel="noopener noreferrer">go-patract</a></p>
<p>在安装了 PatractGo 之后，可以采用如下方式快速部署，调用一个合约。完整案例请参考 <a href="https://github.com/patractlabs/go-patract/blob/master/contracts/erc20/transfer_test.go" target="_blank" rel="noopener noreferrer">transfer_test</a></p>
<h3 id="部署合约"> 部署合约</h3>
<div><pre><code><span>// read the code wasm from file</span>
codeBytes<span>,</span> err <span>:=</span> ioutil<span>.</span><span>ReadFile</span><span>(</span><span>"/path/to/contracts.wasm"</span><span>)</span>
<span>if</span> err <span>!=</span> <span>nil</span> <span>{</span>
    <span>return</span> err
<span>}</span>
<span>// create the api</span>
cApi<span>,</span> err <span>:=</span> rpc<span>.</span><span>NewContractAPI</span><span>(</span>env<span>.</span><span>URL</span><span>(</span><span>)</span><span>)</span>

<span>// read the abi(metadata) for contract</span>
metaBz<span>,</span> err <span>:=</span> ioutil<span>.</span><span>ReadFile</span><span>(</span><span>"/path/to/contracts_metadata.json"</span><span>)</span>
cApi<span>.</span><span>WithMetaData</span><span>(</span>metaBz<span>)</span>

<span>// create context with from auth, like Alice</span>
ctx <span>:=</span> api<span>.</span><span>NewCtx</span><span>(</span>context<span>.</span><span>Background</span><span>(</span><span>)</span><span>)</span><span>.</span><span>WithFrom</span><span>(</span>authKey<span>)</span>

<span>// put code</span>
<span>_</span><span>,</span> err <span>=</span> cApi<span>.</span><span>Native</span><span>(</span><span>)</span><span>.</span><span>PutCode</span><span>(</span>ctx<span>,</span> codeBytes<span>)</span>

codeHash <span>:=</span> <span>readCodeHash</span><span>(</span><span>)</span> <span>// get code hash</span>

<span>var</span> codeBz <span>[</span><span>]</span><span>byte</span>

<span>if</span> err <span>:=</span> cApi<span>.</span><span>Native</span><span>(</span><span>)</span><span>.</span>Cli<span>.</span><span>GetStorageLatest</span><span>(</span><span>&amp;</span>codeBz<span>,</span>
    <span>"Contracts"</span><span>,</span> <span>"PristineCode"</span><span>,</span>
    <span>[</span><span>]</span><span>byte</span><span>(</span>codeHash<span>)</span><span>,</span> <span>nil</span><span>)</span><span>;</span> err <span>!=</span> <span>nil</span> <span>{</span>
        <span>return</span> err
    <span>}</span>

	<span>var</span> endowment <span>uint64</span> <span>=</span> <span>1000000000000</span>

<span>// Instantiate</span>
<span>_</span><span>,</span> contractAccount<span>,</span> err <span>:=</span> cApi<span>.</span><span>Instantiate</span><span>(</span>ctx<span>,</span>
    types<span>.</span><span>NewCompactBalance</span><span>(</span>endowment<span>)</span><span>,</span>
    types<span>.</span><span>NewCompactGas</span><span>(</span>test<span>.</span>DefaultGas<span>)</span><span>,</span>
    contracts<span>.</span>CodeHashERC20<span>,</span>
    types<span>.</span><span>NewU128</span><span>(</span>totalSupply<span>)</span><span>,</span>
<span>)</span>    
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br></div></div><h3 id="调用合约"> 调用合约</h3>
<h4 id="rpc-call"> rpc call</h4>
<p>调用 <code>total_supply</code> 获取当前的总共供应量。</p>
<div><pre><code><span>var</span> res types<span>.</span>U128

err <span>:=</span> a<span>.</span><span>CallToRead</span><span>(</span>ctx<span>,</span>
    <span>&amp;</span>res<span>,</span>
    a<span>.</span>ContractAccountID<span>,</span>
    <span>[</span><span>]</span><span>string</span><span>{</span><span>"total_supply"</span><span>}</span><span>,</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h4 id="交易调用"> 交易调用</h4>
<p>调用 <code>transfer</code> 转移一笔资金。</p>
<div><pre><code>toParam <span>:=</span> <span>struct</span> <span>{</span>
    Address AccountID
<span>}</span><span>{</span>
    Address<span>:</span> to<span>,</span>
<span>}</span>

valueParam <span>:=</span> <span>struct</span> <span>{</span>
    Value U128
<span>}</span><span>{</span>
    Value<span>:</span> amt<span>,</span>
<span>}</span>

<span>return</span> a<span>.</span><span>CallToExec</span><span>(</span>ctx<span>,</span>
    a<span>.</span>ContractAccountID<span>,</span>
    types<span>.</span><span>NewCompactBalance</span><span>(</span><span>0</span><span>)</span><span>,</span>
    types<span>.</span><span>NewCompactGas</span><span>(</span>test<span>.</span>DefaultGas<span>)</span><span>,</span>
    <span>[</span><span>]</span><span>string</span><span>{</span><span>"transfer"</span><span>}</span><span>,</span>
    toParam<span>,</span> valueParam<span>,</span>
<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="python"> python</h2>
<p>PatractPy 依赖于 <a href="https://github.com/polkascan/py-substrate-interface" target="_blank" rel="noopener noreferrer">py-substrate-interface</a>Python 版本的 Himalia 项目叫做 <a href="https://github.com/patractlabs/py-patract" target="_blank" rel="noopener noreferrer">py-patract</a></p>
<h3 id="安装"> 安装</h3>
<div><pre><code>pip3 <span>install</span> -U patract-interface 
</code></pre>
<div><span>1</span><br></div></div><p>在 python 脚本中即可使用</p>
<div><pre><code>from patractinterface <span>import</span> ContractFactory, ContractAPI

// <span>..</span>. So something <span>..</span>.
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="快速使用"> 快速使用</h3>
<div><pre><code><span>import</span> os
<span>from</span> substrateinterface <span>import</span> SubstrateInterface<span>,</span> Keypair
<span>from</span> patractinterface<span>.</span>contract <span>import</span> ContractAPI<span>,</span> ContractFactory
<span>from</span> patractinterface<span>.</span>observer <span>import</span> ContractObserver

<span>def</span> <span>main</span><span>(</span><span>)</span><span>:</span>
    <span># use [europa](https://github.com/patractlabs/europa) as test node endpoint, notice `type_registry` should set correctly.</span>
    substrate<span>=</span>SubstrateInterface<span>(</span>url<span>=</span><span>'ws://127.0.0.1:9944'</span><span>,</span> type_registry_preset<span>=</span><span>"default"</span><span>,</span> type_registry<span>=</span><span>{</span><span>'types'</span><span>:</span> <span>{</span><span>'LookupSource'</span><span>:</span> <span>'MultiAddress'</span><span>}</span><span>}</span><span>)</span>
    <span># load deployer key</span>
    alice <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Alice'</span><span>)</span>
    bob <span>=</span> Keypair<span>.</span>create_from_uri<span>(</span><span>'//Bob'</span><span>)</span>
    <span># 1. load a contract from WASM file and metadata.json file (Those files is complied by [ink!](https://github.com/paritytech/ink))</span>
    <span># in this example, we use `ink/example/erc20` contract as example.</span>
    contract <span>=</span> ContractFactory<span>.</span>create_from_file<span>(</span>
            substrate<span>=</span>substrate<span>,</span> <span># should provide a subtrate endpoint</span>
            code_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'res'</span><span>,</span> <span>'erc20.wasm'</span><span>)</span><span>,</span>
            metadata_file<span>=</span> os<span>.</span>path<span>.</span>join<span>(</span>os<span>.</span>path<span>.</span>dirname<span>(</span>__file__<span>)</span><span>,</span> <span>'res'</span><span>,</span> <span>'erc20.json'</span><span>)</span>
        <span>)</span>
    <span># upload code to chain directly</span>
    res <span>=</span> contract<span>.</span>put_code<span>(</span>alice<span>)</span>
    <span>print</span><span>(</span><span>"update code hash{} res:{}"</span><span>.</span><span>format</span><span>(</span>contract<span>.</span>code_hash<span>.</span><span>hex</span><span>(</span><span>)</span><span>,</span> res<span>.</span>is_succes<span>)</span><span>)</span>
    <span># 2. instantiate the uploaded code as a contract instance</span>
    erc20_ins <span>=</span> contract<span>.</span>new<span>(</span>alice<span>,</span> <span>1000000</span> <span>*</span> <span>(</span><span>10</span> <span>**</span> <span>15</span><span>)</span><span>,</span> endowment<span>=</span><span>2</span><span>*</span><span>10</span><span>**</span><span>10</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>,</span> deployment_salt<span>=</span><span>"0x12"</span><span>)</span>
    <span># 2.1 create a observer to listen event</span>
    observer <span>=</span> ContractObserver<span>(</span>erc20_ins<span>.</span>contract_address<span>,</span> erc20_ins<span>.</span>metadata<span>,</span> substrate<span>)</span>
    <span># 3. send a transfer call for this contract</span>
    res <span>=</span> erc20_ins<span>.</span>transfer<span>(</span>alice<span>,</span> bob<span>.</span>ss58_address<span>,</span> <span>100000</span><span>,</span> gas_limit<span>=</span><span>20000000000</span><span>)</span>
    <span>print</span><span>(</span><span>'transfer res'</span><span>,</span> res<span>.</span>is_succes<span>)</span>

    <span>def</span> <span>on_transfer</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
        <span>print</span><span>(</span><span>"on_transfer in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'from'</span><span>]</span><span>,</span> evt<span>[</span><span>'to'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>

    <span>def</span> <span>on_approval</span><span>(</span>num<span>,</span> evt<span>)</span><span>:</span>
        <span>print</span><span>(</span><span>"on_approval in {} : {} {} {}"</span><span>.</span><span>format</span><span>(</span>num<span>,</span> evt<span>[</span><span>'owner'</span><span>]</span><span>,</span> evt<span>[</span><span>'spender'</span><span>]</span><span>,</span> evt<span>[</span><span>'value'</span><span>]</span><span>)</span><span>)</span>
    <span># 4 set event callback </span>
    observer<span>.</span>scanEvents<span>(</span>handlers<span>=</span><span>{</span>
        <span>'Transfer'</span><span>:</span> on_transfer<span>,</span>
        <span>'Approve'</span><span>:</span> on_approval
    <span>}</span><span>)</span>

<span>if</span> __name__ <span>==</span> <span>"__main__"</span><span>:</span>
    main<span>(</span><span>)</span>
    <span>pass</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 跨合约调用</title>
    <id>https://www.patract.io/ink/call-contracts/</id>
    <link href="https://www.patract.io/ink/call-contracts/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-跨合约调用"> ink! 跨合约调用</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">cargo-contract</title>
    <id>https://www.patract.io/ink/cargo-contract/</id>
    <link href="https://www.patract.io/ink/cargo-contract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="cargo-contract"> cargo-contract</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! eDSL基础元素</title>
    <id>https://www.patract.io/ink/edsl-basic/</id>
    <link href="https://www.patract.io/ink/edsl-basic/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-edsl基础元素"> ink! eDSL基础元素</h1>
<p>ink! eDSL设计的元素与Solidity的元素其实比较近似，因为Contracts Pallet的合约模型结构和EVM的合约模型就是比较近似的。</p>
<p>因此ink!的设计可以找到很多和Solidity相似的影子（Substrate 的 Runtime 设计同理）。后文描述ink特性时会尝试跟Solidity的特性进行对比，方便读者理解。</p>
<h2 id="edsl-的元素"> eDSL 的元素</h2>
<p>由ink!文档或ink!提供的example，代码可以看出，ink!在Contracts Pallet的模型上，同样提出了以下三点基础元素：</p>
<ul>
<li><code>constructor</code>/<code>message</code></li>
<li><code>storage</code></li>
<li><code>event</code></li>
</ul>
<p>不过由于Rust过程宏的设计关系，可以看到ink!首先要求一个合约需要处于一个<code>mod</code>下，并且在这个<code>mod</code>的上面添加上<code>#[ink::contract]</code>宏：</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>这样，相当于告知ink!从这个mod里面的东西就是要依据ink的eDSL处理的部分。</p>
<h3 id="ink-contract"> <code>#[ink::contract]</code></h3>
<p>因此当遇到宏<code>#[ink::contract]</code>，即表面这是在ink!所识别的“合约部分”。因此我们可以看到，很多<code>use xxx</code>的导入都会放到处于<code>#[ink::contract]</code>的<code>mod</code>作用域下。</p>
<p>并且当前ink!设计为，在一个<code>crate</code>包下，只能出现一个<code>#[ink::contract]</code>，因此代表着ink!认为一个合约的维度是以rust的<code>crate</code>为单位，即如果在同一个<code>crate</code>中，无论是在同一个文件（比如都在<code>lib.rs</code>下）或者是在不同的文件中定义了2个以上的被<code>#[ink::contract]</code>修饰的<code>mod</code>，例如：</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    // ...
}

#[ink::contract]
mod another_define {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><p>类比于solidity的：</p>
<div><pre><code>// a.sol 在同一个文件中定义多个 `contract`
contract A {

}
contract B {

}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>那么在ink!的编译中会认为这种情况是非法的。</p>
<p>当然与之相对的，只要在当前<code>crate</code>中只有一个<code>#[ink::contract]</code>修饰的<code>mod</code>，其他<code>mod</code>该怎么正常使用就正常使用，<strong>因此ink!修饰的合约<code>crate</code>依然可以很好的做好代码隔离，增强可读性和可维护性</strong>。这个能力对于<strong>维护大型复杂合约比较重要</strong>，例如：</p>
<div><pre><code>#[ink::contract]
mod erc20 {
    use crete::another_define::*;
}

mod another_define {
    // ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>例如如下实例：</p>
<div><pre><code>mod fxck {
    use crate::erc20::Erc20;
    use ::ink_lang::Env; // 注意这里需要引入 `ink_lang::Env`
    impl Erc20 {
        pub fn tmp(&amp;self) {
            self.env().caller(); // 
        }
    }
}

#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 { ... }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -&gt; Self { ... }
        #[ink(message)]
        pub fn transfer(&amp;mut self, initial_supply: Balance) -&gt; Self {
            self.tmp(); // 调用在其他`mod`里定义的方法
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br></div></div><p>这种模型可以做到一些在Solidity下做不到的代码隔离，增强可维护性。（因为Solidity的library只能用于纯函数计算）</p>
<p>总结而言，在ink!体系下：</p>
<ul>
<li>一个合约以一个<code>crate</code>的单位，一个<code>crate</code>内只能出现一个<code>#[ink::contract]</code>定义；</li>
<li><code>#[ink::contract]</code>修饰的<code>mod</code>代表合约的内容，同时也代表了<strong>合约的基础元素都必须定义到这个<code>mod</code>下</strong>；</li>
<li>除<code>#[ink::contract]</code>修饰的<code>mod</code>以外的部分（其他<code>mod</code>，函数，类型）皆遵循rust的规则，可以做好良好的代码隔离提升可维护性；</li>
<li>实践中可以将<code>#[ink::contract]</code>修饰的<code>mod</code>当做合约的入口，将实现的逻辑分散到其他<code>mod</code>下。</li>
</ul>
<p>以下使用“合约mod”表示被<code>#[ink::contract]</code>修饰的<code>mod</code></p>
<h3 id="storage"> <code>storage</code></h3>
<p>在合约mod中，一定需要定义一个结构体，且这个结构体被<code>#[ink(storage)]</code>所修饰，表示定义了该合约的存储。</p>
<p>同时这个被<code>#[ink(storage)]</code>修饰的结构体定义，<strong>也被视作一个可操作的合约实体</strong>，因此所有与合约相关的资源，类型，操作都会<strong>和这个结构体绑定在一起</strong>，当在合约调用合约的情景中，被调用的合约的类型也由这个结构体来表示。</p>
<p>因此这个结构体可以理解为是合约实体。</p>
<blockquote>
<p>虽然修饰<code>mod</code>的部分才是合约，但是因为<code>mod</code>在rust中只能代表作用域，因此为了实践使用，使用<code>#[ink(storage)]</code>修饰的结构体表示能够进行操作的合约实体。</p>
<p>在这种语境下，可以将<code>#[ink::contract]</code>修饰的<code>mod</code>理解为“开启了合约域”的概念，而<code>#[ink(storage)]</code>修饰的<code>stuct</code>是在这个合约域下的合约。</p>
</blockquote>
<p>这里ink!定义的storage的概念和Solidity中定义“存储”的概念一致，表示定义在这里的属性即是最终写到<strong>链上的状态</strong>。一切合约逻辑编写的目的最后都是为了对这里定义的状态的修改。</p>
<p>不过由于当前ink!采用使用一个结构体来承载合约状态的方案，因此当前这个合约所有的状态都只能定义在这个结构体中。当合约设计得比较大，比较复杂的时候会导致这里的可维护性下降。</p>
<p>定义storage的示例如下：</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    /// Total token supply.
    total_supply: Lazy&lt;Balance&gt;,
    /// Mapping from owner to number of owned token.
    balances: StorageHashMap&lt;AccountId, Balance&gt;,
    /// Mapping of the token amount which an account is allowed to withdraw
    /// from another account.
    allowances: StorageHashMap&lt;(AccountId, AccountId), Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>被<code>#[ink(storage)]</code>修饰的结构体在后文统称为合约结构体。</p>
<p>这里尤其需要注意几个特性：</p>
<ol>
<li>
<p>在该合约结构体内定义的属性的类型必须是实现过<code>SpreadLayout</code>的类型（或者更准确说是实现了<code>PackedLayout</code>的类型，因为<code>PackedLayout</code>是继承于<code>SpreadLayout</code>的定义）：</p>
<div><pre><code>/// Types that can be stored to and loaded from the contract storage.
pub trait SpreadLayout {
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><blockquote>
<p>这里只能使用实现过这个trait的类型的理由很简单，因为storage和一般的类型不同，其必须含有“链”的信息在其中，因此不同的链的合约实现都必须有一个部分用于处理合约中的storage（即状态）的分配问题。</p>
<p>例如Solidity在编译过程给实际上是按storage在合约中定义的上下顺序，做偏移分配该状态的key。这里实现过<code>SpredLayout</code>或者说<code>PackedLayout</code>类型的都会有一个近似的过程来进行状态的分配。</p>
</blockquote>
<p>ink!对于一般类型已经都做过基础实现，但是<strong>对于集合类型（<code>Vec</code>，<code>HashMap</code>等）而言，由于合约的状态需要hook读写的过程</strong>，因此无法对集合类型实现这个<code>trait</code>。所以在ink!中，对标准库中常用的集合类型重新全部做了一次实现，且位于<code>#[ink(storage)]</code>修饰的结构体的属性类型，<strong>若使用集合类型时，必须使用ink!提供的集合类型</strong>。</p>
<blockquote>
<p>由于Solidity比较简陋，因此Solidity定义的存储map是无法进行遍历的。（由Solidity设计的缺陷导致）</p>
<p>ink!在设计的这块的时候进一步做了很多事情，因此ink!提供的集合类型<code>Vec</code>，<code>BTreeMap</code>，<code>HashMap</code>等等都是<strong>可以遍历</strong>的。相较于Solidity能实现的功能而言是相当大的进步。</p>
</blockquote>
</li>
<li>
<p>即便基于以上的设计，嵌套集合类型依然很难实现（因为Substrate的状态结构采用了k/v模型）。因此在设计中还是只能尽量避免嵌套集合类型。如果一定需要嵌套集合类型，需要将嵌套的层次打平（flat），将第二层的key和第一层的key合并一起，使用元组替代（相当于Substrate Runtime中的<code>double_map</code>）</p>
<div><pre><code>// solidity
contract A {
    mapping (uint =&gt; mapping (uint =&gt; uint))
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>在ink!中类似的代码应该为:</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    // 注意这里的key采用了元组 `(AccountId, AccountId)`
    allowances: StorageHashMap&lt;(AccountId, AccountId), Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
<li>
<p>storage中提供了一种<code>Lazy</code>的模型，允许开发者使用<code>Lazy</code>包裹一个类型，可以让状态数据在使用到的情况下再加载：</p>
<div><pre><code>/// A lazy storage entity.
///
/// This loads its value from storage upon first use.
///
/// # Note
///
/// Use this if the storage field doesn&#39;t need to be loaded in some or most cases.
#[derive(Debug)]
pub struct Lazy&lt;T&gt;
where
    T: SpreadLayout,
{
    cell: LazyCell&lt;T&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>使用方式：</p>
<div><pre><code>#[ink(storage)]
pub struct Erc20 {
    /// Total token supply.
    total_supply: Lazy&lt;Balance&gt;,
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div></li>
</ol>
<h3 id="constructor-message"> <code>constructor</code>/<code>message</code></h3>
<p><code>constructor</code>/<code>message</code>就是触发合约状态变更的入口函数。也就是说<code>constructor</code>/<code>message</code>即是合约状态的状态转换函数。</p>
<p><code>constructor</code>/<code>message</code>只能修饰<strong>合约结构体的方法</strong>，不能用来修饰其他结构体的方法，或者其他纯函数。</p>
<p>在合约mod中，被<code>constructor</code>和<code>message</code>修饰的合约结构体的方法至少各有一个，若分别少于1个都会导致编译错误。</p>
<p>其中：</p>
<ul>
<li>
<p><code>constructor</code> 即对应着 Solidity 合约中的构造函数。当合约被部署的时候（在Contracts Pallet中当前代表着从已上传的合约代码中做<code>instantiate</code>的过程），会触发对应构造函数的调用。</p>
<blockquote>
<p>这里需要强调，构造函数的调用与合约实例化是2个概念的事情，这个过程在ink!和Contracts Pallet的协调过程中<strong>并非原子化</strong>。因此会出现构造函数没有被调用，但是合约地址会生成，也可以正常调用这个未调用过构造函数的合约实例的情况。</p>
<p>典型的例子是在调用<code>instantiate</code>的时候传入的错误编码的参数。</p>
</blockquote>
</li>
<li>
<p><code>message</code>即对应着 Solidity 合约中的 <code>public</code>/<code>external</code>等 的 call 方法。由于Rust可变/不可变方法的特性，<code>message</code>利用了<strong>这个特性来表示这个方法是否会修改合约的状态</strong>。</p>
<p>因此若<code>message</code>修饰的方法是</p>
<div><pre><code>// 注意方法的第一个参数是`&amp;self`
#[ink(message)]
pub fn total_supply(&amp;self) -&gt; Balance {
    *self.total_supply
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>则表示这个方法的调用不会修改状态（由rust语法所控制），和以太坊一致，这类方法多用于rpc调用返回一个合约的存储，或返回一些基于存储的计算结果。</p>
<p>若修饰的是</p>
<div><pre><code>// 注意方法的第一个参数是 `&amp;mut self`
pub fn transfer(&amp;mut self, to: AccountId, value: Balance) -&gt; Result&lt;()&gt; {
    let from = self.env().caller();
    self.transfer_from_to(from, to, value)
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>则表示这个方法的调用会修改状态，因此这个方法如果是以交易调用被打包的形式被调用执行时，会触发状态的改变。若是以rpc调用时，表示是模拟执行了一次。</p>
<p>同时在合约编译后会生成metadata.json（对应Solidity的ABI），在这个metadata中对于message部分会有一个<code>mutates</code>的字段来标示这个方法是否是可变的。</p>
</li>
</ul>
<h4 id="message的selector"> message的<code>selector</code></h4>
<p>Solidity对于合约方法的ABI的产生使用的是将方法名加上参数类型作为函数签名拼凑成为字符串然后做hash取前4字节。</p>
<div><pre><code>call = &quot;func_name(param1_type,param2_type,...)&quot;
bytes4(keccak256(call), a, b)
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在ink!中这种让合约区分调用触发点的概念叫做<code>selector</code>。</p>
<p>由于rust不支持函数重载，因此在ink!中采用了比较简陋的设计，直接对函数名字的字符串做hash取前4字节：</p>
<div><pre><code>call = &quot;func_name&quot;
blake2_512(call)[0..4]
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><blockquote>
<p>笔者认为这种设计造成了其他合约语言设计的困扰。因为rust不支持重载不代表别的语言不支持重载。当前Solang将Solidity编译到Wasm的过程后，想和ink!的metadata做兼容，互相调用就会出现问题。</p>
</blockquote>
<p>另一方面<code>selector</code>也可以运行合约开发者自己定义的</p>
<div><pre><code>#[ink(message, selector = &quot;0xCAFEBABE&quot;)]
pub fn was_it_ten(&amp;self) -&gt; bool { ... }
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="message的payable"> message的<code>payable</code></h4>
<p>Solidity中对于方法会有一个<code>payable</code>的修饰符，用于表示这个方法可以接受一定金额。</p>
<p>因此在ink!中也提供<code>payable</code>来表示调用这个方法的同时是否可以附带转移一定的<strong>本币的金额</strong>。在ink!当前的设计中，若在调用一个非<code>payable</code>的message时同时附带了金额时，这个调用过程会认为是错误的。</p>
<p>默认情况下认为<code>paybale</code>是<code>false</code>的，只有当合约开发者指定了<code>payable</code>后才是<code>true</code>。</p>
<p>指定一个message是可调用的案例是：</p>
<div><pre><code>#[ink(message, playable)]
pub fn was_it_ten(&amp;self) -&gt; bool { ... }
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>另一方面在metadata中，对于message部分会有一个<code>payable</code>的字段来标示这个方法是否是需要付费的。</p>
<h3 id="event"> <code>event</code></h3>
<p><code>event</code>的概念在状态机模型中其实并不是必须的。但是由于<strong>区块链是一个异步系统</strong>，因此在发送交易去触发状态变更后，并不能马上知道变更结果，只能依赖监听某个元素来判定执行结果。<code>event</code>便是在Solidity的阶段设计的元素，这个设计同样被继承到了Substrate Runtime中，以及ink!中。</p>
<blockquote>
<p>笔者不觉得event是一个很好的设计，理论上有其他更好的方式，或者event的变种。event一定程度上会造成开发者的滥用。</p>
</blockquote>
<p>ink!的<code>event</code>在Contracts Pallet中最后是通过<code>host function</code>将合约定义的event打印到了链的event当中。</p>
<p>ink!的event设计和Solidity相比就没有什么特别的地方了，不过由于是在Wasm中运行的合约，因此打印合约的event需要通过<code>host function</code>与链进行交互，因此调用的方式需要通过<code>env()</code>去调用。</p>
<div><pre><code>Self::env().emit_event(...);
// or use
self.env().emit_event(...);
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 框架</title>
    <id>https://www.patract.io/ink/framework/</id>
    <link href="https://www.patract.io/ink/framework/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-框架"> ink! 框架</h1>
<p>ink!的所有主体功能都实现于 <a href="https://github.com/paritytech/ink/tree/master/crates" target="_blank" rel="noopener noreferrer"><code>ink/crates</code></a> 目录下：</p>
<ul>
<li>crates:
<ul>
<li>allocator：与Wasm相关，定义allocator，开发者绝大部分情况下无需关心</li>
<li>env：提供和链相交互的组件，总结来说就是和链相关的部分都会放在这里，包含
<ul>
<li>host function 部分</li>
<li>部分需要导入的类型、trait定义</li>
<li>event 的topic</li>
</ul>
</li>
<li>lang：eDSL过程宏的定义组件，合约的规范由这个地方决定</li>
<li>metadata：生成metadata的组件</li>
<li>prelude：合约编写过程中需要预先导入的包，包含一些标准库</li>
<li>primitives：操作状态存储的指针，开发者绝大部分情况下无需关心</li>
<li>storage：提供链存储的分配模型以及提供一些预定义好的存储集合类型</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 与solidity的对比</title>
    <id>https://www.patract.io/ink/ink-solidity/</id>
    <link href="https://www.patract.io/ink/ink-solidity/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-与solidity的对比"> ink! 与solidity的对比</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink</title>
    <id>https://www.patract.io/ink/introduction/</id>
    <link href="https://www.patract.io/ink/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink"> ink</h1>
<p>ink! is an eDSL to write WebAssembly based smart contracts using the Rust programming language. The compilation target are blockchains built on the Substrate framework.</p>
<p>ink! 是 parity 官方编写的，可以提供一种 eDSL 的方式编写 Rust 合约，并编译为 Wasm 运行于 Contracts Pallet 模块上。</p>
<p>虽然 ink!自称为一种写合约的 eDSL，但是笔者更倾向于认为 ink!是使用 Rust 语言编写符合能满足 Contracts Pallet 运行的合约框架。</p>
<p>例如对于 EVM 而言，若把 EVM 的指令集看做一种规范（EVM 的指令集已经包含了 EVM 合约模型的信息），那么只要能编译到 EVM 指令集的语言都可以称为能运行在 EVM 上的合约语言，例如：</p>
<ul>
<li>Solidity</li>
<li>Vyper</li>
</ul>
<p>而 ink!这里同理。Contracts Pallet 要求是能满足运行 Contracts Pallet 合约模型的 Wasm 代码，因此任何能编译成满足这个 Wasm 合约模型的框架/语言/库都可以称为 Contracts Pallet 的合约语言。</p>
<p>ink!就是使用 Rust 语言，并在此基础上通过 Rust 的<strong>卫生宏系统</strong>设计了一套 eDSL，并使用该 eDSL 编写能满足 Contracts Pallet 要求的 Rust 代码。除 eDSL 之外，ink!还提供了适用于合约模型的<strong>存储集合类型</strong>，生成 Metadata（对应于 Solidity 的 ABI）等工具库。</p>
<p>ink!的官方文档见：</p>
<ul>
<li><a href="https://substrate.dev/docs/en/knowledgebase/smart-contracts/ink-fundamentals" target="_blank" rel="noopener noreferrer">ink! Concepts</a></li>
<li><a href="https://substrate.dev/substrate-contracts-workshop/#/" target="_blank" rel="noopener noreferrer">ink! Smart Contracts Tutorial</a></li>
<li><a href="https://paritytech.github.io/ink-docs/" target="_blank" rel="noopener noreferrer">ink! Documentation Portal</a></li>
</ul>
<h2 id="ink-到-contracts-pallet-的过程"> ink! 到 Contracts pallet 的过程</h2>
<p>parity 官方文档中提供了示例图：
<img src="https://paritytech.github.io/ink-docs/img/how-it-works.svg" alt="https://paritytech.github.io/ink-docs/how-it-works"></p>
<p>由此图可知，编写 ink!合约并部署的过程需要</p>
<ul>
<li>ink! 依赖库：提供 ink!的 eDSL 框架以及提供相应的依赖组件</li>
<li>cargo-contract: 编译 ink!合约的工具</li>
<li>SDK：与链交互并将合约部署到链上的 SDK，parity 官方主要提供了<code>polkadot.js</code>，Patract 提供了 Himalia 工具包，包含<code>go</code>，<code>java</code>，<code>python</code>，<code>C#</code>的 SDK</li>
</ul>
<p>本章节将主要介绍 ink!以及<code>cargo-contract</code>的信息，关于 SDK 的信息放在后续章节介绍。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! 当前的坑</title>
    <id>https://www.patract.io/ink/trap/</id>
    <link href="https://www.patract.io/ink/trap/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-当前的坑"> ink! 当前的坑</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ink! tutorial</title>
    <id>https://www.patract.io/ink/tutorial/</id>
    <link href="https://www.patract.io/ink/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="ink-tutorial"> ink! tutorial</h1>
<p>TODO</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Substrate 合约书</title>
    <id>https://www.patract.io/introduction/</id>
    <link href="https://www.patract.io/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="substrate-合约书"> Substrate 合约书</h1>
<h2 id="介绍"> 介绍</h2>
<p>本书用于介绍 Substrate 中与合约体系相关的一系列知识。</p>
<p>本书由 Patract (<a href="https://patract.io/" target="_blank" rel="noopener noreferrer">https://patract.io/</a>) @ <a href="https://github.com/patractlabs" target="_blank" rel="noopener noreferrer">patractlabs</a> 主导编写，由 Aten @ <a href="https://github.com/atenjin" target="_blank" rel="noopener noreferrer">atenjin</a> 负责。</p>
<p>本书仓库位于 <a href="https://github.com/patractlabs/substrate-contracts-book" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/substrate-contracts-book</a>，欢迎有志之士一起为本书做出贡献。</p>
<p>本书主体包含三类：</p>
<ul>
<li>运行合约的合约平台（模块）</li>
<li>编写合约的语言</li>
<li>帮助合约开发的工具们</li>
</ul>
<p>其中由于<code>pallet-evm</code>（即EVM/solidity体系的合约）在以太坊生态中已有比较丰富的资料，故不会在本合约书中当做重点讲解。而另外的合约体系如<code>pallet-actor</code>，或<code>libra</code>移植合约平台等皆处于比较早期的研究阶段，因此也不会作为本书的重点。</p>
<p><strong>本书当前主要以<code>pallet-contracts</code> （即WASM合约）作为主体进行介绍。</strong></p>
<p>因此本书内容包含：</p>
<ul>
<li>运行合约的合约平台（模块）
<ul>
<li><code>pallet-contracts</code></li>
</ul>
</li>
<li>编写合约的语言
<ul>
<li><code>ink!</code></li>
<li><code>Ask!</code></li>
<li><code>Solang</code></li>
</ul>
</li>
<li>帮助合约开发的工具们
<ul>
<li><code>Redspot</code></li>
<li><code>Europa</code></li>
<li><code>Elara</code></li>
<li>等等</li>
</ul>
</li>
</ul>
<p>为了让合约开发者更好的理解<code>pallet-contracts</code>模块与WASM合约的运行方式，本书也会涉及一些WASM的介绍以及区块链合约模型的介绍。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Access Control</title>
    <id>https://www.patract.io/metis/access-control/</id>
    <link href="https://www.patract.io/metis/access-control/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="access-control"> Access Control</h1>
<p>虽然智能合约应用是去中心化的，但在合约中实现必要的中心化访问控制可以使合约更加安全。</p>
<h2 id="ownership-and-ownable"> Ownership and Ownable</h2>
<p>所有权的概念是访问控制最常见和最基本的形式：有一个帐户是合约的 owner，可以在合约上执行管理任务。</p>
<p>metis 提供 <a href="https://github.com/patractlabs/metis/tree/master/traits/access/ownership" target="_blank" rel="noopener noreferrer">Ownership</a>  来实现您合约中的所有权。</p>
<div><pre><code><span>#[ink::trait_definition]</span>
<span>pub</span> <span>trait</span> <span>Ownable</span> <span>{</span>
    <span>/// Initializes the contract setting the deployer as the initial owner.</span>
    <span>#[ink(constructor)]</span>
    <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span><span>;</span>

    <span>/// Returns the account id of the current owner.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>owner</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>;</span>

    <span>/// Transfer ownership to new owner.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>transfer_ownership</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> new_owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="使用-ownership-实现合约所有权"> 使用 <code>Ownership</code> 实现合约所有权</h3>
<ol>
<li>将 <code>ownership</code> 包添加到新合约项目的 <code>cargo.toml</code> 依赖中</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>ownership</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"0.1.0"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"ownership/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ol start="2">
<li>最简实现 <code>ownership</code></li>
</ol>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>ownership</span> <span>{</span>
	<span>use</span> <span>super</span><span>::</span><span>Ownable</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Ownership</span> <span>{</span>
        owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>Ownable</span> <span>for</span> <span>Ownership</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>Self</span> <span>{</span>
                owner<span>:</span> <span>Self</span><span>::</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>,</span>
            <span>}</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>owner</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span> <span>{</span>
            <span>self</span><span>.</span>owner<span>.</span><span>clone</span><span>(</span><span>)</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_ownership</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> new_owner<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>)</span> <span>{</span>
            <span>assert_eq!</span><span>(</span><span>self</span><span>.</span><span>owner</span><span>(</span><span>)</span><span>,</span> <span>Some</span><span>(</span><span>self</span><span>.</span><span>env</span><span>(</span><span>)</span><span>.</span><span>caller</span><span>(</span><span>)</span><span>)</span><span>)</span><span>;</span>
            <span>if</span> <span>let</span> <span>Some</span><span>(</span>new_one<span>)</span> <span>=</span> new_owner <span>{</span>

            <span>}</span>
            <span>self</span><span>.</span>owner <span>=</span> new_owner<span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>默认情况下，合约的所有者是部署它的帐户，<code>Ownable</code> 也提供了 <code>transfer_ownership</code> 方法可以让您将合约所有权转移到其他帐户。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Metis</title>
    <id>https://www.patract.io/metis/introduction/</id>
    <link href="https://www.patract.io/metis/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="metis"> Metis</h1>
<p>Metis 是 Patract 主导的合约标准实现及示例案例库。在这个仓库里，将会对 ink!, Ask! 等能运行于<code>pallet-contracts</code>的合约语言框架提供对应的合约标准的实现及通用案例。</p>
<p>Metis 类似于 Ethereum 生态中的 OpenZepplin-contracts，给合约开发者提供可复用的轮子，不必从零开始编写合约代码。新接触波卡生态尝试合约开发的开发者，在经过简单基础知识的学习后，可以借助本仓库的代码快速搭建出常见的应用。</p>
<blockquote>
<p>由于当前ink!合约还未稳定，Ask!合约还在开发当中，因此两个平台都还未进行标准的制定。因此当前在Metis中提供的的实现是一些模仿Solidity中的EIP相关的标准的模仿实现。</p>
</blockquote>
<h1 id="overview"> Overview</h1>
<h2 id="仓库地址"> 仓库地址</h2>
<p><a href="https://github.com/patractlabs/metis" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/metis</a></p>
<h2 id="项目结构"> 项目结构</h2>
<p>metis 项目分为以下三个模块: <code>trait</code>、<code>stubs</code>、<code>impls</code>。</p>
<h3 id="trait"> trait</h3>
<p><code>trait</code> 模块包含了常用的合约标准定义，如:erc20、erc721 等。 ink! 合约通过定义 <code>#[ink::trait_definition]</code> 的方式实现类似 solidity <code>interface</code> 的特性以此来定义通用共享的合约接口。</p>
<p>metis 根据开发实践经验制定了一些运用比较广泛的 <code>trait_definition</code> 的合约标准。 开发者只需要将 metis 中定义的 <code>trait</code> 包添加到自己项目的依赖中,
并像实现 rust trait 一样实现 <code>#[ink::trait_definition]</code> 中定义的方法，就可以实现一个通用的标准合约。</p>
<h4 id="example"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::trait_definition]</span>
<span>pub</span> <span>trait</span> <span>IErc20</span> <span>{</span>
    <span>/// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.</span>
    <span>#[ink(constructor)]</span>
    <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span><span>;</span>

    <span>/// Returns the total supply.</span>
    <span>#[ink(message)]</span>
    <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

    <span>/// Transfers 'amount' from caller to 'to'.</span>
    <span>#[ink(message, payable)]</span>
    <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br></div></div><h3 id="stubs"> stubs</h3>
<p><code>stubs</code> 模块是对 <code>trait</code> 模块中定义的<code>trait definition</code>合约的 <code>桩 (stub)</code> 实现。 stub 的用途主要是跨合约调用时将合约地址组装成合约对象，通过合约对象可以调用合约地址对应的链上合约方法。</p>
<p>熟悉 solidity 的同学都知道 solidity 是通过 interface 来实现合约间调用，如：<code>interfaceContract _interfaceContract = interfaceContract(_addr);</code>，所以看到这里可能有疑问：既然 ink! 已经实现了通过 <code>#[ink::trait_definition]</code> 来实现合约接口，
为什么不使用<code>trait</code> 来实现跨合约调用，而需要 <code>stub</code> 呢？ 这确实是 parity 官方下一步需要实现的特性，但目前还不支持，有兴趣的同学可以跟踪官方的实现（https://github.com/paritytech/ink/issues/631）。</p>
<p>因此 metis 通过提供合约的桩（stub）,来实现跨合约调用的功能, 开发者可以将 stub 合约引入项目中来实现跨合约调用。</p>
<blockquote>
<p>接口定义的结构与合约完全一样，但未定义任何函数实现，仅声明它们。 这种类型的声明通常称为 <code>stub</code>；</p>
</blockquote>
<h4 id="example-2"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ierc20<span>::</span></span><span>IErc20</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20Stub</span> <span>{</span><span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20Stub</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span> <span>unimplemented!</span><span>(</span><span>)</span> <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span> <span>unimplemented!</span><span>(</span><span>)</span> <span>}</span>

        <span>#[ink(message, payable)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span> <span>unimplemented!</span><span>(</span><span>)</span> <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><h3 id="impls"> impls</h3>
<p>impls 模块里提供了合约的开发实现案例， 其中包括以上提及的 <code>trait</code> 、<code>stubs</code> 模块中包的使用， 以及 zkp 等特性的合约案例。</p>
<h4 id="example-3"> example</h4>
<div><pre><code><span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ierc20<span>::</span></span><span>IErc20</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20</span> <span>{</span>
        total_supply<span>:</span> <span>Balance</span><span>,</span>
        <span>// more fields ...</span>
    <span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>initial_supply<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>#[ink(message, payable)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">ERC20</title>
    <id>https://www.patract.io/metis/tokens/</id>
    <link href="https://www.patract.io/metis/tokens/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="erc20"> ERC20</h1>
<p>metis 提供了完全符合 <code>ERC20</code> 标准的 <a href="https://github.com/patractlabs/metis/tree/master/traits/token/erc20" target="_blank" rel="noopener noreferrer">trait_definition</a> 、<a href="https://github.com/patractlabs/metis/tree/master/stubs/token/erc20" target="_blank" rel="noopener noreferrer">合约间调用 stub</a>
以及 <a href="https://github.com/patractlabs/metis/tree/master/impls/token/erc20" target="_blank" rel="noopener noreferrer">erc20合约</a> 的标准实现。</p>
<p>下面详细介绍下 metis 提供的 erc20 trait 和 stub 的使用方法。</p>
<h2 id="trait-definition"> Trait Definition</h2>
<p>通过 <code>#[ink::trait_definition]</code> 处理宏，开发者可以定义自己的 trait definitions，然后可以由 ink! 智能合约实现。 这允许为不同的具体实现定义共享的智能合约接口。 注意这种 <code>#[ink::trait_definition]</code> 可以在任何地方定义，甚至可以在另一个 crate 中定义！</p>
<h3 id="erc20-trait-源码解析"> erc20 trait 源码解析</h3>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>// 注意：这里需要导出 tarit 定义供其他包使用</span>
<span>pub</span> <span>use</span> <span>self</span><span><span>::</span>erc20<span>::</span></span><span>{</span><span>Error</span><span>,</span> <span>IErc20</span><span>,</span> <span>Result</span><span>}</span><span>;</span>
<span>pub</span> <span>mod</span> <span>events</span> <span>{</span>
    <span>// pub use crate::erc20::{Transfer, Approval};</span>
<span>}</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>
<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> ink_lang <span>as</span> ink<span>;</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>
    <span>/// The ERC-20 result type.</span>
    <span>pub</span> <span>type</span> <span>Result</span><span>&lt;</span><span>T</span><span>></span> <span>=</span> <span>core<span>::</span>result<span>::</span></span><span>Result</span><span>&lt;</span><span>T</span><span>,</span> <span>Error</span><span>></span><span>;</span>

    <span>/// Event emitted when a token transfer occurs.</span>
    <span>#[ink(event)]</span>
    <span>pub</span> <span>struct</span> <span>Transfer</span> <span>{</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> from<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> to<span>:</span> <span>Option</span><span>&lt;</span><span>AccountId</span><span>></span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> value<span>:</span> <span>Balance</span><span>,</span>
    <span>}</span>
    <span>/// Event emitted when an approval occurs that `spender` is allowed to withdraw</span>
    <span>/// up to the amount of `value` tokens from `owner`.</span>
    <span>#[ink(event)]</span>
    <span>pub</span> <span>struct</span> <span>Approval</span> <span>{</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> owner<span>:</span> <span>AccountId</span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> spender<span>:</span> <span>AccountId</span><span>,</span>
        <span>#[ink(topic)]</span>
        <span>pub</span> value<span>:</span> <span>Balance</span><span>,</span>
    <span>}</span>

    <span>/// The ERC-20 error types.</span>
    <span>#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]</span>
    <span>#[cfg_attr(feature = <span>"std"</span>, derive(scale_info::TypeInfo))]</span>
    <span>pub</span> <span>enum</span> <span>Error</span> <span>{</span>
        <span>/// Returned if not enough balance to fulfill a request is available.</span>
        <span>InsufficientBalance</span><span>,</span>
        <span>/// Returned if not enough allowance to fulfill a request is available.</span>
        <span>InsufficientAllowance</span><span>,</span>
    <span>}</span>

    <span>/// Trait implemented by all ERC-20 respecting smart contracts.</span>
    <span>#[ink::trait_definition]</span>
    <span>pub</span> <span>trait</span> <span>IErc20</span> <span>{</span>
        <span>/// Creates a new ERC-20 contract with the specified initial supply.</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>
            initial_supply<span>:</span> <span>Balance</span><span>,</span>
            name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span><span>;</span>

        <span>/// Returns the token name.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_name</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>;</span>

        <span>/// Returns the token symbol.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_symbol</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>;</span>

        <span>/// Returns the token decimals.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>token_decimals</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>;</span>
        <span>/// Returns the total token supply.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>
        <span>/// Returns the account balance for the specified `owner`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>balance_of</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

        <span>/// Transfers `value` amount of tokens from the caller's account to account `to`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>

        <span>/// Returns the amount which `spender` is still allowed to withdraw from `owner`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>allowance</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span><span>;</span>

        <span>/// Transfers `value` tokens on the behalf of `from` to the account `to`.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_from</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> from<span>:</span> <span>AccountId</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>

        <span>/// Allows `spender` to withdraw from the caller's account multiple times, up to</span>
        <span>/// the `value` amount.</span>
        <span>#[ink(message)]</span>
        <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span><span>;</span>
    <span>}</span>

    <span>// TODO tmp hack struct for passing compile</span>
    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Phantom</span><span>;</span>
    <span>impl</span> <span>Phantom</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>Phantom</span> <span>{</span><span>}</span>
        <span>}</span>
        <span>#[ink(message)]</span>
        <span>pub</span> <span>fn</span> <span>message</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>{</span><span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br><span>100</span><br><span>101</span><br><span>102</span><br><span>103</span><br><span>104</span><br><span>105</span><br><span>106</span><br><span>107</span><br><span>108</span><br></div></div><p>首先必须要定义 <code>#[ink::trait_definition]</code>, 这里定义了一个 <code>IErc20</code> 的 trait 接口。在 trait_definition 中必须定义至少一个 <code>#[ink(constructor)]</code> 和 <code>#[ink(message)]</code>。
所有接口只有声明，没有实现。</p>
<p><code>#[ink::trait_definition]</code> 是可以脱离于 <code>#[ink::contract]</code> 单独定义的，一般简单的trait的，只需要定义 trait_definition 即可，如在前文介绍中定义的那样。但在这个 erc20 trait 的
实现中，之所以定义在<code>#[ink::contract]</code> 中，是因为 <code>#[ink(event)]</code> 的存在，我们希望不仅提供接口，也提供一些事件和错误的定义，这样开发者在使用我们的 erc20-trait 包时可以清楚的知道会
触发那些事件和发生哪些错误，但美中不足的是<code>#[ink(event)]</code>不能脱离于<code>#[ink::contract]</code>单独定义，所以我们只能临时实现一个 <code>Phantom</code> 合约及存储来使编译通过。这个问题我们已经像官方提交issue
（https://github.com/paritytech/ink/issues/683） 。</p>
<p>在定义了<code>#[ink::trait_definition]</code>后，注意需要将 trait 导出，如： <code>pub use self::erc20::{Error, IErc20, Result};</code>, 只有导出后才可以被其他 crate 使用。</p>
<h3 id="使用-erc20-trait-实现合约"> 使用 erc20-trait 实现合约</h3>
<ol>
<li>创建一个新合约</li>
</ol>
<div><pre><code>cargo contract new myerc20
</code></pre>
<div><span>1</span><br></div></div><p>注意： metis中所有合约的 ink! dependencies 都是最新的ink仓库中的代码，因此需要将新建的合约项目中的依赖改为最新，不然会引起版本冲突，如下：</p>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>ink_primitives</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_metadata</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"derive"</span><span>]</span><span>,</span> <span>optional</span> <span>=</span> <span>true</span> <span>}</span>
<span>ink_env</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_storage</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_lang</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
<span>ink_prelude</span> <span>=</span> <span>{</span> <span>version</span> <span>=</span> <span>"3.0.0-rc3"</span><span>,</span> <span>git</span> <span>=</span> <span>"https://github.com/paritytech/ink"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><ol start="2">
<li>将 <code>erc20-trait</code> 包添加到新合约项目的 <code>cargo.toml</code> 依赖中</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>erc20-trait</span> <span>=</span> <span>{</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"ink-as-dependency"</span><span>]</span> <span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"erc20-trait/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>这里添加依赖时，启用了 <code>features = [&quot;ink-as-dependency&quot;]</code> 特性，是因为在 ink！中合约作为依赖是需要开启改特性。</p>
<ol start="3">
<li>在新合约项目中实现 erc20 trait</li>
</ol>
<p>完整代码在: <code>https://github.com/patractlabs/metis/blob/master/impls/token/erc20</code></p>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>// 这里需要导入 erc20_trait 中定义的接口和错误</span>
    <span>use</span> <span>erc20_trait<span>::</span></span><span>{</span><span>Error</span><span>,</span> <span>IErc20</span><span>,</span> <span>Result</span><span>}</span><span>;</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>

    <span>/// Basic version of StandardToken, with no allowances.</span>
    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20</span> <span>{</span>
        <span>/// Total token supply.</span>
        total_supply<span>:</span> <span>Lazy</span><span>&lt;</span><span>Balance</span><span>></span><span>,</span>
        <span>/// Mapping from owner to number of owned token.</span>
        balances<span>:</span> <span>StorageHashMap</span><span>&lt;</span><span>AccountId</span><span>,</span> <span>Balance</span><span>></span><span>,</span>
        <span>/// Mapping of the token amount which an account is allowed to withdraw</span>
        <span>/// from another account.</span>
        allowances<span>:</span> <span>StorageHashMap</span><span>&lt;</span><span>(</span><span>AccountId</span><span>,</span> <span>AccountId</span><span>)</span><span>,</span> <span>Balance</span><span>></span><span>,</span>
        <span>/// Name of the token</span>
        name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
        <span>/// Symbol of the token</span>
        symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
        <span>/// Decimals of the token</span>
        decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>IErc20</span> <span>for</span> <span>Erc20</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>fn</span> <span>new</span><span>(</span>
            initial_supply<span>:</span> <span>Balance</span><span>,</span>
            name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>

        <span>// Omitted part of interface</span>
        
        <span>#[ink(message)]</span>
        <span>fn</span> <span>transfer_from</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> from<span>:</span> <span>AccountId</span><span>,</span> to<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
        
        <span>#[ink(message)]</span>
        <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> spender<span>:</span> <span>AccountId</span><span>,</span> value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>// implementation ...</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br></div></div><h2 id="跨合约调用-stub"> 跨合约调用 stub</h2>
<p>在此之前我们已经通过 erc20 trait 实现了标准 erc20 合约, 在一些复杂的 dapps 中与 erc20 合约交互是必不可少的。metis 提供了 <code>erc20-stub</code> 支持跨合约调用我们已经实现erc20合约。</p>
<h3 id="erc20-stub-源码解析"> erc20 stub 源码解析</h3>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>// 需要将 Erc20Stub 导出供子合约调用</span>
<span>pub</span> <span>use</span> <span>self</span><span><span>::</span>erc20<span>::</span></span><span>Erc20Stub</span><span>;</span>
<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>erc20</span> <span>{</span>
    <span>use</span> <span>ink_prelude<span>::</span>string<span>::</span></span><span>String</span><span>;</span>

    <span>/// The ERC-20 error types.</span>
    <span>#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]</span>
    <span>#[cfg_attr(feature = <span>"std"</span>, derive(scale_info::TypeInfo))]</span>
    <span>pub</span> <span>enum</span> <span>Error</span> <span>{</span>
        <span>/// Returned if not enough balance to fulfill a request is available.</span>
        <span>InsufficientBalance</span><span>,</span>
        <span>/// Returned if not enough allowance to fulfill a request is available.</span>
        <span>InsufficientAllowance</span><span>,</span>
    <span>}</span>

    <span>/// The ERC-20 result type.</span>
    <span>pub</span> <span>type</span> <span>Result</span><span>&lt;</span><span>T</span><span>></span> <span>=</span> <span>core<span>::</span>result<span>::</span></span><span>Result</span><span>&lt;</span><span>T</span><span>,</span> <span>Error</span><span>></span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>Erc20Stub</span> <span>{</span><span>}</span>

    <span>impl</span> <span>Erc20Stub</span> <span>{</span>
        <span>/// Creates a new ERC-20 contract with the specified initial supply.</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span>
            _initial_supply<span>:</span> <span>Balance</span><span>,</span>
            _name<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            _symbol<span>:</span> <span>Option</span><span>&lt;</span><span>String</span><span>></span><span>,</span>
            _decimals<span>:</span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span><span>,</span>
        <span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token name.</span>
        <span>#[ink(message, selector = <span>"0x6b1bb951"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_name</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token symbol.</span>
        <span>#[ink(message, selector = <span>"0xb42c3368"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_symbol</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>String</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the token decimals.</span>
        <span>#[ink(message, selector = <span>"0xc64b0eb2"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>token_decimals</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Option</span><span>&lt;</span><span>u8</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the total token supply.</span>
        <span>#[ink(message, selector = <span>"0x143862ae"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>total_supply</span><span>(</span><span>&amp;</span><span>self</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the account balance for the specified `owner`.</span>
        <span>#[ink(message, selector = <span>"0xb7d968c9"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>balance_of</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> _owner<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Transfers `value` amount of tokens from the caller's account to account `to`.</span>
        <span>#[ink(message, selector = <span>"0x10d455c2"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _to<span>:</span> <span>AccountId</span><span>,</span> _value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Returns the amount which `spender` is still allowed to withdraw from `owner`.</span>
        <span>#[ink(message, selector = <span>"0xc04aa300"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>allowance</span><span>(</span><span>&amp;</span><span>self</span><span>,</span> _owner<span>:</span> <span>AccountId</span><span>,</span> _spender<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Balance</span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Transfers `value` tokens on the behalf of `from` to the account `to`.</span>
        <span>#[ink(message, selector = <span>"0xbb399017"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>transfer_from</span><span>(</span>
            <span>&amp;</span><span>mut</span> <span>self</span><span>,</span>
            _from<span>:</span> <span>AccountId</span><span>,</span>
            _to<span>:</span> <span>AccountId</span><span>,</span>
            _value<span>:</span> <span>Balance</span><span>,</span>
        <span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>

        <span>/// Allows `spender` to withdraw from the caller's account multiple times, up to</span>
        <span>/// the `value` amount.</span>
        <span>#[ink(message, selector = <span>"0x4ce0e831"</span>)]</span>
        <span>pub</span> <span>fn</span> <span>approve</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> _spender<span>:</span> <span>AccountId</span><span>,</span> _value<span>:</span> <span>Balance</span><span>)</span> <span>-></span> <span>Result</span><span>&lt;</span><span>(</span><span>)</span><span>></span> <span>{</span>
            <span>unimplemented!</span><span>(</span><span>)</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br><span>74</span><br><span>75</span><br><span>76</span><br><span>77</span><br><span>78</span><br><span>79</span><br><span>80</span><br><span>81</span><br><span>82</span><br><span>83</span><br><span>84</span><br><span>85</span><br><span>86</span><br><span>87</span><br><span>88</span><br><span>89</span><br><span>90</span><br><span>91</span><br><span>92</span><br><span>93</span><br><span>94</span><br><span>95</span><br><span>96</span><br><span>97</span><br><span>98</span><br><span>99</span><br></div></div><p>通过以上代码可以知道，在 stub 合约中没有erc20 具体逻辑的实现，只提供了接口的空实现，该合约将作为父合约被子合约实例化，
并且可以在子合约中，调用父合约的接口。</p>
<p>注意：在该erc20-stub 合约中每个合约方法的 <code>selector</code>都设置了固定的值, 这里的 <code>selector</code> 的值是由 <code>BLAKE2(&quot;IErc20::{message_func_name}&quot;.to_string().as_bytes())[0..4]</code>
公式计算得出。</p>
<p>在 ink! 体系中 <code>selector</code> 的计算方式跟 solidity 的有所区别，在 solidity 中是对 方法签名做hash运算， 而在 ink! 中有一套自己的计算方式，最简的是对 <code>{message_func_name}</code>
进行hash运算，但 message 是通过 <code>#[ink::trait_definition]</code> 实现时，采用 {trait_name} + {message_func_name} 混合hash 的方式，详细的计算规则，
可以查看 ink！源码（https://github.com/paritytech/ink/blob/master/crates/lang/ir/src/ir/item_impl/callable.rs#L190）。</p>
<p>因此，erc20-stub 只适用于 metis 中实现的 erc20 合约（通过 IErc20 trait 实现）的跨合约调用, 如果是其他方式实现的 erc20 合约，由于 <code>selector</code> 不匹配，不能使用此 stub。</p>
<h3 id="通过-erc20-stub-跨合约调用"> 通过 erc20 stub 跨合约调用</h3>
<ol>
<li>将 <code>erc20-stub</code> 包添加到新合约项目的 <code>cargo.toml</code> 依赖中</li>
</ol>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>erc20-stub</span> <span>=</span> <span>{</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/metis"</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span><span>,</span> <span>features</span> <span>=</span> <span>[</span><span>"ink-as-dependency"</span><span>]</span> <span>}</span>

<span>[</span><span>features</span><span>]</span>
<span>default</span> <span>=</span> <span>[</span><span>"std"</span><span>]</span>
<span>std</span> <span>=</span> <span>[</span>
    <span>"erc20-stub/std"</span><span>,</span>
<span>]</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><ol start="2">
<li>在新合约中实例化 erc20 stub</li>
</ol>
<div><pre><code><span>#![cfg_attr(not(feature = <span>"std"</span>), no_std)]</span>

<span>use</span> ink_lang <span>as</span> ink<span>;</span>

<span>#[ink::contract]</span>
<span>mod</span> <span>delegate</span> <span>{</span>
    <span>use</span> <span>erc20_stub<span>::</span></span><span>Erc20Stub</span><span>;</span>
    <span>use</span> <span>ink_env<span>::</span>call<span>::</span></span><span>FromAccountId</span><span>;</span>
    <span>use</span> <span>ink_storage<span>::</span></span><span>Lazy</span><span>;</span>

    <span>#[ink(storage)]</span>
    <span>pub</span> <span>struct</span> <span>CrossCall</span> <span>{</span>
        callee<span>:</span> <span>Lazy</span><span>&lt;</span><span>Erc20Stub</span><span>></span><span>,</span>
    <span>}</span>

    <span>impl</span> <span>CrossCall</span> <span>{</span>
        <span>#[ink(constructor)]</span>
        <span>pub</span> <span>fn</span> <span>new</span><span>(</span>callee<span>:</span> <span>AccountId</span><span>)</span> <span>-></span> <span>Self</span> <span>{</span>
            <span>let</span> token<span>:</span> <span>Erc20Stub</span> <span>=</span> <span>FromAccountId</span><span>::</span><span>from_account_id</span><span>(</span>callee<span>)</span><span>;</span>
            <span>Self</span> <span>{</span> callee<span>:</span> <span>Lazy</span><span>::</span><span>new</span><span>(</span>token<span>)</span> <span>}</span>
        <span>}</span>

        <span>#[ink(message)]</span>
        <span>pub</span> <span>fn</span> <span>transfer</span><span>(</span><span>&amp;</span><span>mut</span> <span>self</span><span>,</span> owner<span>:</span> <span>AccountId</span><span>,</span> amount<span>:</span> <span>Balance</span><span>)</span> <span>{</span>
            <span>self</span><span>.</span>callee<span>.</span><span>transfer</span><span>(</span>owner<span>,</span> amount<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
        <span>}</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>在 ink! 合约中可以使用 <code>FromAccountId</code> 实例化合约对象（不是创建一个新合约），接下来就可以使用合约对象对合约方法进行跨合约调用。</p>
<blockquote>
<p><code>ink_storage::Lazy</code> 管理数据实体，并在存储上延迟执行读取/写入操作, 只有在确定确实需要读取/写入时，才会在存储上执行。</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">pallet-contracts 合约模块</title>
    <id>https://www.patract.io/pallet-contracts/introduction/</id>
    <link href="https://www.patract.io/pallet-contracts/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="pallet-contracts-合约模块"> pallet-contracts 合约模块</h1>
<p><code>pallet-contracts</code>合约模块, 一般称呼为<a href="https://substrate.dev/docs/en/knowledgebase/smart-contracts/contracts-pallet" target="_blank" rel="noopener noreferrer">“Contracts Pallet”</a> 或者 “FRAME Contracts pallet”，又或者称呼为“Substrate Smart Contracts”，是parity官方研发的Wasm合约模块。</p>
<p>依据Substrate knowledgebase的介绍，Contracts Pallet具备如下特性：</p>
<ul>
<li>Are inherently safer to the network.</li>
<li>Have built in economic incentives against abuse.</li>
<li>Have computational overhead to support graceful failures in logic.</li>
<li>Have a lower bar to entry for development.</li>
<li>Enable fast pace community interaction through a playground to write new logic.</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Getting started</title>
    <id>https://www.patract.io/patra-store/getting-starter/</id>
    <link href="https://www.patract.io/patra-store/getting-starter/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="getting-started"> Getting started</h2>
<p>首先，请确保您在html中引入了<code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://static.patrastore.io/sdk/store-sdk.min.js&quot;&gt;&lt;/script&gt;</code>，为了确保sdk可以正常工作，需要您在业务代码之前引用，比较好的方式是放在html的<code>head</code>标签中。</p>
<p>确保对<code>@polkadot/extension-dapp</code>的<a href="https://polkadot.js.org/docs/extension" target="_blank" rel="noopener noreferrer">文档</a>有一定的了解，我们在下方也会出Demo。</p>
<p>安装相应依赖。<code>yarn add @polkadot/extension-dapp</code>。</p>
<h3 id="请求用户授权"> 请求用户授权</h3>
<p><strong>这一步是在以下所有操作调用之前。</strong></p>
<div><pre><code><span>import</span> <span>{</span> web3Enable <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>await</span> <span>web3Enable</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h3 id="获取injected"> 获取Injected</h3>
<div><pre><code><span>import</span> <span>{</span> web3FromSource <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>// PatraStore注入injected的名称为store</span>
<span>const</span> injected <span>=</span> <span>await</span> <span>web3FromSource</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="signer"> Signer</h3>
<div><pre><code><span>const</span> signer <span>=</span> injected<span>.</span>signer<span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>获取到Signer之后可以使用signer调取PatraStore的签名</p>
<h3 id="provider-optional"> Provider(Optional)</h3>
<p>我们提供的Provider是基于PostMessage实现，为了确保Dapp和PatraStore连接的是同一个链，建议您使用这种方式实例化Provider。</p>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> ProviderInterface <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider/types'</span><span>;</span>
<span>import</span> <span>{</span> WsProvider <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider'</span><span>;</span>
<span>import</span> <span>{</span> web3ListRpcProviders<span>,</span> web3UseRpcProvider <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>let</span> provider<span>:</span> ProviderInterface<span>;</span>
<span>const</span> providers <span>=</span> <span>await</span> <span>web3ListRpcProviders</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
<span>if</span> <span>(</span>providers <span>&amp;&amp;</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
  provider <span>=</span> <span>(</span><span>await</span> <span>web3UseRpcProvider</span><span>(</span><span>'store'</span><span>,</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>.</span>provider<span>;</span>
<span>}</span> <span>else</span> <span>{</span>
  provider <span>=</span> <span>new</span> <span>WsProvider</span><span>(</span>url<span>)</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h3 id="init-api"> Init Api</h3>
<p>经过上面的步骤，我们已经获得了Provider和Signer，下面是实例化<code>ApiPromise</code>的完整实例。</p>
<div><pre><code><span>import</span> <span>type</span> <span>{</span> ProviderInterface <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider/types'</span><span>;</span>

<span>import</span> <span>{</span> ApiPromise <span>}</span> <span>from</span> <span>'@polkadot/api/promise'</span><span>;</span>
<span>import</span> <span>{</span> WsProvider <span>}</span> <span>from</span> <span>'@polkadot/rpc-provider'</span><span>;</span>
<span>import</span> <span>{</span> web3Enable<span>,</span> web3FromSource<span>,</span> web3ListRpcProviders<span>,</span> web3UseRpcProvider <span>}</span> <span>from</span> <span>'@polkadot/extension-dapp'</span><span>;</span>

<span>async</span> <span>function</span> <span>initApi</span><span>(</span><span>)</span><span>:</span> ApiPromise <span>{</span>
  <span>await</span> <span>web3Enable</span><span>(</span><span>)</span><span>;</span>

  <span>let</span> provider<span>:</span> ProviderInterface<span>;</span>
  <span>const</span> providers <span>=</span> <span>await</span> <span>web3ListRpcProviders</span><span>(</span><span>'store'</span><span>)</span><span>;</span>
  <span>if</span> <span>(</span>providers <span>&amp;&amp;</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>.</span>length <span>></span> <span>0</span><span>)</span> <span>{</span>
    provider <span>=</span> <span>(</span><span>await</span> <span>web3UseRpcProvider</span><span>(</span><span>'store'</span><span>,</span> Object<span>.</span><span>keys</span><span>(</span>providers<span>)</span><span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>.</span>provider<span>;</span>
  <span>}</span> <span>else</span> <span>{</span>
    provider <span>=</span> <span>new</span> <span>WsProvider</span><span>(</span>url<span>)</span><span>;</span>
  <span>}</span>

  <span>const</span> <span>{</span> signer <span>}</span> <span>=</span> <span>await</span> <span>web3FromSource</span><span>(</span><span>'store'</span><span>)</span><span>;</span>

  <span>return</span> <span>new</span> <span>ApiPromise</span><span>(</span><span>{</span>
    provider<span>,</span>
    signer<span>,</span>
    <span>// Jupiter types</span>
    types<span>:</span> <span>{</span>
      <span>"LookupSource"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
      <span>"Address"</span><span>:</span> <span>"MultiAddress"</span><span>,</span>
      <span>"FullIdentification"</span><span>:</span> <span>"AccountId"</span><span>,</span>
      <span>"AuthorityState"</span><span>:</span> <span>{</span>
        <span>"_enum"</span><span>:</span> <span>[</span>
          <span>"Working"</span><span>,</span>
          <span>"Waiting"</span>
        <span>]</span>
      <span>}</span><span>,</span>
      <span>"EraIndex"</span><span>:</span> <span>"u32"</span><span>,</span>
      <span>"ActiveEraInfo"</span><span>:</span> <span>{</span>
        <span>"index"</span><span>:</span> <span>"EraIndex"</span><span>,</span>
        <span>"start"</span><span>:</span> <span>"Option&lt;u64>"</span>
      <span>}</span><span>,</span>
      <span>"UnappliedSlash"</span><span>:</span> <span>{</span>
        <span>"validator"</span><span>:</span> <span>"AccountId"</span><span>,</span>
        <span>"reporters"</span><span>:</span> <span>"Vec&lt;AccountId>"</span>
      <span>}</span>
    <span>}</span>
  <span>}</span><span>)</span>
<span>}</span>

<span>const</span> api<span>:</span> ApiPromise <span>=</span> <span>await</span> <span>initApi</span><span>(</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br></div></div><h3 id="更多用法"> 更多用法</h3>
<p>请参考<a href="https://polkadot.js.org/docs/extension" target="_blank" rel="noopener noreferrer">https://polkadot.js.org/docs/extension</a></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">介绍</title>
    <id>https://www.patract.io/patra-store/introduction/</id>
    <link href="https://www.patract.io/patra-store/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍"> 介绍</h2>
<p>PatraStore是通过iFrame的方式嵌入Dapp，PatraStore会为Dapp提供Signer，Provider的功能。</p>
<p>阅读本文档需要对<a href="https://polkadot.js.org/docs/" target="_blank" rel="noopener noreferrer">pokadot-js</a>有一定的了解。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Overview</title>
    <id>https://www.patract.io/patra-store/overview/</id>
    <link href="https://www.patract.io/patra-store/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="overview"> Overview</h2>
<p>PatraStore和Dapp的通信是利用PostMessage的方式进行通信，为了方便开发者们，我们提供了一套SDK。这套SDK实现了<a href="https://github.com/polkadot-js/extension" target="_blank" rel="noopener noreferrer">polkadot-js/extension</a>中的协议，因此，使用我们的sdk可以完全兼容<a href="https://www.npmjs.com/package/@polkadot/extension-dapp" target="_blank" rel="noopener noreferrer">@polkadot/extension-dapp</a>。</p>
<p>开发者可以很方便的引入PatraStore的sdk，我们提供cdn服务托管了sdk，您只需在代码中引入<code>&lt;script type=&quot;text/javascript&quot; src=&quot;https://static.patrastore.io/sdk/store-sdk.min.js&quot;&gt;&lt;/script&gt;</code>即可。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">发布DApp</title>
    <id>https://www.patract.io/patra-store/publish-dapps/</id>
    <link href="https://www.patract.io/patra-store/publish-dapps/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h2 id="发布dapp"> 发布DApp</h2>
<p>目前我们不支持托管DApp，需要开发者部署好DApp，然后在PatraStore上面上传一下资料（域名，类型，图片，账户等信息）。</p>
<p>确保您开发的DApp前端引入了我们的<a href="./getting-starter.html">SDK</a>，否则DApp在PatraStore中无法正常工作。</p>
<ol>
<li>进入<a href="https://patrastore.io/jupiter-a1/system/developer" target="_blank" rel="noopener noreferrer">https://patrastore.io/:chain-value/system/developer</a>页面</li>
<li>点击Publish DApp按钮
<img src="./imgs/publish.png" alt="">
<img src="./imgs/publish-form.png" alt=""></li>
<li>选择Account，然后填入DApp的基本信息</li>
<li><strong>在html中加入meta标签</strong><div><pre><code><span>&lt;!-- accountId必须和您选择的账户地址一致，我们后台会间隔一段时间检查一下meta标签，如果accountId和账户地址不一致，DApp将会变为Offline状态 --></span>
<span><span><span>&lt;</span>meta</span> <span>name</span><span><span>=</span><span>"</span>patrastore:verify<span>"</span></span> <span>content</span><span><span>=</span><span>"</span>accountId<span>"</span></span> <span>></span></span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div></li>
<li>点击<code>Publish</code>按钮，如果上方填的信息无误，即可成功发布DApp。</li>
</ol>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Patract</title>
    <id>https://www.patract.io/patract/introduction/</id>
    <link href="https://www.patract.io/patract/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="patract"> Patract</h1>
<p><img src="./imgs/overview.jpg" alt="overview"></p>
<p>Patract 做的东西具体包括:</p>
<ul>
<li>
<p>在开发者端：</p>
<ul>
<li>Jupiter：独立的智能合约测试网，提供给合约开发者测试合约链的环境。</li>
<li>Ask!：AssemblyScript 版的 Ink! 合约框架，吸引 TS/JS 的开发者，给不愿意使用 rust 的合约开发者另一个选择。</li>
<li>Redspot：Wasm 合约开发工作流和脚手架：对标 Ethereum 生态中的 Tuffle/Redhat，让合约开发项目化，自动化的工具。Redspot 采用插件化设计，运行开发者添加自己设计的插件丰富 Redspot 的功能。</li>
<li>Europa：Runtime 和合约运行沙盒：对标 Ethereum 生态中的 EthereumJS/Ganache，给合约开发者提供了丰富的调试信息，便于快速开发合约。</li>
<li>Elara：实时和可扩展的波卡 API：对标 Ethereum 中的 Infura，给合约项目方提供节点的 Endpoint，不用自行搭建节点获取数据。</li>
<li>Megaclite：零知识证明的底层支持：在 Jupiter/Patract 链中提供零知识原语支持，可以允许项目方设计 zkRollup 或其他零知识相关合约。</li>
<li>Metis：Ink! 合约标准库：对标 Ethereum 中的 openzeppelin-contracts，给合约开发者提供可复用的轮子，不必从零开始编写合约代码。</li>
<li>Himalia：多语言合约 SDK：对标 Ethereum 中的 Web3J，Web3Py 等 SDK，给合约项目方提供不同语言的环境，丰富的接口与合约进行交互。</li>
<li>Leda：合约监控台：对标 Ethereum 生态中各类合约监控设施，让合约项目方随时监控合约的存储情况，代币转移情况，合约调用情况等等。</li>
<li>Carpo：专注开发合约的智能 WebIDE：对标 Ethereum 中的 Remix，但其将会是对 Patract 以上合约开发工具的集大成者。Carpo 将采用最新的 WebIDE 技术，使得云端开发无限贴近本地开发，同时完整的云端让开发者无需搭建任何开发环境即可进行开发，开箱即用的 Patract 工具链给合约开发者提供了一体化开发体验，让开发者的开发、调试、测试和部署的合约过程如丝般顺畅。</li>
</ul>
</li>
<li>
<p>在用户端包括：</p>
<ul>
<li>Patra Store：作为 Patract 平行链钱包和 DApp 生态的入口，在测试网阶段将集成一些示例应用和配套开发工具套件用法演示，帮助开发者快速开发 Wasm 合约和前端界面，帮助用户快速进入波卡新合约生态。</li>
<li>Patra Scan：专门为智能合约链优化的区块链浏览器，集成比统一的链浏览器更丰富的合约数据信息展示，增强统计和自定义的查询功能。</li>
</ul>
</li>
</ul>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">配置</title>
    <id>https://www.patract.io/redspot/configuration/</id>
    <link href="https://www.patract.io/redspot/configuration/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="配置"> 配置</h1>
<p>运行Redspot时，它将从当前工作目录开始搜索最接近的redspot.config.js文件。该文件通常位于项目的根目录中。</p>
<p>此文件中包含整个Redspot设置（例如配置，插件和自定义任务等）。</p>
<h2 id="配置选项"> 配置选项</h2>
<p>要设置配置，需要从 redspot.config.ts 导出对象（object）：</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
  defaultNetwork<span>:</span> <span>'development'</span><span>,</span>
  contract<span>:</span> <span>{</span>
    ink<span>:</span> <span>{</span>
      toolchain<span>:</span> <span>'nightly'</span><span>,</span>
      sources<span>:</span> <span>[</span><span>'contracts/**/*'</span><span>]</span>
    <span>}</span><span>,</span>
    solang<span>:</span> <span>{</span>
      sources<span>:</span> <span>[</span><span>'contracts/**/*.sol'</span><span>]</span>
    <span>}</span>
  <span>}</span><span>,</span>
  networks<span>:</span> <span>{</span>
    development<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span>
    <span>}</span><span>,</span>
    substrate<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span><span>,</span>
      accounts<span>:</span> <span>[</span><span>'//Alice'</span><span>,</span> <span>"tomato mad peasant blush poem obtain inspire distance attitude mercy return marriage"</span><span>,</span> <span>"0x26aa394eea5630e07c48ae0c9558cef70a98fdbe9ce6c55837576c60c7af3850"</span><span>]</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span>
    <span>}</span>
  <span>}</span><span>,</span>
  paths<span>:</span> <span>{</span>
    artifacts<span>:</span> <span>"artifacts"</span><span>,</span>
    tests<span>:</span> <span>"tests"</span>
  <span>}</span><span>,</span>
  mocha<span>:</span> <span>{</span>
    timeout<span>:</span> <span>60000</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>可以在 js 文件中，通过<code>config</code>获取到配置信息：</p>
<div><pre><code><span>import</span> <span>{</span> config <span>}</span> <span>from</span> <span>"redspot"</span>

<span>console</span><span>.</span><span>log</span><span>(</span>config<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><h2 id="defaultnetwork"> defaultNetwork</h2>
<p>您可以通过配置中的 <code>defaultNetwork</code> 字段来自定义在运行Redspot时默认使用的网络。如果省略此配置，则其默认值为 <code>localhost</code>。</p>
<h2 id="networks"> networks</h2>
<p><code>networks</code> 配置字段是一个可选对象，网络名称映射到其配置。</p>
<p>默认的 <code>localhost</code> 的配置是:</p>
<div><pre><code><span>{</span>
  localhost<span>:</span> <span>{</span>
    gasLimit<span>:</span> <span>"400000000000"</span><span>,</span>
    accounts<span>:</span> <span>[</span><span>"//Alice"</span><span>,</span> <span>"//Bob"</span><span>,</span> <span>"//Charlie"</span><span>,</span> <span>"//Dave"</span><span>,</span> <span>"//Eve"</span><span>,</span> <span>"//Ferdie"</span><span>]</span><span>,</span>
    endpoint<span>:</span> <span>"ws://127.0.0.1:9944"</span><span>,</span>
    types<span>:</span> <span>{</span><span>}</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>也可以配置其他网络名称，例如配置<code>mainnet</code>，某个网络的名字<code>some_network_name</code>等。</p>
<div><pre><code><span>{</span>
    mainnet<span>:</span> <span>{</span>
        <span>//...</span>
    <span>}</span><span>,</span>
    some_network_name<span>:</span> <span>{</span>
        <span>//...</span>
    <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>以下介绍针对<code>network</code> 部分的配置选项：</p>
<h3 id="network-gaslimit"> <code>[network].gasLimit</code></h3>
<p>这个配置用于设置实例化或者通过交易调用合约的时候需要提供的<code>gaslimit</code>的默认值。这个值必须是整数，没有精度。</p>
<p>如果这个值过小，将会得到一个 <code>contracts.OutOfGas</code> 错误。最大的 gaslimit 是这条Substrate的链在Runtime中用于<code>DispatchClass::Normal</code>的最大值。（例如，在Substrate的node节点的配置中是 <code>NORMAL_DISPATCH_RATIO * MAXIMUM_BLOCK_WEIGHT = 75% * 2000000000000</code>）。</p>
<p>所以一般建议设置高一点。</p>
<h3 id="network-accounts"> <code>[network].accounts</code></h3>
<p><code>accounts</code>应该是由 <a href="https://polkadot.js.org/docs/keyring/start/suri/" target="_blank" rel="noopener noreferrer"><code>suri</code></a> 或者 <a href="https://polkadot.js.org/docs/keyring/start/create/#adding-a-pair" target="_blank" rel="noopener noreferrer"><code>KeyringPair</code></a> 组成的一个列表。</p>
<p>accounts 默认为 [&quot;//Alice&quot;, &quot;//Bob&quot;, &quot;//Charlie&quot;, &quot;//Dave&quot;, &quot;//Eve&quot;, &quot;//Ferdie&quot;]。</p>
<p>具体请查见 runtime-environment</p>
<h3 id="network-endpoint"> <code>[network].endpoint</code></h3>
<p><code>endpoint</code>指明了在当前网络配置中开发者想要连接的节点。</p>
<p>当前，只支持 WebSockets 类型的 RPC 连接（即只支持 <code>wss://</code> 或者 <code>ws://</code>开头的链接协议）。</p>
<h3 id="network-types"> <code>[network].types</code></h3>
<p>type 是<code>polkadotjs</code>中定义的概念。如果对此有任何疑问，您可以在此处<a href="https://polkadot.js.org/docs/api/start/types.extend/" target="_blank" rel="noopener noreferrer"><code>types.extend</code></a>看到。 您还可以设置<code>[network].typesbundle</code>，<code>[network].typesSpec</code>等。 通常，如果遇到类似于“No such variant in enum MultiSignature”的错误，也许应该考虑在 type 中添加 <code>{ Address: &quot;AccountId&quot;, LookupSource: &quot;AccountId&quot;}</code>， 请参阅 <a href="https://polkadot.js.org/docs/api/start/types.extend/#impact-on-extrinsics" target="_blank" rel="noopener noreferrer">impact-on-extrinsics</a>。</p>
<h2 id="contract"> contract</h2>
<p>在 contract 中，你可以设置编译器的选项，目前支持 <a href="https://github.com/paritytech/ink" target="_blank" rel="noopener noreferrer">ink</a> 和 <a href="https://github.com/hyperledger-labs/solang" target="_blank" rel="noopener noreferrer">solang</a>。你也可以将 ink合约 和 solang合约放在同一项目下一起编译。</p>
<p>查看多合约的编译示例 https://github.com/patractlabs/redspot/tree/master/examples/multi-contract 。</p>
<h3 id="contract-ink-toolchain"> [contract].ink.toolchain</h3>
<p>设置 <a href="https://github.com/paritytech/cargo-contract" target="_blank" rel="noopener noreferrer">cargo-contract</a> 编译合约时，所使用的 toolchain。通常都是 <code>nightly</code>。你也可以指定为 <code>nightly-YYYY-MM-DD</code></p>
<h3 id="contract-ink-sources"> [contract].ink.sources</h3>
<p>设置编译时查找的 ink 合约的目录。glob 语法。</p>
<h3 id="contract-solang-sources"> [contract].solang.sources</h3>
<p>设置编译时查找的 solang 合约的目录。glob 语法。</p>
<h2 id="paths"> Paths</h2>
<p>paths 可以设置  artifacts 和 tests 文件的目录名。通常情况下，你无需对此进行更改。</p>
<h2 id="mocha"> mocha</h2>
<p>Redspot 使用 mocha 作为测试框架，这里的所有选项，都将传递给 mocha 。查看 https://mochajs.org/api/mocha ，获取更多的详情。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">控制台console</title>
    <id>https://www.patract.io/redspot/console/</id>
    <link href="https://www.patract.io/redspot/console/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="控制台console"> 控制台console</h1>
<p>Redspot 提供了一个功能强大的控制台，允许开发者简单的使用命令与合约做操作，或调用位于<code>scripts</code>目录下的脚本做机械化的重复工作等等。</p>
<p>Redspot 的控制台还有很多丰富的特性：</p>
<ul>
<li>提供了<strong>强大的tab补全</strong>能力</li>
<li>控制台记录了命令历史，开发者能够查看<code>cache/console-history.txt</code>文件获取历史执行过的命令，也可以通过<code>↑</code>按键找到需要的历史命令。将来控制台也会提供快捷键索引历史命令的功能。</li>
</ul>
<h2 id="启动控制台"> 启动控制台</h2>
<div><pre><code>$ npx redspot console
<span># 若已经确定在`artifacts`目录下编译好的合约符合自己预期，则可以加上 --no-compile 参数不进行合约编译</span>
$ npx redspot console --no-compile
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>此时执行<code>.help</code>命令可以看到相应的帮助：</p>
<div><pre><code><span>></span> .help
.break    Sometimes you get stuck, this gets you out
.clear    Alias <span>for</span> .break
.editor   Enter editor mode
.exit     Exit the repl
.help     Print this <span>help</span> message
.load     Load JS from a <span>file</span> into the REPL session
.save     Save all evaluated commands <span>in</span> this REPL session to a <span>file</span>
<span>></span> 
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br></div></div><h2 id="常用命令"> 常用命令</h2>
<p>控制台默认导入了<code>redspot</code>库下的供合约交互的组件，如</p>
<ul>
<li><code>patract</code></li>
<li><code>network</code></li>
<li>...</li>
</ul>
<p>与在<code>scripts</code>目录下的脚本一致，通过这些组件可以调用许多功能，如和合约交互，查询信息，查看网络等等。</p>
<h3 id="常用工作流"> 常用工作流</h3>
<p>举例：当前想要调试erc20合约。那么在合约编译好后，可以在<code>artifacts</code>目录下看到<code>erc20.json</code>和<code>erc20.wasm</code>文件。加载合约相关的操作需要以这里的文件名为标示。</p>
<p>例如如果仿照<code>scripts</code>目录下的<code>deploy.ts</code>部署脚本，我们可以直接在控制台执行部署合约并调用的命令：</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span> <span>// erc20与文件名一致</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>deployed</span><span>(</span><span>'new'</span><span>,</span> <span>10000000</span><span>)</span><span>;</span> <span>// 上传代码并实例化这个合约</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>如果是已知一个合约的地址，想在先加载这个合约实例则可以通过：</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span> <span>// erc20与文件名一致</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>attach</span><span>(</span><span>'16DHBsUan9GoedoTYJmbyBZJMmN39ZpKUPvYeAGMTXCgxLQe'</span><span>)</span><span>;</span> <span>// 加载合约地址</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>此时这里的<code>contract</code>对象就是一个实例化好的对象。因此后续可以直接用这个<code>contract</code>对象与合约进行交互，例如调用一个转账功能：</p>
<div><pre><code><span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>transfer</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>,</span> <span>100</span><span>)</span>
ret<span>.</span>events <span>// 打印events的信息</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>如果是为了通过rpc调用获取执行某个方法的结果：</p>
<div><pre><code><span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>balanceOf</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>)</span>
ret<span>.</span>output<span>.</span><span>toString</span><span>(</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>如果这个过程是比较固定的，则可以把以上命令写到一个文件中放到<code>scripts</code>目录下，例如命名为<code>scripts/do_something.ts</code>：</p>
<div><pre><code><span>var</span> factory <span>=</span> <span>await</span> patract<span>.</span><span>getContractFactory</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
<span>var</span> contract <span>=</span> <span>await</span> factory<span>.</span><span>deployed</span><span>(</span><span>'new'</span><span>,</span> <span>10000000</span><span>)</span><span>;</span> 
<span>var</span> ret <span>=</span> <span>await</span> contract<span>.</span><span>transfer</span><span>(</span><span>"15Jbynf3EcRqdHV1K14LXYh7PQFTbp5wiXfrc4kbMReR9KxA"</span><span>,</span> <span>100</span><span>)</span>
ret<span>.</span>events
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>然后使用以下命令即可自动化执行一系列过程：</p>
<div><pre><code><span>.</span>load scripts<span>/</span>do_something<span>.</span>ts
</code></pre>
<div><span>1</span><br></div></div><p>因此控制台辅助的功能如下：</p>
<p><img src="./imgs/process.jpg" alt=""></p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Redspot</title>
    <id>https://www.patract.io/redspot/introduction/</id>
    <link href="https://www.patract.io/redspot/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot"> Redspot</h1>
<p>Redspot是让ink!，Ask!等合约开发项目化，简化开发者对合约的测试和交互过程的合约集成构建工具。Redspot 的功能覆盖整个合约开发环节（开发-调试-测试-部署），并且可以允许开发者构建丰富的插件以扩展Redspot的功能，最大程度简化合约开发者的负担，自动化执行重复的过程。</p>
<p>Redspot的设计目标类似Ethereum 生态中的Truffle，但是会比 Truffle 具备更广泛的扩展功能。</p>
<p>Patract 认为Redspot必须是一个灵活的系统，因为<code>pallet-contracts</code>合约模块可以被直接，或在一定程度上的修改后集成到Substrate链中。因此，Redspot决定使用 <a href="https://github.com/nomiclabs/hardhat" target="_blank" rel="noopener noreferrer">hardhat</a> 作为Redspot核心架构，因为它具有出色的设计，允许开发人员使用插件来添加新功能。</p>
<p>因此 Redspot 从 hardhat fork 而来（基于MIT协议），并在其基础上移除了与以太坊相关的部分，并添加和Substrate及<code>pallet-contracts</code>模块相关的功能。在未来，Redspot将会基于hardhat的核心构建更多的功能。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/chai</title>
    <id>https://www.patract.io/redspot/plugin/redspot-chai/</id>
    <link href="https://www.patract.io/redspot/plugin/redspot-chai/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-chai"> @redspot/chai</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/gas-reporter</title>
    <id>https://www.patract.io/redspot/plugin/redspot-gas-reporter/</id>
    <link href="https://www.patract.io/redspot/plugin/redspot-gas-reporter/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-gas-reporter"> @redspot/gas-reporter</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">@redspot/patract</title>
    <id>https://www.patract.io/redspot/plugin/redspot-patract/</id>
    <link href="https://www.patract.io/redspot/plugin/redspot-patract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="redspot-patract"> @redspot/patract</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Q &amp; A</title>
    <id>https://www.patract.io/redspot/q-and-a/</id>
    <link href="https://www.patract.io/redspot/q-and-a/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="q-a"> Q &amp; A</h1>
<h3 id="如何升级-redspot"> 如何升级 Redspot</h3>
<p>redspot 仅仅是一本普通的 npm package 。所以升级方式和其他 npm package 一样。</p>
<p><code>npm upgrade</code> 升级所有依赖</p>
<p><code>npm upgrade redspot</code> 仅升级 redspot</p>
<p>如果你使用的是 yarn</p>
<p><code>yarn upgrade-interactive --latest</code>  将所有依赖升级到稳定版</p>
<p>你可以可以直接手动更改 package.json 中的版本号，然后重新安装依赖 ：</p>
<div><pre><code><span>{</span>
  <span>"name"</span><span>:</span> <span>"erc20"</span><span>,</span>
  <span>"version"</span><span>:</span> <span>"0.1.0"</span><span>,</span>
  <span>"private"</span><span>:</span> <span>true</span><span>,</span>
  <span>"dependencies"</span><span>:</span> <span>{</span>
    <span>"@redspot/chai"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@redspot/gas-reporter"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@redspot/patract"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"@types/chai"</span><span>:</span> <span>"^4.2.14"</span><span>,</span>
    <span>"@types/mocha"</span><span>:</span> <span>"^8.0.3"</span><span>,</span>
    <span>"chai"</span><span>:</span> <span>"^4.2.0"</span><span>,</span>
    <span>"redspot"</span><span>:</span> <span>"^0.10.2-1"</span><span>,</span>
    <span>"typescript"</span><span>:</span> <span>"^4.0.2"</span>
  <span>}</span><span>,</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"build"</span><span>:</span> <span>"npx redspot compile"</span><span>,</span>
    <span>"test"</span><span>:</span> <span>"npx redspot test"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>注意，最好同时将所有的插件升级到最新版。</p>
<h3 id="使用-erc20-trait-时-无法调用合约"> 使用 erc20-trait 时，无法调用合约</h3>
<p>由于 erc20-trait 多了命名空间，所以在调用的时候也必须加上命名空间。例子：</p>
<div><pre><code><span>// erc20</span>
contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>)</span>
<span>// erc20-trait</span>
contractFactory<span>.</span><span>deploy</span><span>(</span><span>"baseErc20,new"</span><span>,</span> <span>"1000000"</span><span>)</span>

<span>// erc20</span>
contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
<span>// erc20-trait</span>
contract<span>.</span>query<span>[</span><span>"baseErc20,balanceOf"</span><span>]</span><span>(</span>someaddress<span>)</span>

<span>// erc20</span>
contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
<span>// erc20-trait</span>
contract<span>.</span>tx<span>[</span><span>"baseErc20,transfer"</span><span>]</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h3 id="如何保证线上私钥的安全-避免上传到-github"> 如何保证线上私钥的安全，避免上传到 github</h3>
<p>可以使用环境变量配置 account，如：</p>
<div><pre><code><span>// redspot.config.ts</span>
<span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>


<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
  network<span>:</span> <span>{</span>
    mainnet<span>:</span> <span>{</span>
      <span>...</span>
      account<span>:</span> <span>[</span>process<span>.</span>env<span>.</span><span>ACCOUNT</span><span>]</span>
      <span>...</span>
    <span>}</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><p>运行脚本：</p>
<div><pre><code><span>REDSPOT_NETWORK</span><span>=</span>mainnet <span>ACCOUNT</span><span>=</span><span>"//Alice"</span> npx redspot run ./scripts/deploy.ts
</code></pre>
<div><span>1</span><br></div></div><p>你也可以使用 <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv </a> 等工具。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Runtime Environment</title>
    <id>https://www.patract.io/redspot/runtime-environment/</id>
    <link href="https://www.patract.io/redspot/runtime-environment/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="runtime-environment"> Runtime Environment</h1>
<p>RedSpot 运行时环境(RSE)包含了 Redspot 所有公开的功能。</p>
<p>当你导入 Redspot (import &quot;redspot&quot;)的时候，即获得了一个 RSE 环境。</p>
<h2 id="访问-rse"> 访问 RSE</h2>
<p>env 有如下的属性：</p>
<div><pre><code>RuntimeEnvironment {
		config; // 用户的配置文件 
    redspotArguments; // 运行命令时的全局参数，包含 network , logLevel 等。
    run； // 运行命令的函数
    network; // 包含了 api , keyring 等属性。
    artifacts; // 管理合约编译的产物
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>在 Redspot Console 中，env 的这些属性会注入到全局变量中。你可以直接访问它们：</p>
<div><pre><code>&gt; network.name
&#39;development&#39;
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>在 js 或者 ts 文件中，你可以通过 <code>import env from 'redspot'</code> 来访问 RSE。</p>
<div><pre><code><span>import</span> <span>{</span> config<span>,</span> redspotArguments<span>,</span> run<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span> 
</code></pre>
<div><span>1</span><br></div></div><h2 id="扩展-rse"> 扩展 RSE</h2>
<p>一些插件可以扩展 RSE ，为 RSE 增加一些额外属性或方法。如 <code>@redspot/patract</code> 就扩展了 RSE ，提供了 patract 的实例。当引入 patract 插件后，你可以这样访问 patract 实例：</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span> 
<span>console</span><span>.</span><span>log</span><span>(</span>patract<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>下面我们来详细介绍一下内置的 RSE 的中的各个属性：</p>
<h3 id="config"> config</h3>
<p>Config 包含 redspot.config.ts 中的所有配置选项。并且包含了默认的设置。 它是一个 JSON 对象。</p>
<p>获取当前配置的默认连接的网络</p>
<div><pre><code><span>import</span> <span>{</span> config <span>}</span> <span>from</span> <span>'redspot'</span> 
<span>console</span><span>.</span><span>log</span><span>(</span>config<span>.</span>defaultNetwork<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h3 id="redspotarguments"> redspotArguments</h3>
<p>当前运行的命令的全局参数：</p>
<div><pre><code>&gt; redspotArguments
{
  network: undefined,
  showStackTraces: false,
  version: false,
  help: false,
  config: undefined,
  verbose: false,
  logLevel: &#39;2&#39;,
  maxMemory: undefined,
  tsconfig: undefined
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h3 id="run"> run</h3>
<p>通过 run 函数，你可以在 js 或者 ts 文件中，调用 task ：</p>
<div><pre><code><span>import</span> <span>{</span> run <span>}</span> <span>from</span> <span>'redspot'</span>

<span>run</span><span>(</span><span>'test'</span><span>)</span> <span>// 运行测试命令</span>
<span>run</span><span>(</span><span>'test'</span><span>,</span> <span>{</span> testFiles<span>:</span> <span>'./tests/erc20.test.ts'</span><span>}</span><span>)</span> <span>// 传入参数</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h3 id="network"> network</h3>
<p>Network 包含你当前正在运行的网络的信息。通过 network 可以获取到 api，keyring, signer 等。network 的类型定义：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Network</span> <span>{</span>
  name<span>:</span> <span>string</span><span>;</span>
  config<span>:</span> NetworkConfig<span>;</span>
  provider<span>:</span> WsProvider<span>;</span>
  api<span>:</span> ApiPromise<span>;</span>
  registry<span>:</span> Registry<span>;</span>
  keyring<span>:</span> Keyring<span>;</span>
  <span>getSigners</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Signer<span>[</span><span>]</span><span>></span><span>;</span>
  <span>createSigner</span><span>(</span>pair<span>:</span> KeyringPair<span>)</span><span>:</span> Signer<span>;</span>
  gasLimit<span>:</span> <span>BN</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="network-name"> network.name</h4>
<p>当前正在使用的网络的名称</p>
<h4 id="network-config"> network.config</h4>
<p>当前正在使用的网络的配置选项，等价于：<code>config.networks[network.name]</code></p>
<h4 id="network-provider"> network.provider</h4>
<p>相当于 polkadotjs 中的 <a href="https://polkadot.js.org/docs/api/start/create/#providers" target="_blank" rel="noopener noreferrer">wsprovider</a> 的实例。他们具有相同的接口。<code>redspot.config.ts</code>中配置的 endpoint 会被用于 network.provider 的实例化参数。</p>
<h4 id="network-registry"> network.registry</h4>
<p>相当于 polkadotjs 中的 Registry  的实例，用于管理类型的编解码。它也包含了用户在 <code>redspot.config.ts</code> 中配置的 <code>types</code> 类型定义。查看polkadotjs 文档，了解更多： https://polkadot.js.org/docs/api/start/types.create/。</p>
<h4 id="network-keyring"> network.keyring</h4>
<p>相当于 polkadotjs 中的 Keyring 的实例。默认是 ss25519 类型。在 api 初始化完成后，会设置默认的 ss58 的值。查看更多关于 keyring: https://polkadot.js.org/docs/api/start/keyring。</p>
<h4 id="network-getsigners"> network.getSigners</h4>
<p>用户在 <code>redspot.config.ts</code> 中配置的 accounts ，会被解析成 Signer 。通过 getSigners 函数，可以获取所有的 signer。它是个数组与 accounts  中配置的账号对应。</p>
<p>获取到所有 signer：</p>
<div><pre><code><span>import</span> <span>{</span> network <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

network<span>.</span><span>getSigners</span><span>(</span><span>)</span><span>.</span><span>then</span><span>(</span><span>(</span>signers<span>)</span> <span>=></span> <span>{</span>
	<span>console</span><span>.</span><span>log</span><span>(</span>signers<span>[</span><span>0</span><span>]</span><span>.</span>address<span>)</span>
<span>}</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>实际上 signer 与 polkadot js 的 signer 是兼容的。signer 的类型定义：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Signer</span> <span>{</span>
   	address<span>:</span> <span>string</span><span>;</span>
   api<span>:</span> ApiPromise<span>;</span>
   pair<span>:</span> KeyringPair<span>;</span>
   <span>signPayload</span><span>:</span> <span>(</span>payload<span>:</span> SignerPayloadJSON<span>)</span> <span>=></span> <span>Promise</span><span>&lt;</span>SignerResult<span>></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>你也可以将它用在 polkadotjs 中，进行交易签名：</p>
<div><pre><code><span>import</span> <span>{</span> network <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> api <span>=</span> network<span>.</span>api

<span>async</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
  <span>const</span> signers <span>=</span> <span>await</span> network<span>.</span><span>getSigners</span><span>(</span><span>)</span>
  <span>const</span> <span>from</span> <span>=</span> signers<span>[</span><span>0</span><span>]</span>
  <span>const</span> to <span>=</span> signers<span>[</span><span>1</span><span>]</span>
  
  api<span>.</span>tx<span>.</span>balances<span>.</span><span>transfer</span><span>(</span>signer1<span>.</span>address<span>,</span> <span>100000000000</span><span>)</span><span>.</span><span>signAndSend</span><span>(</span><span>{</span>
  	signer<span>:</span> <span>from</span>
  <span>}</span><span>)</span>
<span>}</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br></div></div><h4 id="network-createsigner"> network.createSigner</h4>
<p>你可以通过 createSigner 函数生成一个 signer，它接收一个 keyringpair ，将其转化为 signer 实例：</p>
<div><pre><code><span>const</span> pair <span>=</span> keyring<span>.</span><span>createFromUri</span><span>(</span>uri<span>)</span>
<span>const</span> signer <span>=</span> network<span>.</span><span>createSigner</span><span>(</span>pair<span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="network-gaslimit"> network.gasLimit</h4>
<p>它来自于 config 中的 gaslimt，并且被解析成 bn 类型。</p>
<h3 id="artifacts"> artifacts</h3>
<p>通过 artifacts ，你可以访问和管理 abi。它的类型定义如下：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>Artifacts</span> <span>{</span>
  <span>readArtifact</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>AbiMetadata<span>></span><span>;</span>
  <span>readArtifactSync</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> AbiMetadata<span>;</span>
  <span>readAllArtifact</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>AbiMetadata<span>[</span><span>]</span><span>></span><span>;</span>
  <span>readAllArtifactSync</span><span>(</span><span>)</span><span>:</span> AbiMetadata<span>[</span><span>]</span><span>;</span>
  <span>getArtifactPath</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>string</span><span>></span><span>;</span>
  <span>getArtifactPathSync</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>string</span><span>;</span>
  <span>artifactExists</span><span>(</span>contractName<span>:</span> <span>string</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>boolean</span><span>></span><span>;</span>
  <span>getArtifactPaths</span><span>(</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>string</span><span>[</span><span>]</span><span>></span><span>;</span>
  <span>copyToArtifactDir</span><span>(</span>paths<span>:</span> <span>string</span><span>[</span><span>]</span><span>)</span><span>:</span> <span>Promise</span><span>&lt;</span><span>void</span><span>></span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><h4 id="artifacts-readartifact"> artifacts.readArtifact</h4>
<p>通过合约名字，获取合约的 metadata，它会返回一个 JSON 对象:</p>
<div><pre><code><span>{</span>
  metadataVersion<span>:</span> <span>string</span><span>;</span>
  source<span>:</span> <span>{</span>
    hash<span>:</span> <span>string</span><span>;</span>
    language<span>:</span> <span>string</span><span>;</span>
    compiler<span>:</span> <span>string</span><span>;</span>
    wasm<span>:</span> <span>string</span><span>;</span>
  <span>}</span><span>;</span>
  contract<span>:</span> <span>{</span>
    name<span>:</span> <span>string</span><span>;</span>
    version<span>:</span> <span>string</span><span>;</span>
    authors<span>:</span> <span>string</span><span>[</span><span>]</span><span>;</span>
  <span>}</span><span>;</span>
  types<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
  spec<span>:</span> <span>{</span>
    constructors<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    docs<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    events<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
    messages<span>:</span> <span>any</span><span>[</span><span>]</span><span>;</span>
  <span>}</span><span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br></div></div><p>其中 wasm 就是合约编译出来的 wasm 文件。</p>
<h4 id="artifacts-readartifactsync"> artifacts.readArtifactSync</h4>
<p><code>artifacts.readArtifact</code> 的同步版本。</p>
<h4 id="artifacts-readallartifact"> artifacts.readAllArtifact</h4>
<p>获取所有的合约的 metadata。</p>
<h4 id="artifacts-readallartifactsync"> artifacts.readAllArtifactSync</h4>
<p><code>artifacts.readAllArtifact</code> 的同步版本。</p>
<h4 id="artifacts-getartifactpath"> artifacts.getArtifactPath</h4>
<p>获取指定合约的 metadata 的文件路径。</p>
<h4 id="artifacts-getartifactpathsync"> artifacts.getArtifactPathSync</h4>
<p><code>artifacts.getArtifactPath</code> 的同步版本</p>
<h4 id="artifacts-artifactexists"> artifacts.artifactExists</h4>
<p>判断一个合约的 metadata 是否存在</p>
<h4 id="artifacts-getartifactpaths"> artifacts.getArtifactPaths</h4>
<p>获取所有合约的 metadata 的文件路径。</p>
<h4 id="artifacts-copytoartifactdir"> artifacts.copyToArtifactDir</h4>
<p>将文件拷贝到 artifact 目录</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/redspot/tutorial/</id>
    <link href="https://www.patract.io/redspot/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<h2 id="环境准备"> 环境准备</h2>
<h3 id="安装-node"> 安装 Node</h3>
<p>我们要求node 版本&gt;= 12.0，如果不是，则可以访问nodejs网站并了解如何安装或升级。或者我们建议您使用nvm安装Node。Windows用户可以改用nvm-windows。</p>
<h3 id="ink-合约编译的工具链"> ink! 合约编译的工具链</h3>
<ol>
<li>
<p>rust 环境。由于 ink! 合约需要rust 的 Wasm 工具链，且当前Wasm只能在nightly工具链下运行，因此开发者需要先准备 Wasm 编译环境：</p>
<div><pre><code>rustup <span>install</span> nightly
rustup component <span>add</span> rust-src --toolchain nightly
rustup target <span>add</span> wasm32-unknown-unknown --toolchain nightly
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div></li>
<li>
<p>ink! 编译合约的工具<code>cargo-contract</code></p>
<p>请注意以下命令安装的是parity默认提供的官方 <code>cargo-contract</code> （当前最新为0.10.0版本）.</p>
<div><pre><code>cargo <span>install</span> cargo-contract --force
</code></pre>
<div><span>1</span><br></div></div><p>若与Europa的话可以采用由 Patract 提供的 <code>cargo-contract</code>，这个版中中提供了一个<code>-d/--debug</code>的可选命令</p>
<div><pre><code>cargo <span>install</span> cargo-contract --git https://github.com/patractlabs/cargo-contract --branch<span>=</span>v0.10.0 --force
</code></pre>
<div><span>1</span><br></div></div><p>当前若安装 <code>cargo-contract</code> 的时候没有添加feature <code>binaryen-as-dependency</code>，则需要在当前环境中准备<code>wasm-opt</code>。</p>
</li>
<li>
<p>安装 <code>wasm-opt</code> （可选）</p>
</li>
</ol>
<p>wasm-opt 来自仓库 <a href="https://github.com/WebAssembly/binaryen" target="_blank" rel="noopener noreferrer">https://github.com/WebAssembly/binaryen</a>。开发者可以直接在release中下载到对应平台的最新的编译产物。通过直接下载的编译产物请放置在能被任意访问的PATH路径下。</p>
<p>或者开发者也可以通过系统命令安装<code>wasm-opt</code></p>
<p>TODO 确定不同平台的安装方式</p>
<h3 id="准备能运行合约的区块链节点"> 准备能运行合约的区块链节点</h3>
<h4 id="_1-jupiter"> 1. Jupiter</h4>
<p>Jupiter <a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/jupiter</a> 是 Patract 维护的，包含 Patract 合约设计规范并兼容最新 <code>pallet-contracts</code> 模块的合约测试网。</p>
<p>Jupiter 有三类节点：</p>
<ul>
<li>运行于 rococo 上的 Jupiter 合约平行链；</li>
<li>独立运行对外提供最新合约功能的 Jupiter 独立测试网；</li>
<li>适用于本地快速测试的 Jupiter 节点</li>
</ul>
<p>这三类节点的区别及编译安装等信息请参阅该项目的Readme。</p>
<h4 id="_2-europa"> 2. Europa</h4>
<p>Europa <a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/europa</a> 是 Patract 设计的用于帮助合约开发者调试及测试合约的合约沙盒。该合约沙盒的定位类似于 Ethereum 生态中的 Ganache，但 Europa 的特性更多的体现在其提供了部署调用合约过程中的详细执行信息的日志，能够最大程度反应出合约模块这个“黑盒”的运行情况，对合约的开发者十分有帮助。</p>
<p>开发者可以简单的通过以下方式安装并启动Europa：</p>
<div><pre><code>cargo <span>install</span> europa --git https://github.com/patractlabs/europa --locked --force
europa --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>Europa 不同的版本及其他信息请参阅该项目的Readme。</p>
<h4 id="_3-canvas"> 3. Canvas</h4>
<p>Canvas <a href="https://github.com/paritytech/canvas-node" target="_blank" rel="noopener noreferrer">https://github.com/paritytech/canvas-node</a> 是 parity 官方提供的具备 <code>pallet-contracts</code> 模块的合约测试链，这个测试链是一个 parity <code>ink!</code> &amp; <code>pallet-contracts</code> 开发组维护的测试网。</p>
<p>参与 canvas 网络的方式请参照该项目的 Readme。若目的只是为了在本地运行测试节点，可以执行如下命令：</p>
<div><pre><code>cargo <span>install</span> canvas-node --git https://github.com/paritytech/canvas-node.git --force --locked
canvas --dev --tmp
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h2 id="创建-redspot-项目"> 创建 Redspot 项目</h2>
<h3 id="从模版安装"> 从模版安装</h3>
<p>Redspot 提供合约开发模版，可以让用户快速搭建起一个项目。目前仅支持安装 erc20 合约的模版。</p>
<p>如果要从模版创建一个新项目，可以选择使用 <code>npx</code> 。npx 是 npm (<em>npm 5.2+</em> ) 里自带的一个包执行器。执行以下命令将会拉取<strong>最新</strong>的Redspot，并以 erc20 为模板构建出 Redspot 项目。</p>
<div><pre><code>npx redspot-new erc20
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>注意由于当前 ink! 变动频繁，因此Redspot还未提供从模板创建项目功能。开发者若需要其他项目模板，可以从 Redspot 的项目仓库 <a href="https://github.com/patractlabs/redspot" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/redspot</a> 中的 example 目录中拷贝到任意目录下，并更改例如项目名等配置。<strong>example 目录下的所有案例都已经是 Redspot 项目结构</strong>，因此不需要用户再执行<code>npx redspot-new</code>创建项目。</p>
</blockquote>
<p>若一个项目已经由 Redspot 创建，则该项目根目录下一定存在一个文件<code>redspot.config.ts</code>以标志这个项目是Redspot。同时相同目录下的<code>package.json</code>则控制了这个项目对应的Redspot的版本。</p>
<p>若合约开发者从github，或者example，或者其他情况下获取到了别的开发者已经构建好的Redspot项目，则进入到这个项目目录下并执行<code>yarn install</code>命令可以恢复出该Redspot项目使用的Redspot环境，例如如下案例：</p>
<div><pre><code><span># copy the delegator multi-contract example from redspot repo to local dir</span>
<span>cp</span> -r ./redpost/example/delegator ./
<span>cd</span> delegator
<span>yarn</span> <span>install</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><p>默认的模版是已经配置了 typescript 。也推荐大家使用 typescript 进行开发。即使没有 typescript 经验，typescript 也是兼容 javascript 的，不定义任何类型，也可以正常运行，并且仍然能够拥有 typescript 强大的类型提示和错误提示功能。</p>
<h3 id="集成到已有的合约项目中"> 集成到已有的合约项目中</h3>
<p>Redspot 也可以很轻松的集成到已存在的合约项目中。我们以官方的 ink (https://github.com/paritytech/ink)仓库中的 <strong>examples</strong> 目录下的合约为例。</p>
<h4 id="编译合约"> 编译合约</h4>
<p>首先克隆 ink 仓库并打开 ink 目录：</p>
<div><pre><code>git clone https://github.com/paritytech/ink.git
cd ink
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>然后我们在 ink 的根目录中创建以下三个文件：</p>
<p>redspot.config.ts:</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span> <span>// 引入 @redspot/patract 插件</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span> <span>// 引入 @redspot/chai 插件</span>

<span>export</span> <span>default</span> <span>{</span>
  defaultNetwork<span>:</span> <span>'development'</span><span>,</span> <span>// 默认的 network</span>
  contract<span>:</span> <span>{</span>
    ink<span>:</span> <span>{</span>
      toolchain<span>:</span> <span>'nightly'</span><span>,</span>      <span>// 指定编译合约时的 toolchain 版本</span>
      sources<span>:</span> <span>[</span><span>'examples/**/*'</span><span>]</span> <span>// 合约所在的目录</span>
    <span>}</span>
  <span>}</span><span>,</span>
  networks<span>:</span> <span>{</span>
    <span>// development 网络的配置</span>
    development<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span>
      types<span>:</span> <span>{</span><span>}</span><span>,</span>
      gasLimit<span>:</span> <span>'400000000000'</span><span>,</span> <span>// 设置默认的 gasLimit</span>
      explorerUrl<span>:</span>
        <span>'https://polkadot.js.org/apps/#/explorer/query/?rpc=ws://127.0.0.1:9944/'</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
  mocha<span>:</span> <span>{</span>
    timeout<span>:</span> <span>60000</span>
  <span>}</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br></div></div><p>package.json:</p>
<div><pre><code><span>{</span>
  <span>"name"</span><span>:</span> <span>"examples"</span><span>,</span>
  <span>"version"</span><span>:</span> <span>"0.1.0"</span><span>,</span>
  <span>"private"</span><span>:</span> <span>true</span><span>,</span>
  <span>"resolutions"</span><span>:</span> <span>{</span>
    <span>"@polkadot/api"</span><span>:</span> <span>"^3.10.2"</span><span>,</span>
    <span>"@polkadot/api-contract"</span><span>:</span> <span>"^3.10.2"</span>
  <span>}</span><span>,</span>
  <span>"dependencies"</span><span>:</span> <span>{</span>
    <span>"@redspot/chai"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"@redspot/patract"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"@types/chai"</span><span>:</span> <span>"^4.2.14"</span><span>,</span>
    <span>"@types/mocha"</span><span>:</span> <span>"^8.0.3"</span><span>,</span>
    <span>"chai"</span><span>:</span> <span>"^4.2.0"</span><span>,</span>
    <span>"redspot"</span><span>:</span> <span>"^0.10.1"</span><span>,</span>
    <span>"typescript"</span><span>:</span> <span>"^4.0.2"</span>
  <span>}</span><span>,</span>
  <span>"scripts"</span><span>:</span> <span>{</span>
    <span>"build"</span><span>:</span> <span>"npx redspot compile"</span><span>,</span>
    <span>"test"</span><span>:</span> <span>"npx redspot test"</span>
  <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br></div></div><p>tsconfig.json:</p>
<div><pre><code><span>{</span>
  <span>"compilerOptions"</span><span>:</span> <span>{</span>
    <span>"target"</span><span>:</span> <span>"es5"</span><span>,</span>
    <span>"module"</span><span>:</span> <span>"commonjs"</span><span>,</span>
    <span>"strict"</span><span>:</span> <span>true</span><span>,</span>
    <span>"esModuleInterop"</span><span>:</span> <span>true</span><span>,</span>
    <span>"outDir"</span><span>:</span> <span>"dist"</span><span>,</span>
    <span>"noImplicitAny"</span><span>:</span> <span>false</span>
  <span>}</span><span>,</span>
  <span>"include"</span><span>:</span> <span>[</span>
    <span>"**/*.ts"</span>
  <span>]</span><span>,</span>
  <span>"exclude"</span><span>:</span> <span>[</span>
    <span>"node_modules"</span>
  <span>]</span><span>,</span>
  <span>"files"</span><span>:</span> <span>[</span>
    <span>"./redspot.config.ts"</span><span>,</span>
  <span>]</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><p>然后安装 npm 依赖（推荐使用 <a href="https://classic.yarnpkg.com/en/docs/install" target="_blank" rel="noopener noreferrer">yarn</a> 作为包管理器）：</p>
<div><pre><code>yarn 或者 npm install
</code></pre>
<div><span>1</span><br></div></div><p>然后在项目的根目录运行命令 <code>npx redspot compile</code> 将会编译 examples 下的所有合约，现在我们执行以下命令：</p>
<div><pre><code>npx redspot compile examples/erc20
</code></pre>
<div><span>1</span><br></div></div><p>该命令会指定编译 erc20 合约。编译完成后，你可以在 artifacts 目录下找到编译的产物。</p>
<h4 id="部署合约"> 部署合约</h4>
<p>现在我们可以通过 Redspot 运行一个部署脚本了，在 ink 根目录创建这个文件：</p>
<p>deploy.ts</p>
<div><pre><code><span>import</span> <span>{</span> network<span>,</span> patract <span>}</span> <span>from</span> <span>"redspot"</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory <span>}</span> <span>=</span> patract<span>;</span>
<span>const</span> <span>{</span> getSigners<span>,</span> api <span>}</span> <span>=</span> network<span>;</span>

<span>async</span> <span>function</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc20"</span><span>)</span><span>;</span>

    <span>await</span> api<span>.</span>isReady<span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc201"</span><span>)</span><span>;</span>

    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> signer <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>

    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>"erc20"</span><span>,</span> signer<span>)</span><span>;</span>

    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>,</span> <span>{</span>
        gasLimit<span>:</span> <span>"200000000000"</span><span>,</span>
        value<span>:</span> <span>"10000000000000000"</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span>
        <span>"Deploy successfully. The contract address: "</span><span>,</span>
        contract<span>.</span>address<span>.</span><span>toString</span><span>(</span><span>)</span>
    <span>)</span><span>;</span>

    api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>run</span><span>(</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>(</span>err<span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>然后你确保已经在 <code>redspot.config.ts</code> 中正确配置了网络:</p>
<div><pre><code><span>{</span>
	<span>...</span>
	networks<span>:</span> <span>{</span>
    development<span>:</span> <span>{</span>
      endpoint<span>:</span> <span>'ws://127.0.0.1:9944'</span><span>,</span> <span>// </span>
      types<span>:</span> <span>{</span><span>}</span><span>,</span>
      <span>...</span>
    <span>}</span><span>,</span>
  <span>}</span><span>,</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br></div></div><p>现在可以运行 deploy.ts 文件了，加上 <code>--no-compile</code> 防止重复编译：</p>
<div><pre><code>npx redspot run ./deploy.ts --no-compile
</code></pre>
<div><span>1</span><br></div></div><p>合约部署成功后，你会得到类似这样的信息：</p>
<div><pre><code>Deploy successfully. The contract address:  5CqB5Mh9UdVbTE1Gt5PJfWSiCHydJaJsA31HjKGti1Z2fn78
</code></pre>
<div><span>1</span><br></div></div><h4 id="测试合约"> 测试合约</h4>
<p>我们在 tests 目录下新增 erc20.test.ts 文件，用来测试 erc20 合约：</p>
<p>tests/erc20.test.ts</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br></div></div><p>运行测试命令：</p>
<div><pre><code>npx redspot test --no-compile
</code></pre>
<div><span>1</span><br></div></div><p>你将会得到以下类似结果：</p>
<div><pre><code>....
✓ Can not transfer from empty account (17912ms)

  4 passing (46s)
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br></div></div><h2 id="项目开发"> 项目开发</h2>
<p>进入新创建的Redspot的项目的根目录下，执行以下命令可查看当前 Redspot 支持的任务（Tasks）:</p>
<div><pre><code>npx redspot
</code></pre>
<div><span>1</span><br></div></div><blockquote>
<p>Task 的概念请参照该文档 <a href="./overview.html#Tasks">Tasks</a>。</p>
</blockquote>
<p>运行 <code>npx redspot --help</code> 查看帮助：</p>
<div><pre><code>Redspot version 0.10.1

Usage: redspot [GLOBAL OPTIONS] &lt;TASK&gt; [TASK OPTIONS]

GLOBAL OPTIONS:

  --config              A Redspot config file. 
  --help                Shows this message, or a task&#39;s help if its name is provided 
  --log-level           Set log levels 1-5 
  --max-memory          The maximum amount of memory that Redspot can use. 
  --network             The network to connect to. 
  --show-stack-traces   Show stack traces. 
  --tsconfig            Reserved redspot argument -- Has no effect. 
  --verbose             Enables Redspot verbose logging 
  --version             Shows redspot&#39;s version. 


AVAILABLE TASKS:

  check         Check whatever you need
  clean         Clears the cache and deletes all artifacts
  compile       Compiles the entire project, building all artifacts
  console       Opens a redspot console
  help          Prints this message
  run           Runs a user-defined script after compiling the project
  test          Runs mocha tests

To get help for a specific task run: npx redspot help [task]
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br></div></div><p>可以看到帮助信息有两个部分，GLOBAL OPTIONS 和 TASKS。通过 TASK ，我们可以调用Redspot内置的任务或者自定义的任务。比如</p>
<p><code>npx redspot compile</code> 可以运行编译合约命令。</p>
<p>通常每个 TASK 都会提供自己的参数配置。通过 <code>npx redspot compile --help</code> 可以查看帮助信息：</p>
<div><pre><code>Redspot version 0.10.1

Usage: redspot [GLOBAL OPTIONS] compile [...sourcePattern]

POSITIONAL ARGUMENTS:

  sourcePattern	A glob string that is matched against (default: [])

compile: Compiles the entire project, building all artifacts

For global options help run: redspot help
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br></div></div><p>对于 compile 命令，我们可以传入合约的路径来指定需要编译的合约，如：<code>npx redspot compile examples/erc20</code> 。</p>
<p><code>GLOBAL OPTIONS</code> 是 Redspot 运行时的全局的配置。它可以附加到任一 TASK 中。如 <code>npx redspot test --network substrate</code> 将指定连接到 substrate 网络（需要在 config 中配置 substrate 网络）。<code>npx redspot test --log-level 3</code> 将指定打印的日志的级别，默认为2 。我们也可以通过环境变量设置 <code>GLOBAL OPTIONS</code> ：</p>
<ul>
<li>设置 log level: <code>REDSPOT_LOG_LEVEL=5 npx redspot test</code> ,</li>
<li>设置 network: <code>REDSPOT_NETWORK=substrate npx redspot test</code>.</li>
</ul>
<p>下面我们来介绍一下内置的几个 TASK：</p>
<h3 id="compile"> Compile</h3>
<p>运行 <code>npx redspot compile</code> 命令将会进行合约编译。目前支持 <a href="https://github.com/paritytech/ink" target="_blank" rel="noopener noreferrer">ink </a> 合约和 <a href="https://github.com/hyperledger-labs/solang" target="_blank" rel="noopener noreferrer">solang</a> 合约的编译。编译 ink 合约时，请确保你已经安装了 <a href="https://github.com/paritytech/cargo-contract" target="_blank" rel="noopener noreferrer">cargo-contract</a> 。编译 solang 合约时，请确保你已经安装了 <a href="https://solang.readthedocs.io/en/latest/installing.html#building-solang-from-crates-io" target="_blank" rel="noopener noreferrer">solang cli</a>。在 <code>redspot.config.ts</code> 中，你可以配置编译的选项：</p>
<div><pre><code>{
	...
	contract: {
    ink: {
      toolchain: &#39;nightly&#39;, // 设置 cargo-contract 编译时的 toolchain
      sources: [&#39;contracts/**/*&#39;] // 配置查找合约文件的目录
    },
    solang: {
      sources: [&#39;contracts/**/*.sol&#39;] // 配置查找合约文件的目录
    }
  },
  paths: {
  	...
    artifacts: &#39;artifacts&#39; // 指定存放合约编译产物的目录
    ...
  }，
  ...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br></div></div><p>compile 命令接收 sourcePattern 参数，可以覆盖配置文件中的 sources , 例子：</p>
<p><code>npx redspot compile examples/erc20</code></p>
<p>将仅在 <code>examples/erc20</code> 目录下查找合约。</p>
<p>编译完成后，可以在 <code>artifacts</code> 目录中找到编译的产物。 通常将会有两种格式，<code>[ContractName].contract</code> 和<code>[ContractName].json</code> ，他们之间唯一的区别就是 <code>.json</code> 中不包含 wasm，体积会小一些。你也可以使用自己的工具编译，然后将 <code>[ContractName].contract</code>文件复制到 artifacts 目录中。这样也不会影响到其他功能的使用。</p>
<h3 id="test"> Test</h3>
<p>自动化测试在编写合约中至关重要。你可以使用 Redspot 进行单元测试。在运行测试命令前，你需要确保已经正确配置了需要连接的节点。Test 的相关配置如下：</p>
<div><pre><code>{
	defaultNetwork: &quot;development&quot;, // 默认连接的网络
	...
	networks: {
			development: {
          endpoint: &quot;ws://127.0.0.1:9944&quot;, // 链接的网络的url（websocket）
          types: {}, // 传递给 polkadotjs 使用的类型定义
          accounts: [&quot;//Alice&quot;, &quot;tomato mad peasant blush poem obtain inspire distance attitude mercy return marriage&quot;] // 用来签名的账号，默认为 [&#39;//Alice&#39;, &#39;//Bob&#39;, &#39;//Charlie&#39;, &#39;//Dave&#39;, &#39;//Eve&#39;, &#39;//Ferdie&#39;]
          gasLimit: &quot;400000000000&quot;, // 默认的 gaslimit
      },
	}，
	path: {
		tests: &#39;tests&#39;, // 查找测试文件的目录
	},
	mocha: {
		timeout: 60000, // mocha 测试时的超时时间
		...
	}
	...
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br></div></div><p>你可以通过传入 network 选项，配置测试时连接的网络，例子：</p>
<p><code>REDSPOT_NETWORK=development npx redpost test</code></p>
<p>你也可以仅对单个文件进行测试<code>npx redspot test ./tests/[filename].ts</code>。设置 <code>--no-compile</code> 可以避免自动运行编译命令 <code>npx redspot test --no-compile</code>。</p>
<p>Test 默认使用 mocha 作为测试框架。你可以在 <code>redspot.config.ts</code>文件中配置mocha的选项。这里是所有支持的选项：https://mochajs.org/api/mocha 。</p>
<p>一个完整的测试文件如下：</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br></div></div><p>我们在 setup 函数中，创建了一个随机的账号，并且给这个账号分配了固定的余额。然后用这个账号进行各种测试，这样以保证每次得到的测试结果都是相同的。</p>
<p>在这个测试文件中，我们用到了两个 Redspot 的插件， @redspot/patract 和 @redspot/chai ，我们会在之后的文章中，详细介绍他们。</p>
<p>实际上，不是非得要用 <code>npx redspot test</code> 才能运行这个测试文件。Test 命令仅仅只是简单的对 mocha 命令封装了一下。你可以使用任何你喜欢的方式，运行测试代码。这中间没有魔法。比如，可以尝试着执行一下命令，运行测试用例：</p>
<p><code>TS_NODE_TRANSPILE_ONLY=true mocha -r ts-node/register tests/erc20.test.ts --timeout 60000</code></p>
<p>其中我们使用 ts-node 编译运行 typescript 代码，因此需要加上 <code>-r ts-node/register</code> 。<code>TS_NODE_TRANSPILE_ONLY=true</code> 设置 ts-node 运行时忽略 typescript 类型错误。</p>
<h3 id="run"> Run</h3>
<p>Run 命令可以用来运行任一 typescript 文件。设置 <code>--no-compile</code> 可以避免自动运行编译命令 <code>npx redspot run --no-compile</code>。</p>
<p>和 Test 一样，它也仅仅只是 <code>TS_NODE_TRANSPILE_ONLY=true node -r ts-node/register [filepath]</code>. 的简单封装而已。</p>
<p>通常我们可以使用 Run 来运行部署脚本：</p>
<div><pre><code><span>import</span> <span>{</span> network<span>,</span> patract <span>}</span> <span>from</span> <span>"redspot"</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory <span>}</span> <span>=</span> patract<span>;</span>
<span>const</span> <span>{</span> getSigners<span>,</span> api <span>}</span> <span>=</span> network<span>;</span>

<span>async</span> <span>function</span> <span>run</span><span>(</span><span>)</span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc20"</span><span>)</span><span>;</span>

    <span>await</span> api<span>.</span>isReady<span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span><span>"deploy erc201"</span><span>)</span><span>;</span>

    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> signer <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>

    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>"erc20"</span><span>,</span> signer<span>)</span><span>;</span>

    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>"new"</span><span>,</span> <span>"1000000"</span><span>,</span> <span>{</span>
        gasLimit<span>:</span> <span>"200000000000"</span><span>,</span>
        value<span>:</span> <span>"10000000000000000"</span><span>,</span>
    <span>}</span><span>)</span><span>;</span>

    <span>console</span><span>.</span><span>log</span><span>(</span>
        <span>"Deploy successfully. The contract address: "</span><span>,</span>
        contract<span>.</span>address<span>.</span><span>toString</span><span>(</span><span>)</span>
    <span>)</span><span>;</span>

    api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
<span>}</span>

<span>run</span><span>(</span><span>)</span><span>.</span><span>catch</span><span>(</span><span>(</span>err<span>)</span> <span>=></span> <span>{</span>
    <span>console</span><span>.</span><span>log</span><span>(</span>err<span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br></div></div><p>这其中使用了 <code>@redspot/patract</code> 插件。我们会在后面的文章中详细解释。</p>
<h3 id="console"> Console</h3>
<p>你可以通过运行 <code>npx redspot console</code> 来启动一个node 的 <a href="https://nodejs.dev/learn/how-to-use-the-nodejs-repl" target="_blank" rel="noopener noreferrer"><em>REPL</em></a> 控制台。它内置了 Redspot Runtime Environment ，所以你在其中可以访问 Redspot 提供插件，配置，任务。我们会在后面有一个详细的说明。</p>
<p>可以在 https://github.com/patractlabs/redspot/tree/master/examples/ 查看更多示例。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Solang</title>
    <id>https://www.patract.io/solang/introduction/</id>
    <link href="https://www.patract.io/solang/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="solang"> Solang</h1>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Benchmark</title>
    <id>https://www.patract.io/zkmega/benchmark/</id>
    <link href="https://www.patract.io/zkmega/benchmark/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="benchmark"> Benchmark</h1>
<p>We have constructed <a href="https://github.com/patractlabs/zkmega/tree/master/crates/arkworks/src/tests" target="_blank" rel="noopener noreferrer">the tests of zkMega curves</a> in <a href="https://github.com/patractlabs/substrate/blob/features/curve-benchmark/bin/node-template/pallets/template/src/lib.rs" target="_blank" rel="noopener noreferrer">pallet-template</a> which imports the
curves from zkMega directly(<em>Wasm</em>) and with <a href="https://github.com/patractlabs/substrate/blob/features/curve-benchmark/bin/node-template/io/src/lib.rs" target="_blank" rel="noopener noreferrer">runtime-interface</a>(<em>Native</em>).</p>
<h2 id="building"> Building</h2>
<div><pre><code><span># Clone the branch `curve-benchmark` of our fork</span>
<span>git</span> clone https://github.com/patractlabs/jupiter.git <span>\</span>
    --branch features/runtime-interfaces <span>\</span>
    --depth <span>=</span><span>1</span>

<span># Build the template</span>
cargo build -p jupiter-dev --all-features --release

<span># Check the command benchmark works fine</span>
<span># ./target/release/jupiter-dev benchmark -p pallet_template -e wasm_bls_12_381_add</span>
./target/release/jupiter-dev benchmark -p pallet_template -e wasm_bls_12_381_add

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br></div></div><h2 id="result"> Result</h2>
<table>
<thead>
<tr>
<th>memory</th>
<th>processor</th>
</tr>
</thead>
<tbody>
<tr>
<td>64GiB System memory</td>
<td>AMD Ryzen 9 5900X 12-Core Processor</td>
</tr>
</tbody>
</table>
<p>Here we test the curevs on ubuntu LTS 20.04, Time is measured in us</p>
<table>
<thead>
<tr>
<th>Curve</th>
<th>Native</th>
<th>Time(us)</th>
<th>WASM</th>
<th>Time(us)</th>
<th>Speed(Native/WASM)</th>
</tr>
</thead>
<tbody>
<tr>
<td>bls12_377(~9.5x)</td>
<td>native_bls12_377_add</td>
<td>9.588</td>
<td>wasm_bls12_377_add</td>
<td>29.02</td>
<td>~3x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_mul</td>
<td>183.1</td>
<td>wasm_bls12_377_mul</td>
<td>1893</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_pairing_two</td>
<td>1732</td>
<td>wasm_bls12_377_pairing_two</td>
<td>15310</td>
<td>~7x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_377_mimc_verify</td>
<td>7484</td>
<td>wasm_bls12_377_mimc_verify</td>
<td>64680</td>
<td>~9x</td>
</tr>
<tr>
<td>bls12_381(~10x)</td>
<td>native_bls12_381_add</td>
<td>13.9</td>
<td>wasm_bls12_381_add</td>
<td>28.31</td>
<td>~2x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_mul</td>
<td>177.1</td>
<td>wasm_bls12_381_mul</td>
<td>1879</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_pairing_two</td>
<td>1438</td>
<td>wasm_bls12_381_pairing_two</td>
<td>14770</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bls12_381_mimc_verify</td>
<td>6411</td>
<td>wasm_bls12_381_mimc_verify</td>
<td>63260</td>
<td>~10x</td>
</tr>
<tr>
<td>bn254(~5x)</td>
<td>native_bn254_add</td>
<td>5.631</td>
<td>wasm_bn254_add</td>
<td>16.05</td>
<td>~3x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_mul</td>
<td>107.7</td>
<td>wasm_bn254_mul</td>
<td>534.3</td>
<td>~5x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_pairing_two</td>
<td>1150</td>
<td>wasm_bn254_pairing_two</td>
<td>5061</td>
<td>~5x</td>
</tr>
<tr>
<td></td>
<td>native_bn254_mimc_verify</td>
<td>4178</td>
<td>wasm_bn254_mimc_verify</td>
<td>19850</td>
<td>~5x</td>
</tr>
<tr>
<td>bw6_761(~13x)</td>
<td>native_bw6_761_add</td>
<td>30.35</td>
<td>wasm_bw6_761_add</td>
<td>26.79</td>
<td>\</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_mul</td>
<td>963.8</td>
<td>wasm_bw6_761_mul</td>
<td>14630</td>
<td>~15x</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_pairing_two</td>
<td>5715</td>
<td>wasm_bw6_761_pairing_two</td>
<td>60960</td>
<td>~10x</td>
</tr>
<tr>
<td></td>
<td>native_bw6_761_mimc_verify</td>
<td>20330</td>
<td>wasm_bw6_761_mimc_verify</td>
<td>299800</td>
<td>~15x</td>
</tr>
</tbody>
</table>
<div><pre><code><span># 1. Under the jupiter repo</span>
<span># 2. Has compiled jupiter-dev</span>
<span>sh</span> ./benchmark.sh
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Contract</title>
    <id>https://www.patract.io/zkmega/contract/</id>
    <link href="https://www.patract.io/zkmega/contract/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="contract"> Contract</h1>
<blockquote>
<p>Currently we (Patract) support zkMega in testnet Jupiter (<a href="https://github.com/patractlabs/jupiter" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/jupiter</a>) and contract debug
sandbox Europa (<a href="https://github.com/patractlabs/europa" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/europa</a>). And any substrate based chain which uses <code>pallet-contracts</code> v3.0.0 could integrate zkMega.</p>
<p>if the <code>pallet-contracts</code> Wasm contract chain use zkMega, then the following contract could run normally in those chain.</p>
</blockquote>
<h2 id="example"> Example</h2>
<p>TODO this example is wrong for current version!</p>
<div><pre><code>#![cfg_attr(not(feature = &quot;std&quot;), no_std)]

#[ink::contract]
mod altbn128 {
    use ink_env::zk_snarks::AltBn128;
    use ink_prelude::string::String;

    #[ink(storage)]
    pub struct Altbn128 {
        value: String,
    }

    impl Altbn128 {
        #[ink(constructor)]
        pub fn new(init_value: String) -&gt; Self {
            Self { value: init_value }
        }

        #[ink(constructor)]
        pub fn default() -&gt; Self {
            Self::new(&quot;hello, world&quot;.into())
        }

        #[ink(message)]
        pub fn bn_256_add(&amp;mut self) {
            let mut result = [0; 64];
            ink_env::inflect_add::&lt;AltBn128&gt;(&amp;[], &amp;[], &amp;mut result);
            self.value = ink_prelude::format!(&quot;0x{:x?}&quot;, result);
        }

        #[ink(message)]
        pub fn get(&amp;self) -&gt; String {
            ink_prelude::format!(&quot;{}&quot;, &amp;self.value)
        }
    }
}
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Example</title>
    <id>https://www.patract.io/zkmega/example/</id>
    <link href="https://www.patract.io/zkmega/example/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="example"> Example</h1>
<h2 id="call-curves-in-ink"> Call curves in ink!</h2>
<table>
<thead>
<tr>
<th>curve</th>
<th>add</th>
<th>mul</th>
<th>pairing</th>
</tr>
</thead>
<tbody>
<tr>
<td>bls12_377</td>
<td>0x01000000</td>
<td>0x01000001</td>
<td>0x01000002</td>
</tr>
<tr>
<td>bls12_381</td>
<td>0x01000010</td>
<td>0x01000011</td>
<td>0x01000012</td>
</tr>
<tr>
<td>bn254</td>
<td>0x01000020</td>
<td>0x01000021</td>
<td>0x01000022</td>
</tr>
<tr>
<td>bw6_761</td>
<td>0x01000030</td>
<td>0x01000031</td>
<td>0x01000032</td>
</tr>
</tbody>
</table>
<div><pre><code><span>let</span> result <span>=</span> <span>ink_env<span>::</span></span><span>call_chain_extension</span><span>(</span>func_id<span>,</span> <span>&amp;</span><span>Vec</span><span>::</span><span>from</span><span>(</span>input<span>)</span><span>)</span><span>?</span>
</code></pre>
<div><span>1</span><br></div></div><h2 id="mimc"> MIMC</h2>
<div><pre><code><span>use</span> <span>zkp_u256<span>::</span></span><span>{</span><span>U256</span><span>,</span> <span>Zero</span><span>}</span><span>;</span>
<span>use</span> <span>merkle_tree<span>::</span>mimc<span>::</span></span><span>{</span>mimc<span>,</span>mimc_with_key<span>}</span>
<span>let</span> message <span>=</span> <span>U256</span><span>::</span><span>from_decimal_str</span><span>(</span><span>"49"</span><span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>let</span> in_key <span>=</span> <span>U256</span><span>::</span><span>zero</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>
    <span>mimc</span><span>(</span><span>b"1"</span><span>)</span><span>,</span>
    <span>mimc_with_key</span><span>(</span><span>vec!</span><span>[</span><span>&amp;</span>message<span>]</span><span>,</span> <span>&amp;</span>in_key<span>)</span>
<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><h2 id="merkle-tree"> Merkle Tree</h2>
<div><pre><code><span>use</span> <span>merkle_tree<span>::</span></span><span>MerkleTree</span><span>;</span>
<span>let</span> <span>mut</span> mt <span>=</span> <span>MerkleTree</span><span>::</span><span>default</span><span>(</span><span>)</span><span>;</span>
<span>let</span> message <span>=</span> <span>b"49"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>

<span>let</span> message <span>=</span> <span>b"50"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>

<span>let</span> message <span>=</span> <span>b"51"</span><span>;</span>
<span>let</span> <span>(</span>leaf<span>,</span> index<span>)</span> <span>=</span> mt<span>.</span><span>insert</span><span>(</span>message<span>)</span><span>.</span><span>unwrap</span><span>(</span><span>)</span><span>;</span>
<span>assert_eq!</span><span>(</span>mt<span>.</span><span>update</span><span>(</span><span>)</span><span>,</span> mt<span>.</span><span>get_root</span><span>(</span><span>)</span><span>)</span><span>;</span>
<span>let</span> merkle_proof <span>=</span> mt<span>.</span><span>get_proof</span><span>(</span>index<span>)</span><span>;</span>
<span>assert!</span><span>(</span>mt<span>.</span><span>verify_merkle_proof</span><span>(</span>leaf<span>,</span> merkle_proof<span>,</span> index<span>)</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br></div></div><h2 id="eddsa"> EDDSA</h2>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">zkMega</title>
    <id>https://www.patract.io/zkmega/introduction/</id>
    <link href="https://www.patract.io/zkmega/introduction/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="zkmega"> zkMega</h1>
<p>zkMega is a zero-knowledge proof tool set building for the Polkadot ecology.</p>
<ul>
<li>Polkadot Treasury report for v0.1: https://polkadot.polkassembly.io/post/221.</li>
</ul>
<h2 id="zk-rollup-introduction"> ZK Rollup Introduction</h2>
<p>Compared with the privacy function, the performance improvement brought by Rollup is the
early application direction of zero-knowledge proof. At present, the Layer 2 expansion
plan of the blockchain is to transfer a considerable part of the on-chain workload to
off-chain to complete, and the most watched one is ZK Rollup. The essence of ZK Rollup
is to compress the application on-chain state and store it in a Merkle tree, and move
the state transition funtions to off-chain. At the same time, the correctness of the
off-chain state transition process is guaranteed through the proof of zkSNARK. Compared
with the high cost of directly processing state changes on the chain, the ZK Proof's
on-chain smart contract verification is extremely cost low. At the same time, the
compressed information will also be submitted to the chain together with the proof,
which ensures data availability and obtains the same level of security as Layer 1.</p>
<p>The Ethereum Layer 2 protocols related to ZK Rollup are: <a href="https://zksync.io/" target="_blank" rel="noopener noreferrer">zkSync</a>, <a href="https://aztec.network/" target="_blank" rel="noopener noreferrer">aztec</a>,
etc. Their contract verification modules share a part of the elliptic curve's basic algorithms.
In 2017, Ethereum integrated three basic cryptographic calculation units of the alt
bn128 curve in the form of pre-compiled contracts, which are <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-196.md" target="_blank" rel="noopener noreferrer">EIP196</a>’s ADD and Scalar_MUL
algorithms, and <a href="https://github.com/ethereum/EIPs/blob/master/EIPS/eip-197.md" target="_blank" rel="noopener noreferrer">EIP197</a>’s Pairing algorithm. On top of this, due to the lack of rapid
upgrade capabilities of Ethereum, the community can only encapsulate some  tool libraries
through costly Solidity contracts. On top of these basic contract  libraries, many DApps can combine
ZK Rollup technology to achieve some innovations, such as <a href="https://loopring.org/" target="_blank" rel="noopener noreferrer">loopring</a>, <a href="https://gitcoin.co/" target="_blank" rel="noopener noreferrer">gitcoin</a>
and <a href="https://uniswap.org/" target="_blank" rel="noopener noreferrer">uniswap</a> etc. However, in the past 3 years, ZK technology has further developed,
such as the more practical <a href="https://electriccoin.co/blog/new-snark-curve/" target="_blank" rel="noopener noreferrer">BLS curve</a>, and <a href="https://eprint.iacr.org/2019/953/20190827:165656" target="_blank" rel="noopener noreferrer">PLONK algorithm</a> etc.
Ethereum has not yet supported it.</p>
<h2 id="what-zkmega-does"> What zkMega does</h2>
<p>zkMega 目的是为了给Wasm合约生态<strong>引入零知识原语</strong>，类似于 Ethereum，开发者可以在合约生态中基于零知识原语构建出零知识的dapp及服务于部分Layer2的需求。因此 zkMega 在链的角度上实现的功能为几个基本的 零知识原语 的调用接口。而后续将会继续提供链下开发零知识合约功能的工具包组件等。</p>
<p>zkMega 首先会实现链上的零知识的接口调用功能，并提供合约示例。零知识的接口调用功能分为 Runtime 的实现以及 <code>pallet-contracts</code>合约接口的实现。而 <code>pallet-contracts</code>的实现本质上是通过<code>ChainExtentions</code>调用了Runtime的实现。</p>
<p>而 zkMega 实现零知识的方式是使用了 arkwork 的零知识实现库，该库可以编译成 Wasm 被使用。因此 zkMega 做了对于 Native 执行零知识调用与 Wasm 中执行零知识调用的性能对比（benchmark）。基于Substrate的链引入 zkMega 时，可以根据自己是否愿意导出 zkMega 使用的零知识的 host_function，来以 Wasm 或是 Native 的形式运行零知识的计算过程。详情请参照文档 <a href="./benchmark.html">benchmark</a>。</p>
<p>在<code>pallet-contracts</code>的模块引入了 zkMega 的链中，部署于<code>pallet-contracts</code>中的合约模块可以通过<code>ChainExtentions</code>在合约中调用链里 zkMega 提供的零知识的功能。由于<code>ChainExtentions</code>是通过<code>func_id</code>来区分调用的方法，因此 Patract 希望通过 <a href="https://github.com/patractlabs/pips" target="_blank" rel="noopener noreferrer">Patract/pallet-contracts/Polkadot Improvement Proposals (PIPs)</a> 来协定 func_id 与参数。因此 Patract 通过 Pip-101 <a href="https://github.com/patractlabs/PIPs/blob/main/PIPs/pip-101.md" target="_blank" rel="noopener noreferrer">Function ids for Patract Labs zkMega</a> 来约定 zkMega 在 <code>ChainExtentions</code> 部分使用的 <code>func_id</code>。</p>
<p>另一方面 zkMega 为了丰富开发人员的基础库，仿照 Ethereum 生态中的 <code>libsnark</code> 库，提供了例如 <code>MIMC</code>，<code>Merkle Tree</code> 等实用公共函数。这些库可以直接在ink!中被调用。详情可以参考 <a href="./example.html">example</a>。</p>
<h2 id="license"> LICENSE</h2>
<p>Apache-2.0</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">Metis</title>
    <id>https://www.patract.io/zkmega/metis/</id>
    <link href="https://www.patract.io/zkmega/metis/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="metis"> Metis</h1>
<blockquote>
<p>TODO</p>
</blockquote>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">tutorial</title>
    <id>https://www.patract.io/zkmega/tutorial/</id>
    <link href="https://www.patract.io/zkmega/tutorial/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="tutorial"> tutorial</h1>
<h2 id="基于-substrate-的链引入-zkmega-的零知识原语"> 基于 Substrate 的链引入　zkMega 的零知识原语</h2>
<p>具备<code>pallet-contracts</code>的链集成 zkMega 可以参照 Jupiter 的集成方式: <a href="https://github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs" target="_blank" rel="noopener noreferrer">https://github.com/patractlabs/jupiter/blob/master/primitives/chain-extension/src/lib.rs</a></p>
<p>其主要步骤主要分为以下几步：</p>
<ol>
<li>
<p>设计一个实现于 <code>ChainExtension</code> 的结构体</p>
</li>
<li>
<p>在<code>ChainExtension</code>的<code>call</code>的实现中判断 <code>func_id</code> 的范围，按照 <a href="https://github.com/patractlabs/PIPs/blob/main/PIPs/pip-101.md" target="_blank" rel="noopener noreferrer">PIP-101</a> 中的描述，当前使用 zkMega 需要的范围为 <code>0x01000000..=0x010000ff</code>。因此可以在实现中引入：</p>
<div><pre><code><span>match</span> func_id <span>{</span>
        <span>// 0x01000000-0x010000ff Patract ZKP Support</span>
        <span>0x01000000</span><span>..=</span><span>0x010000ff</span> <span>=></span> <span>{</span>

        <span>}</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div></li>
<li>
<p>然后在 <code>0x01000000..=0x010000ff</code> 的代码块中引入 gas 计费的方式。不同的链可能会对 zkMega 调用的方法设计不同的计费方式。在Jupiter的案例中仅最简单的设计了一个固定消耗gas的方式：</p>
<div><pre><code><span>let</span> simple_weight <span>=</span> <span>match</span> func_id <span>&amp;</span> <span>0x01</span> <span>{</span>
        <span>0</span> <span>=></span> <span>100_000</span><span>,</span>   <span>// add, In ethereum: 500</span>
        <span>1</span> <span>=></span> <span>8_000_000</span><span>,</span> <span>// 80x then add, In ethereum: 40000</span>
        <span>2</span> <span>=></span> <span>{</span><span>/* ...*/</span> <span>}</span>
        _ <span>=></span> <span>return</span> <span>Err</span><span>(</span><span>DispatchError</span><span>::</span><span>Other</span><span>(</span><span>"Unimplemented Patract ZKP func_id"</span><span>)</span><span>)</span><span>;</span>
    <span>}</span><span>;</span>
env<span>.</span><span>charge_weight</span><span>(</span>simple_weight<span>)</span><span>?</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div></li>
<li>
<p>根据链自身需要 Native 的调用还是 Wasm 的调用进行不同的实现：</p>
<p>例如如果该链只想支持 Wasm 的调用，则使用如下方式：</p>
<div><pre><code><span>zkmega_arkworks<span>::</span></span><span>call</span><span>(</span><span>&amp;</span>func_id<span>,</span> <span>&amp;</span>input<span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>若该链希望将调用放到 Native 上执行，则可以类似于Jupiter一致，设计 <code>runtime_inferface</code> 包裹<code>zkmega_arkworks::call</code> 的调用，将调用过程放到 std 下编译。然后在 <code>ChainExtensions</code>的实现中调用 <code>runtime_interface</code> 导出的方法即可。</p>
</li>
</ol>
<h2 id="合约中调用-zkmega-的零知识原语的接口"> 合约中调用 zkMega 的零知识原语的接口</h2>
<p>合约中使用 zkMega 就比较简单。首先在合约依赖中引入<code>megaclite-arkworks</code></p>
<div><pre><code><span>[</span><span>dependencies</span><span>]</span>
<span>megaclite-arkworks</span> <span>=</span> <span>{</span> <span>git</span> <span>=</span> <span>"https://github.com/patractlabs/zkmega"</span><span>,</span> <span>features</span> <span>=</span> <span>[</span> <span>"ink"</span> <span>]</span><span>,</span> <span>default-features</span> <span>=</span> <span>false</span> <span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>请注意引入 zkMega 库的时候需要使用 <code>ink</code> feature。</p>
<p>之后在合约里即可以使用 zkMega 提供的方法：</p>
<div><pre><code><span>megaclite_arkworks<span>::</span></span><span>verify</span><span>(</span><span>...</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>如果是比较底层的调用，则可以直接通过<code>call</code>来调用：</p>
<div><pre><code><span>let</span> func_id <span>=</span> <span>/*id defined in PIP-101*/</span>
<span>megaclite_arkworks<span>::</span></span><span>verify</span><span>(</span>func_id<span>,</span> <span>...</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">插件</title>
    <id>https://www.patract.io/redspot/plugin/</id>
    <link href="https://www.patract.io/redspot/plugin/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="插件"> 插件</h1>
<p>Redspot 的核心功能包括 Redspot runtime environment 和编译合约，运行测试，运行脚本这几个任务。</p>
<p>其他诸如与合约的测试套件，合约交互，访问合约，设置不同的链的配置，等功能均有插件提供。用户可以自行选择需要使用的插件。引入一个插件很简单。将它作为一个 npm 的依赖添加。然后在 <code>redspot.config.ts</code> 中加入：</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span> <span>// 引入 @redspot/patract 插件</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span> <span>// 引入 @redspot/chai 插件</span>

<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><p>下面我们介绍一下官方提供的几个插件：</p>
<h2 id="redspot-patract"> @redspot/patract</h2>
<p>该插件会扩展 Redspot runtime environment ，并添加 patract 属性，可以这样访问 patract 实例：</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span> 
</code></pre>
<div><span>1</span><br></div></div><p>patract 的类型定义如下：</p>
<div><pre><code><span>interface</span> <span>Patract</span> <span>{</span>
     Contract<span>:</span> Contract<span>;</span>
     ContractFactory<span>:</span> ContractFactory<span>;</span>
    <span>/**
     * Generating Contract Instance from Contract Addresses
     *
     * @param contractName Contract name
     * @param address contract address
     * @param signer The account used to sign, or the first account in the user configured if it is undefined.
     * @returns Contract Instance
     */</span>
    <span>getContractAt</span><span>(</span>
      contractName<span>:</span> <span>string</span><span>,</span>
      address<span>:</span> AccountId <span>|</span> <span>string</span><span>,</span>
      signer<span>?</span><span>:</span> Signer
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Contract<span>></span><span>;</span>
    <span>/**
     * Return the contract factory
     *
     * @param contractName Contract name
     * @param signer The account used to sign, or the first account in the user configured if it is undefined.
     * @returns Contract Factory Instance
     */</span>
    <span>getContractFactory</span><span>(</span>
      contractName<span>:</span> <span>string</span><span>,</span>
      signer<span>?</span><span>:</span> Signer
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>ContractFactory<span>></span><span>;</span>
    <span>/**
     *  Generate a random account and transfer token to it
     *
     * @param from This account will be transferred to the new account
     * @param amount The amount transferred to the new account
     * @returns New Account
     */</span>
    <span>getRandomSigner</span><span>(</span>
      <span>from</span><span>?</span><span>:</span> Signer<span>,</span>
      amount<span>?</span><span>:</span> <span>BN</span> <span>|</span> <span>number</span> <span>|</span> <span>string</span> <span>|</span> BigInt
    <span>)</span><span>:</span> <span>Promise</span><span>&lt;</span>Signer<span>></span><span>;</span>
  
  <span>}</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br></div></div><h4 id="getrandomsigner-from-amount-promise-signer"> <code>getRandomSigner(from, amount): Promise&lt;Signer&gt;</code></h4>
<p>getRandomSigner 是一个工具函数，用于创建生成随机的signer，并且从 from 传递一些初始的金额给它。</p>
<h4 id="getcontractfactory-contractname-signer-promise-contractfactory"> <code>getContractFactory(contractName, signer?): Promise&lt;ContractFactory&gt;</code></h4>
<p>该函数将通过合约名字和 signer ，创建一个 contractFactory 的实例。</p>
<p>注意合约必须已编译成功。能够在 artifacts 找到对于的 metadata 文件。</p>
<h4 id="getcontractat-contractname-address-signer-promise-contract"> <code>getContractAt(contractName, address, signer): Promise&lt;Contract&gt;</code></h4>
<p>通过合约名字，合约地址和 signer，创建一个 Contract 实例。</p>
<p>注意合约必须已编译成功。能够在 artifacts 找到对于的 metadata 文件。</p>
<p>###ContractFactory</p>
<p>ContractFactory 主要用于合约的部署：</p>
<div><pre><code><span>import</span> <span>{</span> patract <span>}</span> <span>from</span> <span>'redspot'</span>
<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
<span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> signers<span>[</span><span>0</span><span>]</span><span>)</span><span>;</span>
<span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h4 id="new-contractfactory-address-contractmetadata-api-signer"> <code>new ContractFactory(address, contractMetadata, api, signer)</code></h4>
<p>通过合约地址，metadata，api  和  signer 创建一个 contractFactory  实例。</p>
<h4 id="contractfactory-deploy-constructororid-args-overrides-promise-contract"> <code>contractFactory.deploy(constructorOrId, ...args[ , overrides ]): Promise&lt;Contract&gt;</code></h4>
<p>constructorOrId 是需要调用的合约的 contructor 的名字，注意对于一些使用了 <code>trait</code> 的合约，contructor  的名字应该是类似这样：</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br></div></div><p>args 是你所使用的 contructor 需要传入参数列表。</p>
<p>overrides 是可选项，可以用于指定 gasLimit, value, signer, salt 等。</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>,</span> <span>{</span>
  gaslimit<span>:</span> <span>'1000000000000000000'</span><span>,</span>
  salt<span>:</span> <span>'jkqwezlkwklqreqw'</span><span>,</span>
  signer<span>:</span> signers<span>[</span><span>1</span><span>]</span><span>,</span>
  value<span>:</span> <span>'3213321000000000000000000'</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>gasLimit 指这次交易能够使用的最大的 gas 值。</p>
<p>salt 用于合约的地址的生成。部署人，部署参数和 salt 一致的话，将会生成同一个合约地址。</p>
<p>signer 创建 contractFactory 时，会有一个 signer 参数，用于默认的交易签名。 signer 项目可以覆盖默认的签名账户。</p>
<p>value 指传递给即将创建的合约的金额。</p>
<p>请注意，<code>@redspot/patract</code> 不会处理数字金额精度，需要用户自行处理。</p>
<h4 id="contractfactory-deployed-constructororid-args-overrides-promise-contract"> <code>contractFactory.deployed(constructorOrId, ...args[ , overrides ]): Promise&lt;Contract&gt;</code></h4>
<p>该方法和 <code>contractFactory.deploy</code> 类似，唯一的区别是，<code>deployed</code> 会预先检查即将生成的合约地址是否存在，如果存在不会去尝试部署，而是直接使用该合约地址创建 <code>Contract</code> 实例。</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress"> <code>contractFactory.instantiate(constructorOrId, ...args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>如果 wasm 已上传到链上，你可以直接调用 <code>contractFactory.instantiate</code> 实例化合约。它的参数与 <code>deploy</code> 一致，但返回的是合约地址。</p>
<h4 id="contractfactory-instantiate-constructororid-args-overrides-promise-contractaddress-2"> <code>contractFactory.instantiate(constructorOrId, ...args[ , overrides ]): Promise&lt;ContractAddress&gt;</code></h4>
<p>如果 wasm 已上传到链上，你可以直接调用 <code>contractFactory.instantiate</code> 实例化合约。它的参数与 <code>deploy</code> 一致，但返回的是合约地址。</p>
<h4 id="contractfactory-attach-address-contract"> <code>contractFactory.attach(address)：Contract</code></h4>
<p>使用指定的合约地址生成 <code>Contract</code> 实例</p>
<p>####<code>contractFactory.connect(signer)：contractFactory</code></p>
<p>使用指定的 signer，创建一个新的 contractFactory 实例</p>
<h3 id="contract"> Contract</h3>
<h4 id="new-contract-address-contractmetadata-api-signer"> <code>new Contract(address, contractMetadata, api, signer)</code></h4>
<p>通过合约地址，合约的metadata，api  和  signer 创建一个 contractFactory  实例。</p>
<h4 id="contract-query-messagename-args-overrides"> <code>contract.query.MessageName(...args[, overrides])</code></h4>
<p>与 polkadotjs 中类似， contract.query[MessageName] 能够调用 <code>contracts.call</code> rpc。如在 erc20 合约中，获取账户余额：</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>返回值的类型如下：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>ContractCallOutcome</span> <span>{</span>
    debugMessage<span>:</span> Text<span>;</span>
    gasConsumed<span>:</span> u64<span>;</span>
    output<span>:</span> Codec <span>|</span> <span>null</span><span>;</span>
    result<span>:</span> ContractExecResultResult<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><p>它和 polkadotjs api-contract 中是一致。</p>
<p>overrides 是可选项，可以用于指定 gasLimit, value 等。</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span><span>'baseErc20,new'</span><span>,</span> <span>'1000'</span><span>,</span> <span>{</span>
	gasLimit：<span>'1231231231233123123'</span>
  value<span>:</span> <span>'3213321000000000000000000'</span>
  signer： signers<span>[</span><span>1</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>gasLimit value 指的是 <code>contracts.call</code> rpc 中的 gasLimit 和 value 。signer 可以指定 <code>contracts.call</code> 的 origin 地址。</p>
<h4 id="contract-estimategas-messagename-args-overrides"> <code>contract.estimateGas.MessageName(...args[, overrides])</code></h4>
<p>该函数与 <code>contract.query.MessageName</code> 类似，但返回值是预估将要消耗的 gas</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>estimateGas<span>.</span><span>balanceOf</span><span>(</span>someaddress<span>)</span>
result <span>// BN(232130000000)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><h4 id="contract-tx-messagename-args-overrides"> <code>contract.tx.MessageName(...args[,overrides])</code></h4>
<p>通过  <code>contract.tx.MessageName</code> 可以执行合约的交易。 如：</p>
<div><pre><code><span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>someddress<span>,</span> <span>7</span><span>)</span>
</code></pre>
<div><span>1</span><br></div></div><p>和 polkadotjs 不同，该函数会返回一个 promise ， 会等到 交易上链，或者出错才被 resolved。</p>
<p>返回值类型如下：</p>
<div><pre><code><span>export</span> <span>interface</span> <span>TransactionResponse</span> <span>{</span>
  <span>from</span><span>:</span> <span>string</span><span>;</span>
  txHash<span>?</span><span>:</span> <span>string</span><span>;</span>
  blockHash<span>?</span><span>:</span> <span>string</span><span>;</span>
  error<span>?</span><span>:</span> <span>{</span>
    message<span>?</span><span>:</span> <span>any</span><span>;</span>
    data<span>?</span><span>:</span> <span>any</span><span>;</span>
  <span>}</span><span>;</span>
  result<span>:</span> SubmittableResult<span>;</span>
  events<span>?</span><span>:</span> DecodedEvent<span>[</span><span>]</span><span>;</span>
<span>}</span>

<span>export</span> <span>interface</span> <span>DecodedEvent</span> <span>{</span>
  args<span>:</span> Codec<span>[</span><span>]</span><span>;</span>
  name<span>:</span> <span>string</span><span>;</span>
  event<span>:</span> AbiEvent<span>;</span>
<span>}</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br></div></div><p>你可以直接通过 <code>result.events</code> 获取已解析的合约的事件。如果执行出错，你可以通过 <code>result.error.message</code> 获取错误信息。</p>
<p>overrides 是可选项，可以用于指定 gasLimit，value，signer  等。</p>
<div><pre><code><span>const</span> contract <span>=</span> <span>await</span> contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>someddress<span>,</span> <span>7</span><span>,</span> <span>{</span>
  gasLimit：<span>'1231231231233123123'</span>
  value<span>:</span> <span>'3213321000000000000000000'</span>
  signer： signers<span>[</span><span>1</span><span>]</span>
<span>}</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br></div></div><p>ggasLimit 指这次交易能够使用的最大的 gas 值。</p>
<p>value 指传递给即将创建的合约的金额。</p>
<p>signer 用于覆盖默认的 signer。</p>
<h4 id="contract-attach-address-contract"> <code>contract.attach(address)：Contract</code></h4>
<p>使用指定的合约地址生成 <code>Contract</code> 实例</p>
<p>####<code>contract.connect(signer)：contractFactory</code></p>
<p>使用指定的 signer，创建一个新的 contract 实例</p>
<h2 id="redspot-chai"> @redspot/chai</h2>
<p>该插件提供了一组便于编写合约测试用例的匹配器，灵感来自于 <a href="https://ethereum-waffle.readthedocs.io/en/latest/matchers.html" target="_blank" rel="noopener noreferrer">waffle</a> 。</p>
<p>引入 @redspot/chai。该插件会自动修改 chai 匹配器，无需手动调用。</p>
<div><pre><code>// redspot.config.ts

import { RedspotUserConfig } from &#39;redspot/types&#39;;
import &#39;@redspot/chai&#39;; 

export default {
 ...
} as RedspotUserConfig;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>使用 @redspot/chai 的完整例子：</p>
<div><pre><code><span>import</span> <span>BN</span> <span>from</span> <span>'bn.js'</span><span>;</span>
<span>import</span> <span>{</span> expect <span>}</span> <span>from</span> <span>'chai'</span><span>;</span>
<span>import</span> <span>{</span> patract<span>,</span> network<span>,</span> artifacts <span>}</span> <span>from</span> <span>'redspot'</span><span>;</span>

<span>const</span> <span>{</span> getContractFactory<span>,</span> getRandomSigner <span>}</span> <span>=</span> patract<span>;</span>

<span>const</span> <span>{</span> api<span>,</span> getSigners <span>}</span> <span>=</span> network<span>;</span>

<span>describe</span><span>(</span><span>'ERC20'</span><span>,</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
  <span>after</span><span>(</span><span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>return</span> api<span>.</span><span>disconnect</span><span>(</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>async</span> <span>function</span> <span>setup</span><span>(</span><span>)</span> <span>{</span>
    <span>const</span> one <span>=</span> <span>new</span> <span><span>BN</span></span><span>(</span><span>10</span><span>)</span><span>.</span><span>pow</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span>api<span>.</span>registry<span>.</span>chainDecimals<span>[</span><span>0</span><span>]</span><span>)</span><span>)</span><span>;</span>
    <span>const</span> signers <span>=</span> <span>await</span> <span>getSigners</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> Alice <span>=</span> signers<span>[</span><span>0</span><span>]</span><span>;</span>
    <span>const</span> sender <span>=</span> Alice<span>;</span>
    <span>const</span> contractFactory <span>=</span> <span>await</span> <span>getContractFactory</span><span>(</span><span>'erc20'</span><span>,</span> sender<span>)</span><span>;</span>
    <span>const</span> contract <span>=</span> <span>await</span> contractFactory<span>.</span><span>deploy</span><span>(</span><span>'new'</span><span>,</span> <span>'1000'</span><span>)</span><span>;</span>
    <span>const</span> abi <span>=</span> artifacts<span>.</span><span>readArtifact</span><span>(</span><span>'erc20'</span><span>)</span><span>;</span>
    <span>const</span> receiver <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span><span>)</span><span>;</span>

    <span>return</span> <span>{</span> sender<span>,</span> contractFactory<span>,</span> contract<span>,</span> abi<span>,</span> receiver<span>,</span> Alice<span>,</span> one <span>}</span><span>;</span>
  <span>}</span>

  <span>it</span><span>(</span><span>'Assigns initial balance'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>const</span> result <span>=</span> <span>await</span> contract<span>.</span>query<span>.</span><span>balanceOf</span><span>(</span>sender<span>.</span>address<span>)</span><span>;</span>
    <span>expect</span><span>(</span>result<span>.</span>output<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer adds amount to destination account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>
    <span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span><span>changeTokenBalance</span><span>(</span>contract<span>,</span> receiver<span>,</span> <span>7</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span><span>changeTokenBalances</span><span>(</span>contract<span>,</span> <span>[</span>contract<span>.</span>signer<span>,</span> receiver<span>]</span><span>,</span> <span>[</span><span>-</span><span>7</span><span>,</span> <span>7</span><span>]</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Transfer emits event'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> sender<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
      <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
      <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer above the amount'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> receiver <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>1007</span><span>)</span><span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>
      contract<span>,</span>
      <span>'Transfer'</span>
    <span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>

  <span>it</span><span>(</span><span>'Can not transfer from empty account'</span><span>,</span> <span>async</span> <span>(</span><span>)</span> <span>=></span> <span>{</span>
    <span>const</span> <span>{</span> contract<span>,</span> Alice<span>,</span> one<span>,</span> sender <span>}</span> <span>=</span> <span>await</span> <span>setup</span><span>(</span><span>)</span><span>;</span>

    <span>const</span> emptyAccount <span>=</span> <span>await</span> <span>getRandomSigner</span><span>(</span>Alice<span>,</span> one<span>.</span><span>muln</span><span>(</span><span>10000</span><span>)</span><span>)</span><span>;</span>

    <span>await</span> <span>expect</span><span>(</span>
      contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
        signer<span>:</span> emptyAccount
      <span>}</span><span>)</span>
    <span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>
  <span>}</span><span>)</span><span>;</span>
<span>}</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br><span>9</span><br><span>10</span><br><span>11</span><br><span>12</span><br><span>13</span><br><span>14</span><br><span>15</span><br><span>16</span><br><span>17</span><br><span>18</span><br><span>19</span><br><span>20</span><br><span>21</span><br><span>22</span><br><span>23</span><br><span>24</span><br><span>25</span><br><span>26</span><br><span>27</span><br><span>28</span><br><span>29</span><br><span>30</span><br><span>31</span><br><span>32</span><br><span>33</span><br><span>34</span><br><span>35</span><br><span>36</span><br><span>37</span><br><span>38</span><br><span>39</span><br><span>40</span><br><span>41</span><br><span>42</span><br><span>43</span><br><span>44</span><br><span>45</span><br><span>46</span><br><span>47</span><br><span>48</span><br><span>49</span><br><span>50</span><br><span>51</span><br><span>52</span><br><span>53</span><br><span>54</span><br><span>55</span><br><span>56</span><br><span>57</span><br><span>58</span><br><span>59</span><br><span>60</span><br><span>61</span><br><span>62</span><br><span>63</span><br><span>64</span><br><span>65</span><br><span>66</span><br><span>67</span><br><span>68</span><br><span>69</span><br><span>70</span><br><span>71</span><br><span>72</span><br><span>73</span><br></div></div><p>chai 还有更多的内置的用法，参见 chai 文档： https://www.chaijs.com/。</p>
<h3 id="equal"> equal</h3>
<p>@redspot/chai 会修改默认的 equal 的匹配方式。默认的 equal 不支持匹配对象。但 @redspot/chai 可以：</p>
<div><pre><code><span>expect</span><span>(</span><span>new</span> <span><span>BN</span></span><span>(</span><span>1000</span><span>)</span><span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>1000</span><span>)</span> <span>// true</span>
<span>expect</span><span>(</span>AccountId<span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>'5Gdjkw....'</span><span>)</span> <span>// true</span>
<span>expect</span><span>(</span><span>Uint8Array</span><span>(</span><span>[</span><span>1</span><span>,</span><span>2</span><span>,</span><span>3</span><span>]</span><span>)</span><span>)</span><span>.</span>to<span>.</span><span>equal</span><span>(</span><span>'0x010203'</span><span>)</span> <span>// true</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>对于 BN 类型，equal 对调用 <code>new BN(expected).eq(actual)</code> 判断是否相等</p>
<p>对于 polkadotjs 中定义的类型，equal 会调用 <code>Type.eq(actual)</code> 判断是否相等</p>
<p>对于 uint8Array 类型，equal 会将他们都转化为 hex ，再比较是否相等</p>
<p>其他类型则采用默认的判断方式，判断是否相等</p>
<h3 id="changetokenbalance"> changeTokenBalance</h3>
<p>该匹配器可以检测 erc20 的余额变化，内部会调用 balanceOf 接口判断余额。由于 erc20-trait 的获取余额接口是 <code>baseErc20,balanceOf</code></p>
<p>所以并不适用于 erc20-trait 。</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span><span>changeTokenBalance</span><span>(</span>contract<span>,</span> receiver<span>,</span> <span>7</span><span>)</span><span>;</span>

<span>await</span> <span>expect</span><span>(</span><span>(</span><span>)</span> <span>=></span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span><span>changeTokenBalances</span><span>(</span>contract<span>,</span> <span>[</span>contract<span>.</span>signer<span>,</span> receiver<span>]</span><span>,</span> <span>[</span><span>-</span><span>7</span><span>,</span> <span>7</span><span>]</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div><h3 id="emit"> emit</h3>
<p>该匹配器可以检测合约是否发出事件，如检测是否有 Transfer 事件被 emit：</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
    <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
</code></pre>
<div><span>1</span><br><span>2</span><br></div></div><p>检测该事件是否包含指定的参数：</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>)</span>
    <span>.</span>to<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span>
    <span>.</span><span>withArgs</span><span>(</span>sender<span>.</span>address<span>,</span> receiver<span>.</span>address<span>,</span> <span>7</span><span>)</span><span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br></div></div><p>不期待发出事件</p>
<div><pre><code><span>await</span> <span>expect</span><span>(</span>
  contract<span>.</span>tx<span>.</span><span>transfer</span><span>(</span>sender<span>.</span>address<span>,</span> <span>7</span><span>,</span> <span>{</span>
    signer<span>:</span> emptyAccount
  <span>}</span><span>)</span>
<span>)</span><span>.</span>to<span>.</span>not<span>.</span><span>emit</span><span>(</span>contract<span>,</span> <span>'Transfer'</span><span>)</span><span>;</span>

</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br></div></div><h2 id="redspot-gas-reporter"> @redspot/gas-reporter</h2>
<p>该插件会在测试完成时，打印出所调用的合约的交易的 gas 使用量：</p>
<p><img src="https://user-images.githubusercontent.com/7029338/101343840-7700ab00-38e9-11eb-80a0-c6b6d38a9640.png" alt=""></p>
<p>和 @redspot/chai 一样，只需要在引入 @redspot/gas-reporter 后，在 redspot.config.ts 中加入：</p>
<div><pre><code>// redspot.config.ts

import { RedspotUserConfig } from &#39;redspot/types&#39;;
import &#39;@redspot/gas-reporter&#39;; 

export default {
 ...
} as RedspotUserConfig;
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br><span>8</span><br></div></div><p>即可自动运行。</p>
]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
  <entry>
    <title type="html">介绍</title>
    <id>https://www.patract.io/redspot/overview/</id>
    <link href="https://www.patract.io/redspot/overview/"/>
    <updated>2021-04-01T08:52:54.000Z</updated>
    <content type="html"><![CDATA[<h1 id="介绍"> 介绍</h1>
<h2 id="redspot-的架构"> Redspot 的架构</h2>
<p>Redspot是围绕任务（Tasks）和插件（Plugins）的概念设计的。Redspot的大部分功能来自插件，作为开发人员，您可以自由选择要使用的插件。</p>
<h3 id="tasks"> Tasks</h3>
<p>每次从cli运行Redspot时，您都在运行任务。例如执行命令 <code>npx redspot compile</code> 是运行编译任务。 要查看项目中当前可用的任务，请运行<code>npx redspot</code>。 通过运行<code>npx redspot help [task]</code>可以查看任何任务的帮助。</p>
<h3 id="plugins"> Plugins</h3>
<p>Redspot默认情况下安装了一些插件，如果您需要手动安装或升级它们，请按照以下步骤操作。</p>
<p>例如希望安装<code>@redspot/patract</code> 和 <code>@redspot/chai</code> 插件，进入项目根目录后按照以下命令可以安装</p>
<div><pre><code><span>yarn</span> <span>add</span> @redspot/patract @redspot/chai
</code></pre>
<div><span>1</span><br></div></div><p>在项目的目录中的redspot 配置文件<code>redspot.config.js</code>中添加</p>
<div><pre><code><span>import</span> <span>{</span> RedspotUserConfig <span>}</span> <span>from</span> <span>'redspot/types'</span><span>;</span>
<span>import</span> <span>'@redspot/patract'</span><span>;</span>
<span>import</span> <span>'@redspot/chai'</span><span>;</span>

<span>export</span> <span>default</span> <span>{</span>
 <span>...</span>
<span>}</span> <span>as</span> RedspotUserConfig<span>;</span>
</code></pre>
<div><span>1</span><br><span>2</span><br><span>3</span><br><span>4</span><br><span>5</span><br><span>6</span><br><span>7</span><br></div></div>]]></content>
    <author>
      <name>patractlabs</name>
    </author>
    <contributor>
      <name>patractlabs</name>
    </contributor>
    <published>2021-04-01T08:52:54.000Z</published>
    <rights>Copyright by patractlabs</rights>
  </entry>
</feed>