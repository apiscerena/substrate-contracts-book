(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{583:function(t,e,a){"use strict";a.r(e);var n=a(1),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ink"}},[t._v("#")]),t._v(" ink")]),t._v(" "),a("p",[t._v("ink! is an eDSL to write WebAssembly based smart contracts using the Rust programming language. The compilation target are blockchains built on the Substrate framework.")]),t._v(" "),a("p",[t._v("Although ink! claims to be a kind of eDSL for writing contracts, I prefer to think that ink! is a contract framework written in Rust language that meets the requirements of Contracts Pallet.")]),t._v(" "),a("p",[t._v("For example, for EVM, if the instruction set of the EVM is regarded as a specification (the instruction set of the EVM already contains the information of the EVM contract model), then as long as the language can be compiled into the instruction set of the EVM, it can be said to be able to run on the EVM Contract language on the Internet, for example:")]),t._v(" "),a("ul",[a("li",[t._v("Solidity")]),t._v(" "),a("li",[t._v("Vyper")])]),t._v(" "),a("p",[t._v("And ink! Same here. Contracts Pallet requires Wasm code that can run the Contracts Pallet contract model, so any framework/language/library that can be compiled to meet this Wasm contract model can be called Contracts Pallet's contract language.")]),t._v(" "),a("p",[t._v("ink! is to use the Rust language, and on this basis, design a set of eDSL through Rust's "),a("strong",[t._v("hygienic macro system")]),t._v(", and use this eDSL to write Rust code that meets the requirements of Contracts Pallet. In addition to eDSL, ink! also provides a "),a("strong",[t._v("storage collection type")]),t._v(" suitable for contract models, generating Metadata (corresponding to Solidity's ABI) and other tool libraries.")]),t._v(" "),a("p",[t._v("See the official documentation of ink!:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://substrate.dev/docs/en/knowledgebase/smart-contracts/ink-fundamentals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Concepts"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://substrate.dev/substrate-contracts-workshop/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Smart Contracts Tutorial"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://paritytech.github.io/ink-docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Documentation Portal"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"ink-the-process-to-the-contracts-pallet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ink-the-process-to-the-contracts-pallet"}},[t._v("#")]),t._v(" ink! The process to the Contracts pallet")]),t._v(" "),a("p",[t._v("An example image is provided in the official parity document:\n"),a("img",{attrs:{src:"https://paritytech.github.io/ink-docs/img/how-it-works.svg",alt:"https://paritytech.github.io/ink-docs/how-it-works"}})]),t._v(" "),a("p",[t._v("From this figure, we can see that the process of writing and deploying the ink! contract requires")]),t._v(" "),a("ul",[a("li",[t._v("ink! dependent library: provide ink! eDSL framework and provide corresponding dependent components")]),t._v(" "),a("li",[t._v("cargo-contract: tool for compiling ink! contract")]),t._v(" "),a("li",[t._v("SDK: SDK that interacts with the chain and deploys the contract to the chain. The official parity mainly provides "),a("code",[t._v("polkadot.js")]),t._v(", and Patract provides the Himalia toolkit, including "),a("code",[t._v("go")]),t._v(", "),a("code",[t._v("java")]),t._v(", "),a("code",[t._v("python")]),t._v(", "),a("code",[t._v("C#")]),t._v(" SDK")])]),t._v(" "),a("p",[t._v("This chapter will mainly introduce ink! and "),a("code",[t._v("cargo-contract")]),t._v(" information, and the information about SDK will be introduced in the following chapters.")])])}),[],!1,null,null,null);e.default=o.exports},629:function(t,e,a){"use strict";a.r(e);var n=a(1),o=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ink"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ink"}},[t._v("#")]),t._v(" ink")]),t._v(" "),a("p",[t._v("ink! is an eDSL to write WebAssembly based smart contracts using the Rust programming language. The compilation target are blockchains built on the Substrate framework.")]),t._v(" "),a("p",[t._v("ink! 是 parity 官方编写的，可以提供一种 eDSL 的方式编写 Rust 合约，并编译为 Wasm 运行于 Contracts Pallet 模块上。")]),t._v(" "),a("p",[t._v("虽然 ink!自称为一种写合约的 eDSL，但是笔者更倾向于认为 ink!是使用 Rust 语言编写符合能满足 Contracts Pallet 运行的合约框架。")]),t._v(" "),a("p",[t._v("例如对于 EVM 而言，若把 EVM 的指令集看做一种规范（EVM 的指令集已经包含了 EVM 合约模型的信息），那么只要能编译到 EVM 指令集的语言都可以称为能运行在 EVM 上的合约语言，例如：")]),t._v(" "),a("ul",[a("li",[t._v("Solidity")]),t._v(" "),a("li",[t._v("Vyper")])]),t._v(" "),a("p",[t._v("而 ink!这里同理。Contracts Pallet 要求是能满足运行 Contracts Pallet 合约模型的 Wasm 代码，因此任何能编译成满足这个 Wasm 合约模型的框架/语言/库都可以称为 Contracts Pallet 的合约语言。")]),t._v(" "),a("p",[t._v("ink!就是使用 Rust 语言，并在此基础上通过 Rust 的"),a("strong",[t._v("卫生宏系统")]),t._v("设计了一套 eDSL，并使用该 eDSL 编写能满足 Contracts Pallet 要求的 Rust 代码。除 eDSL 之外，ink!还提供了适用于合约模型的"),a("strong",[t._v("存储集合类型")]),t._v("，生成 Metadata（对应于 Solidity 的 ABI）等工具库。")]),t._v(" "),a("p",[t._v("ink!的官方文档见：")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://substrate.dev/docs/en/knowledgebase/smart-contracts/ink-fundamentals",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Concepts"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://substrate.dev/substrate-contracts-workshop/#/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Smart Contracts Tutorial"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://paritytech.github.io/ink-docs/",target:"_blank",rel:"noopener noreferrer"}},[t._v("ink! Documentation Portal"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"ink-到-contracts-pallet-的过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ink-到-contracts-pallet-的过程"}},[t._v("#")]),t._v(" ink! 到 Contracts pallet 的过程")]),t._v(" "),a("p",[t._v("parity 官方文档中提供了示例图：\n"),a("img",{attrs:{src:"https://paritytech.github.io/ink-docs/img/how-it-works.svg",alt:"https://paritytech.github.io/ink-docs/how-it-works"}})]),t._v(" "),a("p",[t._v("由此图可知，编写 ink!合约并部署的过程需要")]),t._v(" "),a("ul",[a("li",[t._v("ink! 依赖库：提供 ink!的 eDSL 框架以及提供相应的依赖组件")]),t._v(" "),a("li",[t._v("cargo-contract: 编译 ink!合约的工具")]),t._v(" "),a("li",[t._v("SDK：与链交互并将合约部署到链上的 SDK，parity 官方主要提供了"),a("code",[t._v("polkadot.js")]),t._v("，Patract 提供了 Himalia 工具包，包含"),a("code",[t._v("go")]),t._v("，"),a("code",[t._v("java")]),t._v("，"),a("code",[t._v("python")]),t._v("，"),a("code",[t._v("C#")]),t._v("的 SDK")])]),t._v(" "),a("p",[t._v("本章节将主要介绍 ink!以及"),a("code",[t._v("cargo-contract")]),t._v("的信息，关于 SDK 的信息放在后续章节介绍。")])])}),[],!1,null,null,null);e.default=o.exports}}]);