(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{609:function(n,s,t){"use strict";t.r(s);var a=t(1),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"contract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contract"}},[n._v("#")]),n._v(" Contract")]),n._v(" "),t("blockquote",[t("p",[n._v("Currently we (Patract) support zkMega in testnet Jupiter ("),t("a",{attrs:{href:"https://github.com/patractlabs/jupiter",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/patractlabs/jupiter"),t("OutboundLink")],1),n._v(") and contract debug\nsandbox Europa ("),t("a",{attrs:{href:"https://github.com/patractlabs/europa",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/patractlabs/europa"),t("OutboundLink")],1),n._v("). And any substrate based chain which uses "),t("code",[n._v("pallet-contracts")]),n._v(" v3.0.0 could integrate zkMega.")]),n._v(" "),t("p",[n._v("if the "),t("code",[n._v("pallet-contracts")]),n._v(" Wasm contract chain use zkMega, then the following contract could run normally in those chain.")])]),n._v(" "),t("h2",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[n._v("#")]),n._v(" Example")]),n._v(" "),t("p",[n._v("TODO this example is wrong for current version!")]),n._v(" "),t("div",{staticClass:"language-rust,ignore line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#![cfg_attr(not(feature = "std"), no_std)]\n\n#[ink::contract]\nmod altbn128 {\n    use ink_env::zk_snarks::AltBn128;\n    use ink_prelude::string::String;\n\n    #[ink(storage)]\n    pub struct Altbn128 {\n        value: String,\n    }\n\n    impl Altbn128 {\n        #[ink(constructor)]\n        pub fn new(init_value: String) -> Self {\n            Self { value: init_value }\n        }\n\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new("hello, world".into())\n        }\n\n        #[ink(message)]\n        pub fn bn_256_add(&mut self) {\n            let mut result = [0; 64];\n            ink_env::inflect_add::<AltBn128>(&[], &[], &mut result);\n            self.value = ink_prelude::format!("0x{:x?}", result);\n        }\n\n        #[ink(message)]\n        pub fn get(&self) -> String {\n            ink_prelude::format!("{}", &self.value)\n        }\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports},652:function(n,s,t){"use strict";t.r(s);var a=t(1),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"contract"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#contract"}},[n._v("#")]),n._v(" Contract")]),n._v(" "),t("blockquote",[t("p",[n._v("Currently we (Patract) support zkMega in testnet Jupiter ("),t("a",{attrs:{href:"https://github.com/patractlabs/jupiter",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/patractlabs/jupiter"),t("OutboundLink")],1),n._v(") and contract debug\nsandbox Europa ("),t("a",{attrs:{href:"https://github.com/patractlabs/europa",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://github.com/patractlabs/europa"),t("OutboundLink")],1),n._v("). And any substrate based chain which uses "),t("code",[n._v("pallet-contracts")]),n._v(" v3.0.0 could integrate zkMega.")]),n._v(" "),t("p",[n._v("if the "),t("code",[n._v("pallet-contracts")]),n._v(" Wasm contract chain use zkMega, then the following contract could run normally in those chain.")])]),n._v(" "),t("h2",{attrs:{id:"example"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[n._v("#")]),n._v(" Example")]),n._v(" "),t("p",[n._v("TODO this example is wrong for current version!")]),n._v(" "),t("div",{staticClass:"language-rust,ignore line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('#![cfg_attr(not(feature = "std"), no_std)]\n\n#[ink::contract]\nmod altbn128 {\n    use ink_env::zk_snarks::AltBn128;\n    use ink_prelude::string::String;\n\n    #[ink(storage)]\n    pub struct Altbn128 {\n        value: String,\n    }\n\n    impl Altbn128 {\n        #[ink(constructor)]\n        pub fn new(init_value: String) -> Self {\n            Self { value: init_value }\n        }\n\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self::new("hello, world".into())\n        }\n\n        #[ink(message)]\n        pub fn bn_256_add(&mut self) {\n            let mut result = [0; 64];\n            ink_env::inflect_add::<AltBn128>(&[], &[], &mut result);\n            self.value = ink_prelude::format!("0x{:x?}", result);\n        }\n\n        #[ink(message)]\n        pub fn get(&self) -> String {\n            ink_prelude::format!("{}", &self.value)\n        }\n    }\n}\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);